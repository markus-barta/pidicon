# name: miniserver24
services:
  zigbee2mqtt:
    container_name: zigbee2mqtt
    depends_on:
      - mosquitto
    image: koenkk/zigbee2mqtt:latest
    volumes:
      - ./mounts/zigbee2mqtt:/app/data
    restart: unless-stopped
    #restart: "no"
    ports:
      - '8888:8888'
    environment:
      - TZ=Europe/Vienna
    env_file:
      - /home/mba/secrets/zigbee2mqtt.env
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'com.centurylinklabs.watchtower.scope=weekly'
    #entrypoint: ["sh", "-c", "env && tail -f /dev/null"]

  pixoo-daemon:
    image: ghcr.io/markus-barta/pixoo-daemon:latest
    container_name: pixoo-daemon
    network_mode: host
    restart: unless-stopped
    environment:
      - TZ=Europe/Vienna
      - PIXOO_DEVICE_TARGETS=192.168.1.189=mock;192.168.1.159=mock
    volumes:
      - ./mounts/nodered/pixoo-media:/pixoo-media
      - ./mounts/shared/tmp:/shared-tmp
    env_file:
      - /home/mba/secrets/smarthome.env
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'com.centurylinklabs.watchtower.scope=pixoo'

  pihole:
    image: pihole/pihole:latest
    restart: unless-stopped
    container_name: pihole
    shm_size: 256mb # Increase shared memory from 64 MB (docker default) to 256 MB
    cap_add:
      - NET_ADMIN # Required for using Pi-hole as DHCP server
      - SYS_NICE # Allow Pi-hole to run with high CPU priority (-10 niceness) for better DNS performance
    environment:
      - TZ=Europe/Vienna
      - FTLCONF_webserver_api_password= # we do not want a password in our local setup
    volumes:
      - ./mounts/pihole/etc/pihole/:/etc/pihole/
      # tell dnsmasq to ignore DHCP requests on eth0 while still allowing DNS queries and inter-container communication
      - ./mounts/pihole/etc/dnsmasq.d/:/etc/dnsmasq.d/
    ports:
      - '53:53/tcp'
      - '53:53/udp'
      - '67:67/udp' # Required for using Pi-hole as DHCP server
      - '80:80/tcp' # Simple, works, sufficient for local access
      # - "443:443/tcp" # Would add certificate complexity (for very minimal security gain)
    networks:
      # dnscrypt:
      bridge:
      local:
        ipv4_address: 192.168.1.99
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'com.centurylinklabs.watchtower.scope=weekly'

  homeassistant:
    container_name: homeassistant
    image: 'ghcr.io/home-assistant/home-assistant:stable'
    volumes:
      - ./mounts/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: unless-stopped
    privileged: true
    network_mode: host
    env_file:
      - /home/mba/secrets/smarthome.env
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'com.centurylinklabs.watchtower.scope=weekly'

  # https://github.com/koush/scrypted
  scrypted:
    image: ghcr.io/koush/scrypted
    container_name: scrypted
    restart: unless-stopped
    network_mode: host
    environment:
      - TZ=Europe/Vienna
      #- SCRYPTED_WEBHOOK_UPDATE_AUTHORIZATION=${SCRYPTED_WEBHOOK_UPDATE_AUTHORIZATION}
      - SCRYPTED_WEBHOOK_UPDATE=http://localhost:10444/v1/update
      # Enable UPnP for device discovery
      - SCRYPTED_UNMANAGED_PLUGINS_SCAN=false
      # Enable to try Avahi inside the container
      #- SCRYPTED_DOCKER_AVAHI=true
    volumes:
      - ./mounts/scrypted/volume:/server/volume
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'com.centurylinklabs.watchtower.scope=weekly'
    env_file:
      - /etc/secrets/tapoC210-00.env # note: not in default user's secrets as it is used by other users (eg. kiosk user)

  # https://github.com/namshi/docker-smtp
  smtp:
    image: namshi/smtp
    restart: unless-stopped
    # runs in default network
    #     networks:
    #       - smtp
    environment:
      - TZ=Europe/Vienna
      - SMARTHOST_ADDRESS=mail.hover.com
      - SMARTHOST_PORT=587
      #      - SMARTHOST_PORT=465
      - SMARTHOST_USER=markus@barta.com
      - SMARTHOST_ALIASES=*
      - RELAY_NETWORKS=:172.0.0.0/8
    env_file:
      - ./smtp/variables.env
    labels:
      - traefik.enable=false
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'com.centurylinklabs.watchtower.scope=weekly'

  #   matterbridge disabled b/c currently we do not want to expose z2m devices to matter network (i.e. one additional layer is not more stability)
  #   matterbridge:
  #     image: luligu/matterbridge:latest
  #     container_name: matterbridge
  #     restart: unless-stopped
  #     network_mode: host
  #     volumes:
  #       - ./mounts/matterbridge:/root/Matterbridge
  #       - ./mounts/matterbridge-storage:/root/.matterbridge

  matter-server:
    image: ghcr.io/home-assistant-libs/python-matter-server:stable
    container_name: matter-server
    restart: unless-stopped
    # Using host network like your Home Assistant container for proper mDNS
    network_mode: host
    security_opt:
      # Required for Bluetooth via dbus
      - apparmor:unconfined
    volumes:
      # Adjusted to match your mount pattern
      - ./mounts/matter-server:/data
      # D-Bus access for Bluetooth (matches your Home Assistant config)
      - /run/dbus:/run/dbus:ro
    environment:
      - TZ=Europe/Vienna
    # Set Bluetooth adapter
    # command: --storage-path /data --paa-root-cert-dir /data/credentials --bluetooth-adapter 0
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'com.centurylinklabs.watchtower.scope=weekly'

  #   homebridge disabled b/c we do not need it any more (final usage was ewelink for vr/TXU01, accessed now via HA)
  #   homebridge:
  #     image: homebridge/homebridge:latest
  #     container_name: homebridge
  #     privileged: true
  #     cap_add:
  #       - NET_ADMIN
  #       - NET_RAW
  #       - SYS_ADMIN
  #     restart: unless-stopped
  #     network_mode: host
  #     environment:
  #       - TZ=Europe/Vienna
  #       - PGID=1000
  #       - PUID=1000
  #       - HOMEBRIDGE_CONFIG_UI=1
  #       - HOMEBRIDGE_CONFIG_UI_PORT=8580
  #       - HOMEBRIDGE_INSECURE=1
  #     volumes:
  #       - ./mounts/homebridge:/homebridge

  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto
    restart: unless-stopped
    ports:
      - '1883:1883'
      - '9001:9001'
    volumes:
      - ./mounts/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ./mounts/mosquitto/config/mosquitto_passwd:/mosquitto/config/mosquitto_passwd
      - ./mounts/mosquitto/var/run:/var/run # needed to fix "unable to write PID" error. https://github.com/eclipse/mosquitto/issues/2074#issuecomment-787135608
      - ./mounts/mosquitto/data:/mosquitto/data
      - ./mounts/mosquitto/log:/mosquitto/log
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'com.centurylinklabs.watchtower.scope=weekly'

  apprise:
    image: caronc/apprise:latest
    container_name: apprise
    restart: unless-stopped
    ports:
      - '8001:8000'
    volumes:
      - ./mounts/apprise/config:/config
      - ./mounts/apprise/etc/nginx/sites-available/default:/etc/nginx/sites-available/default
      - /tmp:/tmp
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'com.centurylinklabs.watchtower.scope=weekly'

  restic-cron-hetzner:
    build: ./restic-cron
    container_name: restic-cron-hetzner
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /home:/backup/home:ro
      - /root:/backup/root:ro
      - /etc:/backup/etc:ro
      - ./restic-cron/id_rsa:/root/.ssh/id_rsa:ro
      - ./restic-cron/id_rsa.pub:/root/.ssh/id_rsa.pub:ro
      - ./restic-cron/ssh_known_hosts:/root/.ssh/known_hosts:rw
      - ./restic-cron/hetzner/run_backup.sh:/usr/local/bin/run_backup.sh:ro
      - ./restic-cron/hetzner/run_check.sh:/usr/local/bin/run_check.sh:ro
      - ./restic-cron/hetzner/run_cleanup.sh:/usr/local/bin/run_cleanup.sh:ro
      - ./restic-cron/hetzner/start_cron.sh:/usr/local/bin/start_cron.sh:ro
    environment:
      RESTIC_BACKUP_OPTIONS: '-r sftp:u387549-sub2@u387549.your-storagebox.de:/'
      MAIL_SUBJECT: 'ðŸ’¾ Restic Backup netcup miniserver24 (jhw22)'
      CRON_BACKUP_EXPRESSION: '30 1 * * *' # 1:30am
    env_file:
      - ./restic-cron/variables.hetzner.env
    labels:
      - com.centurylinklabs.watchtower.enable=false

  opus-stream-to-mqtt:
    image: node:alpine
    container_name: opus-stream-to-mqtt
    network_mode: host
    restart: unless-stopped
    environment:
      - TZ=Europe/Vienna
    volumes:
      - ./mounts/opus-stream-to-mqtt/app:/app
      - ./mounts/shared/tmp:/shared-tmp
    working_dir: /app
    command: sh -c "npm install && npm ci && npm update && npm start" # note: such a small container that built on the fly real fast, no need to make an explicit pre-built container build in github
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'com.centurylinklabs.watchtower.scope=weekly'

  # Weekly Watchtower - checks all containers with scope=weekly every Saturday at 05:00 (because at 04:30 opus-gw restarts)
  watchtower-weekly:
    image: containrrr/watchtower:latest
    container_name: watchtower-weekly
    restart: unless-stopped
    command: --schedule "0 0 5 * * 6" --label-enable --scope weekly
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    environment:
      - 'WATCHTOWER_CLEANUP=true'
      - 'WATCHTOWER_DEBUG=true'
      #      - "WATCHTOWER_POLL_INTERVAL=7200" # https://github.com/containrrr/watchtower/issues/669
      - 'WATCHTOWER_NOTIFICATIONS=shoutrrr'
      - 'WATCHTOWER_NOTIFICATION_TEMPLATE={{range .}}{{.Time.Format "2006-01-02 15:04:05"}} ({{.Level}}): {{.Message}}{{println}}{{end}}'
    env_file:
      - /home/mba/secrets/watchtower.env

  # Pixoo Watchtower - checks only pixoo-daemon every couple of seconds
  watchtower-pixoo:
    image: containrrr/watchtower:latest
    container_name: watchtower-pixoo
    restart: unless-stopped
    command: --interval 3 --label-enable --scope pixoo
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    environment:
      - 'WATCHTOWER_CLEANUP=true'
      - 'WATCHTOWER_DEBUG=true'
      # No notifications for pixoo - too frequent!
      # - "WATCHTOWER_NOTIFICATIONS=shoutrrr"
      # - 'WATCHTOWER_NOTIFICATION_TEMPLATE={{range .}}{{.Time.Format "2006-01-02 15:04:05"}} ({{.Level}}): {{.Message}}{{println}}{{end}}'
    env_file:
      - /home/mba/secrets/watchtower.env

  nodered:
    #custom built image in github, originally from #image: nodered/node-red:latest
    image: ghcr.io/markus-barta/node-red-miniserver24:main
    container_name: nodered
    network_mode: host
    restart: unless-stopped
    environment:
      - TZ=Europe/Vienna
    volumes:
      - ./mounts/nodered/data:/data
      - ./mounts/shared/tmp:/shared-tmp
      - ./mounts/nodered/scripts:/scripts
      - ./mounts/nodered/pixoo-venv:/pixoo-venv
      - ./mounts/nodered/webserver:/webserver
      - ./mounts/nodered/pixoo-media:/pixoo-media
      - /home/mba/secrets:/secrets:r
    env_file:
      - /home/mba/secrets/smarthome.env
      - /home/mba/secrets/influxdb3-csb1.env
    devices:
      - /dev/input/by-id/usb-flirc.tv_flirc-if01-event-kbd:/dev/input/by-id/usb-flirc.tv_flirc-if01-event-kbd
    cap_add:
      - SYS_RAWIO # Necessary for direct device interaction with FLIRC IR-USB-Stick
    group_add: # group IDs for node-RED to access FLIRC
      - '174' # input group
      - '992' # flirc group
    entrypoint: ['/bin/bash', '/scripts/startup.sh']
    command: ['npm', 'start', '--', '--userDir', '/data']
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
      - 'com.centurylinklabs.watchtower.scope=weekly'

# volumes:
#   portainer_data:

networks:
  bridge:
  local:
    driver: macvlan
    driver_opts:
      parent: enp3s0f0
    ipam:
      config:
        - subnet: 192.168.1.0/24
          gateway: 192.168.1.5
