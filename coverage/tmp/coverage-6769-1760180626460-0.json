{
  "result": [
    {
      "scriptId": "12",
      "url": "node:internal/per_context/primordials",
      "functions": [
        {
          "functionName": "SafeIterator",
          "ranges": [{ "startOffset": 9499, "endOffset": 9570, "count": 28 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "next",
          "ranges": [{ "startOffset": 9575, "endOffset": 9624, "count": 163 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 9629, "endOffset": 9674, "count": 27 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "desc.value",
          "ranges": [{ "startOffset": 11239, "endOffset": 11306, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "SafeMap",
          "ranges": [
            { "startOffset": 11964, "endOffset": 11992, "count": 180 }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SafeWeakMap",
          "ranges": [{ "startOffset": 12136, "endOffset": 12164, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "SafeSet",
          "ranges": [
            { "startOffset": 12293, "endOffset": 12321, "count": 131 }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "SafeFinalizationRegistry",
          "ranges": [{ "startOffset": 12745, "endOffset": 12801, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "SafePromise",
          "ranges": [
            { "startOffset": 13140, "endOffset": 13182, "count": 174 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "primordials.SafePromisePrototypeFinally",
          "ranges": [{ "startOffset": 13686, "endOffset": 13960, "count": 5 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 13831, "endOffset": 13955, "count": 5 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 13861, "endOffset": 13910, "count": 5 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "arrayToSafePromiseIterable",
          "ranges": [{ "startOffset": 14153, "endOffset": 14390, "count": 22 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 14256, "endOffset": 14378, "count": 50 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 14296, "endOffset": 14377, "count": 50 },
            { "startOffset": 14341, "endOffset": 14350, "count": 34 },
            { "startOffset": 14351, "endOffset": 14370, "count": 16 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "primordials.SafePromiseAll",
          "ranges": [{ "startOffset": 14603, "endOffset": 14831, "count": 5 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 14741, "endOffset": 14826, "count": 5 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "primordials.SafePromiseAllReturnArrayLike",
          "ranges": [{ "startOffset": 15280, "endOffset": 15836, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 15315, "endOffset": 15835, "count": 1 },
            { "startOffset": 15485, "endOffset": 15504, "count": 0 },
            { "startOffset": 15639, "endOffset": 15652, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 15706, "endOffset": 15815, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "primordials.SafePromiseRace",
          "ranges": [{ "startOffset": 18141, "endOffset": 18370, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 18279, "endOffset": 18365, "count": 17 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "13",
      "url": "node:internal/per_context/domexception",
      "functions": [
        {
          "functionName": "DOMException",
          "ranges": [
            { "startOffset": 1102, "endOffset": 1728, "count": 13 },
            { "startOffset": 1232, "endOffset": 1611, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "15",
      "url": "node:internal/bootstrap/realm",
      "functions": [
        {
          "functionName": "internalBinding",
          "ranges": [{ "startOffset": 5789, "endOffset": 6051, "count": 83 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getOwn",
          "ranges": [
            { "startOffset": 6211, "endOffset": 6365, "count": 628 },
            { "startOffset": 6347, "endOffset": 6362, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "canBeRequiredByUsers",
          "ranges": [{ "startOffset": 8874, "endOffset": 8949, "count": 60 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "canBeRequiredWithoutScheme",
          "ranges": [{ "startOffset": 8960, "endOffset": 9054, "count": 601 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "getCanBeRequiredByUsersWithoutSchemeList",
          "ranges": [{ "startOffset": 9317, "endOffset": 9426, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "normalizeRequirableId",
          "ranges": [
            { "startOffset": 9437, "endOffset": 9782, "count": 453 },
            { "startOffset": 9513, "endOffset": 9675, "count": 0 },
            { "startOffset": 9731, "endOffset": 9755, "count": 27 },
            { "startOffset": 9755, "endOffset": 9781, "count": 426 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "compileForPublicLoader",
          "ranges": [
            { "startOffset": 9940, "endOffset": 10652, "count": 29 },
            { "startOffset": 10021, "endOffset": 10213, "count": 0 },
            { "startOffset": 10277, "endOffset": 10574, "count": 9 },
            { "startOffset": 10536, "endOffset": 10540, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getESMFacade",
          "ranges": [
            { "startOffset": 10656, "endOffset": 11418, "count": 29 },
            { "startOffset": 10694, "endOffset": 10713, "count": 20 },
            { "startOffset": 10713, "endOffset": 11417, "count": 9 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 11155, "endOffset": 11258, "count": 9 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "syncExports",
          "ranges": [
            { "startOffset": 11714, "endOffset": 12058, "count": 38 },
            { "startOffset": 11833, "endOffset": 12048, "count": 628 },
            { "startOffset": 11910, "endOffset": 11919, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "compileForInternalLoader",
          "ranges": [
            { "startOffset": 12062, "endOffset": 12884, "count": 1159 }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "requireBuiltin",
          "ranges": [
            { "startOffset": 13079, "endOffset": 13444, "count": 1132 }
          ],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "16",
      "url": "node:internal/errors",
      "functions": [
        {
          "functionName": "isErrorStackTraceLimitWritable",
          "ranges": [
            { "startOffset": 5751, "endOffset": 6258, "count": 129 },
            { "startOffset": 5981, "endOffset": 6004, "count": 0 },
            { "startOffset": 6105, "endOffset": 6148, "count": 0 },
            { "startOffset": 6227, "endOffset": 6255, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "NodeError",
          "ranges": [{ "startOffset": 10461, "endOffset": 11463, "count": 43 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "value",
          "ranges": [{ "startOffset": 11208, "endOffset": 11286, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "hideStackFrames",
          "ranges": [{ "startOffset": 11628, "endOffset": 11893, "count": 4 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getMessage",
          "ranges": [
            { "startOffset": 12515, "endOffset": 13388, "count": 43 },
            { "startOffset": 12928, "endOffset": 13387, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "captureLargerStackTrace",
          "ranges": [{ "startOffset": 13748, "endOffset": 14150, "count": 43 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "hideInternalStackFrames",
          "ranges": [{ "startOffset": 25029, "endOffset": 25507, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 25103, "endOffset": 25503, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "AbortError",
          "ranges": [
            { "startOffset": 25740, "endOffset": 26049, "count": 1 },
            { "startOffset": 25844, "endOffset": 25874, "count": 0 },
            { "startOffset": 25876, "endOffset": 25957, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 48656, "endOffset": 48809, "count": 42 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 59020, "endOffset": 59424, "count": 1 },
            { "startOffset": 59125, "endOffset": 59159, "count": 0 },
            { "startOffset": 59305, "endOffset": 59351, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "17",
      "url": "node:internal/bootstrap/node",
      "functions": [
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 3721, "endOffset": 3783, "count": 621 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 3789, "endOffset": 3859, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 4967, "endOffset": 5234, "count": 6 },
            { "startOffset": 5095, "endOffset": 5233, "count": 3 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 5686, "endOffset": 5717, "count": 3 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 13587, "endOffset": 13623, "count": 34 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 14526, "endOffset": 14561, "count": 3 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "19",
      "url": "node:internal/async_hooks",
      "functions": [
        {
          "functionName": "lookupPublicResource",
          "ranges": [
            { "startOffset": 6748, "endOffset": 7097, "count": 1882 },
            { "startOffset": 6847, "endOffset": 6863, "count": 0 },
            { "startOffset": 7054, "endOffset": 7076, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "emitInitNative",
          "ranges": [
            { "startOffset": 7288, "endOffset": 8421, "count": 1882 },
            { "startOffset": 7981, "endOffset": 8015, "count": 0 },
            { "startOffset": 8388, "endOffset": 8419, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "emitHook",
          "ranges": [
            { "startOffset": 8522, "endOffset": 9511, "count": 556 },
            { "startOffset": 9071, "endOffset": 9105, "count": 0 },
            { "startOffset": 9478, "endOffset": 9509, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getHookArrays",
          "ranges": [
            { "startOffset": 9806, "endOffset": 10296, "count": 2 },
            { "startOffset": 9921, "endOffset": 10295, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "trackPromise",
          "ranges": [
            { "startOffset": 11188, "endOffset": 11618, "count": 3774 },
            { "startOffset": 11261, "endOffset": 11278, "count": 2464 },
            { "startOffset": 11278, "endOffset": 11460, "count": 1310 },
            { "startOffset": 11460, "endOffset": 11485, "count": 663 },
            { "startOffset": 11486, "endOffset": 11518, "count": 647 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "promiseInitHook",
          "ranges": [
            { "startOffset": 11620, "endOffset": 11864, "count": 1310 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "promiseInitHookWithDestroyTracking",
          "ranges": [
            { "startOffset": 11866, "endOffset": 12002, "count": 1310 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "destroyTracking",
          "ranges": [
            { "startOffset": 12004, "endOffset": 12167, "count": 1310 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "promiseBeforeHook",
          "ranges": [
            { "startOffset": 12169, "endOffset": 12380, "count": 577 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "promiseAfterHook",
          "ranges": [
            { "startOffset": 12382, "endOffset": 12949, "count": 577 },
            { "startOffset": 12512, "endOffset": 12547, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "enableHooks",
          "ranges": [{ "startOffset": 13128, "endOffset": 13234, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "updatePromiseHookMode",
          "ranges": [
            { "startOffset": 13257, "endOffset": 13836, "count": 1 },
            { "startOffset": 13432, "endOffset": 13455, "count": 0 },
            { "startOffset": 13460, "endOffset": 13528, "count": 0 },
            { "startOffset": 13552, "endOffset": 13570, "count": 0 },
            { "startOffset": 13795, "endOffset": 13815, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "disableHooks",
          "ranges": [{ "startOffset": 13838, "endOffset": 14141, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "disablePromiseHookIfNecessary",
          "ranges": [{ "startOffset": 14143, "endOffset": 14259, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "newAsyncId",
          "ranges": [
            { "startOffset": 14460, "endOffset": 14530, "count": 1950 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getOrSetAsyncId",
          "ranges": [
            { "startOffset": 14532, "endOffset": 14722, "count": 663 },
            { "startOffset": 14670, "endOffset": 14721, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getDefaultTriggerAsyncId",
          "ranges": [
            { "startOffset": 14905, "endOffset": 15195, "count": 1287 },
            { "startOffset": 15161, "endOffset": 15194, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "hasHooks",
          "ranges": [
            { "startOffset": 16007, "endOffset": 16070, "count": 7407 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "enabledHooksExist",
          "ranges": [
            { "startOffset": 16072, "endOffset": 16131, "count": 1233 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initHooksExist",
          "ranges": [
            { "startOffset": 16133, "endOffset": 16188, "count": 641 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "destroyHooksExist",
          "ranges": [
            { "startOffset": 16249, "endOffset": 16310, "count": 641 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "promiseResolveHooksExist",
          "ranges": [{ "startOffset": 16312, "endOffset": 16387, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "emitInitScript",
          "ranges": [
            { "startOffset": 16390, "endOffset": 16798, "count": 1885 },
            { "startOffset": 16642, "endOffset": 16649, "count": 3 },
            { "startOffset": 16649, "endOffset": 16682, "count": 1882 },
            { "startOffset": 16682, "endOffset": 16736, "count": 0 },
            { "startOffset": 16736, "endOffset": 16797, "count": 1882 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "emitBeforeScript",
          "ranges": [
            { "startOffset": 16801, "endOffset": 16977, "count": 1216 },
            { "startOffset": 16949, "endOffset": 16975, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "emitAfterScript",
          "ranges": [
            { "startOffset": 16980, "endOffset": 17100, "count": 639 },
            { "startOffset": 17044, "endOffset": 17069, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "emitDestroyScript",
          "ranges": [
            { "startOffset": 17103, "endOffset": 17313, "count": 556 },
            { "startOffset": 17261, "endOffset": 17268, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "hasAsyncIdStack",
          "ranges": [{ "startOffset": 17316, "endOffset": 17379, "count": 18 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "pushAsyncContext",
          "ranges": [
            { "startOffset": 17445, "endOffset": 18015, "count": 1216 },
            { "startOffset": 17665, "endOffset": 17715, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "popAsyncContext",
          "ranges": [
            { "startOffset": 18080, "endOffset": 18691, "count": 1216 },
            { "startOffset": 18196, "endOffset": 18209, "count": 0 },
            { "startOffset": 18288, "endOffset": 18394, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "executionAsyncId",
          "ranges": [
            { "startOffset": 18694, "endOffset": 18770, "count": 594 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "20",
      "url": "node:internal/validators",
      "functions": [
        {
          "functionName": "isUint32",
          "ranges": [{ "startOffset": 946, "endOffset": 1008, "count": 163 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "parseFileMode",
          "ranges": [
            { "startOffset": 1629, "endOffset": 1940, "count": 163 },
            { "startOffset": 1722, "endOffset": 1890, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 2186, "endOffset": 2567, "count": 326 },
            { "startOffset": 2306, "endOffset": 2360, "count": 0 },
            { "startOffset": 2400, "endOffset": 2454, "count": 0 },
            { "startOffset": 2497, "endOffset": 2563, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 2811, "endOffset": 3274, "count": 328 },
            { "startOffset": 2983, "endOffset": 3051, "count": 0 },
            { "startOffset": 3085, "endOffset": 3153, "count": 0 },
            { "startOffset": 3190, "endOffset": 3270, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 3512, "endOffset": 3944, "count": 163 },
            { "startOffset": 3582, "endOffset": 3646, "count": 0 },
            { "startOffset": 3678, "endOffset": 3742, "count": 0 },
            { "startOffset": 3766, "endOffset": 3769, "count": 0 },
            { "startOffset": 3866, "endOffset": 3942, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "validateString",
          "ranges": [{ "startOffset": 4097, "endOffset": 4229, "count": 4048 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateNumber",
          "ranges": [
            { "startOffset": 4430, "endOffset": 4898, "count": 438 },
            { "startOffset": 4528, "endOffset": 4582, "count": 0 },
            { "startOffset": 4603, "endOffset": 4617, "count": 0 },
            { "startOffset": 4635, "endOffset": 4649, "count": 0 },
            { "startOffset": 4690, "endOffset": 4711, "count": 0 },
            { "startOffset": 4714, "endOffset": 4896, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 5084, "endOffset": 5417, "count": 10 },
            { "startOffset": 5155, "endOffset": 5415, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 5228, "endOffset": 5289, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateBoolean",
          "ranges": [
            { "startOffset": 5573, "endOffset": 5708, "count": 1 },
            { "startOffset": 5651, "endOffset": 5706, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getOwnPropertyValueOrDefault",
          "ranges": [
            { "startOffset": 5820, "endOffset": 6001, "count": 102 },
            { "startOffset": 5913, "endOffset": 5960, "count": 51 },
            { "startOffset": 5961, "endOffset": 5979, "count": 68 },
            { "startOffset": 5980, "endOffset": 5998, "count": 34 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 6266, "endOffset": 6821, "count": 34 },
            { "startOffset": 6614, "endOffset": 6636, "count": 17 },
            { "startOffset": 6676, "endOffset": 6746, "count": 0 },
            { "startOffset": 6749, "endOffset": 6817, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 9948, "endOffset": 10178, "count": 163 },
            { "startOffset": 10013, "endOffset": 10176, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 11385, "endOffset": 11602, "count": 40 },
            { "startOffset": 11432, "endOffset": 11528, "count": 17 },
            { "startOffset": 11530, "endOffset": 11600, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 11802, "endOffset": 11918, "count": 740 }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 12133, "endOffset": 12275, "count": 3 },
            { "startOffset": 12217, "endOffset": 12273, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "21",
      "url": "node:internal/util",
      "functions": [
        {
          "functionName": "getDeprecationWarningEmitter",
          "ranges": [{ "startOffset": 2660, "endOffset": 3309, "count": 15 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "shouldEmitWarning",
          "ranges": [{ "startOffset": 2759, "endOffset": 2769, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2806, "endOffset": 3306, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "deprecate",
          "ranges": [{ "startOffset": 4058, "endOffset": 5056, "count": 15 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "deprecated",
          "ranges": [{ "startOffset": 4482, "endOffset": 4668, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "normalizeEncoding",
          "ranges": [
            { "startOffset": 5579, "endOffset": 5710, "count": 163 },
            { "startOffset": 5649, "endOffset": 5667, "count": 0 },
            { "startOffset": 5683, "endOffset": 5709, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "spliceOne",
          "ranges": [
            { "startOffset": 13491, "endOffset": 13618, "count": 6 },
            { "startOffset": 13572, "endOffset": 13602, "count": 7 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "once",
          "ranges": [{ "startOffset": 14940, "endOffset": 15113, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 14997, "endOffset": 15110, "count": 17 },
            { "startOffset": 15033, "endOffset": 15040, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "createDeferredPromise",
          "ranges": [
            { "startOffset": 15353, "endOffset": 15547, "count": 111 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 15447, "endOffset": 15503, "count": 111 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "defineOperation",
          "ranges": [{ "startOffset": 15607, "endOffset": 15808, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 16301, "endOffset": 16444, "count": 11 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 16547, "endOffset": 16743, "count": 11 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 17222, "endOffset": 17373, "count": 4 },
            { "startOffset": 17263, "endOffset": 17294, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setOwnProperty",
          "ranges": [
            { "startOffset": 18868, "endOffset": 19058, "count": 244 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 21160, "endOffset": 21288, "count": 778 },
            { "startOffset": 21204, "endOffset": 21266, "count": 3 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setupCoverageHooks",
          "ranges": [
            { "startOffset": 21416, "endOffset": 22093, "count": 1 },
            { "startOffset": 21886, "endOffset": 22063, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "22",
      "url": "node:internal/options",
      "functions": [
        {
          "functionName": "getCLIOptionsFromBinding",
          "ranges": [
            { "startOffset": 464, "endOffset": 598, "count": 487 },
            { "startOffset": 521, "endOffset": 575, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getEmbedderOptions",
          "ranges": [{ "startOffset": 733, "endOffset": 877, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "refreshOptions",
          "ranges": [{ "startOffset": 879, "endOffset": 960, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "getOptionValue",
          "ranges": [
            { "startOffset": 962, "endOffset": 1228, "count": 487 },
            { "startOffset": 1084, "endOffset": 1185, "count": 5 },
            { "startOffset": 1185, "endOffset": 1225, "count": 482 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "23",
      "url": "node:internal/util/types",
      "functions": [
        {
          "functionName": "isUint8Array",
          "ranges": [{ "startOffset": 236, "endOffset": 342, "count": 335 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "27",
      "url": "node:internal/assert",
      "functions": [
        {
          "functionName": "assert",
          "ranges": [
            { "startOffset": 157, "endOffset": 307, "count": 168 },
            { "startOffset": 205, "endOffset": 305, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "28",
      "url": "node:internal/util/debuglog",
      "functions": [
        {
          "functionName": "initializeDebugEnv",
          "ranges": [
            { "startOffset": 519, "endOffset": 991, "count": 1 },
            { "startOffset": 610, "endOffset": 947, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "testEnabled",
          "ranges": [{ "startOffset": 885, "endOffset": 942, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "testEnabled",
          "ranges": [{ "startOffset": 973, "endOffset": 984, "count": 4 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "noop",
          "ranges": [{ "startOffset": 1419, "endOffset": 1427, "count": 4488 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "debuglogImpl",
          "ranges": [
            { "startOffset": 1548, "endOffset": 2106, "count": 4 },
            { "startOffset": 1623, "endOffset": 2078, "count": 3 },
            { "startOffset": 1642, "endOffset": 2031, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "debug",
          "ranges": [{ "startOffset": 1731, "endOffset": 2024, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "debuglog",
          "ranges": [{ "startOffset": 2326, "endOffset": 3352, "count": 6 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "init",
          "ranges": [{ "startOffset": 2357, "endOffset": 2453, "count": 4 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "debug",
          "ranges": [
            { "startOffset": 2468, "endOffset": 2862, "count": 4 },
            { "startOffset": 2715, "endOffset": 2745, "count": 1 },
            { "startOffset": 2752, "endOffset": 2791, "count": 1 },
            { "startOffset": 2798, "endOffset": 2852, "count": 2 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "test",
          "ranges": [{ "startOffset": 2892, "endOffset": 2961, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "logger",
          "ranges": [
            { "startOffset": 2980, "endOffset": 3175, "count": 4 },
            { "startOffset": 3028, "endOffset": 3058, "count": 1 },
            { "startOffset": 3065, "endOffset": 3104, "count": 1 },
            { "startOffset": 3111, "endOffset": 3165, "count": 2 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 3246, "endOffset": 3280, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "29",
      "url": "node:events",
      "functions": [
        {
          "functionName": "lazyEventEmitterAsyncResource",
          "ranges": [
            { "startOffset": 2894, "endOffset": 6205, "count": 9 },
            { "startOffset": 2984, "endOffset": 6167, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "EventEmitterReferencingAsyncResource",
          "ranges": [{ "startOffset": 3439, "endOffset": 3543, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get eventEmitter",
          "ranges": [{ "startOffset": 3601, "endOffset": 3790, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "EventEmitterAsyncResource",
          "ranges": [{ "startOffset": 4079, "endOffset": 4603, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emit",
          "ranges": [{ "startOffset": 4740, "endOffset": 5110, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitDestroy",
          "ranges": [{ "startOffset": 5171, "endOffset": 5359, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get asyncId",
          "ranges": [{ "startOffset": 5419, "endOffset": 5610, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get triggerAsyncId",
          "ranges": [{ "startOffset": 5670, "endOffset": 5875, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get asyncResource",
          "ranges": [{ "startOffset": 5965, "endOffset": 6154, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "EventEmitter",
          "ranges": [{ "startOffset": 6339, "endOffset": 6408, "count": 21 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6893, "endOffset": 6949, "count": 9 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "checkListener",
          "ranges": [{ "startOffset": 7859, "endOffset": 7937, "count": 95 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 8045, "endOffset": 8093, "count": 49 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "EventEmitter.init",
          "ranges": [{ "startOffset": 9989, "endOffset": 10586, "count": 21 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_getMaxListeners",
          "ranges": [
            { "startOffset": 12161, "endOffset": 12310, "count": 19 },
            { "startOffset": 12279, "endOffset": 12309, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "emit",
          "ranges": [
            { "startOffset": 13467, "endOffset": 15770, "count": 742 }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "_addListener",
          "ranges": [{ "startOffset": 15773, "endOffset": 17666, "count": 45 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "addListener",
          "ranges": [{ "startOffset": 17844, "endOffset": 17936, "count": 43 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "prependListener",
          "ranges": [{ "startOffset": 18223, "endOffset": 18326, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "onceWrapper",
          "ranges": [
            { "startOffset": 18329, "endOffset": 18593, "count": 4 },
            { "startOffset": 18492, "endOffset": 18531, "count": 3 },
            { "startOffset": 18531, "endOffset": 18591, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "_onceWrap",
          "ranges": [{ "startOffset": 18595, "endOffset": 18836, "count": 8 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "once",
          "ranges": [{ "startOffset": 19027, "endOffset": 19153, "count": 8 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "removeListener",
          "ranges": [
            { "startOffset": 19763, "endOffset": 21057, "count": 42 },
            { "startOffset": 19912, "endOffset": 19924, "count": 0 },
            { "startOffset": 19997, "endOffset": 20009, "count": 10 },
            { "startOffset": 20009, "endOffset": 20039, "count": 32 },
            { "startOffset": 20039, "endOffset": 20068, "count": 20 },
            { "startOffset": 20070, "endOffset": 20330, "count": 14 },
            { "startOffset": 20121, "endOffset": 20155, "count": 2 },
            { "startOffset": 20155, "endOffset": 20322, "count": 12 },
            { "startOffset": 20251, "endOffset": 20312, "count": 2 },
            { "startOffset": 20330, "endOffset": 21031, "count": 18 },
            { "startOffset": 20449, "endOffset": 20588, "count": 47 },
            { "startOffset": 20486, "endOffset": 20518, "count": 37 },
            { "startOffset": 20520, "endOffset": 20578, "count": 12 },
            { "startOffset": 20626, "endOffset": 20638, "count": 6 },
            { "startOffset": 20638, "endOffset": 20678, "count": 12 },
            { "startOffset": 20678, "endOffset": 20852, "count": 6 },
            { "startOffset": 20758, "endOffset": 20805, "count": 1 },
            { "startOffset": 20852, "endOffset": 20895, "count": 12 },
            { "startOffset": 20895, "endOffset": 20918, "count": 3 },
            { "startOffset": 20918, "endOffset": 20979, "count": 12 },
            { "startOffset": 20979, "endOffset": 21023, "count": 0 },
            { "startOffset": 21031, "endOffset": 21056, "count": 26 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "listenerCount",
          "ranges": [
            { "startOffset": 24297, "endOffset": 25002, "count": 167 },
            { "startOffset": 24480, "endOffset": 24626, "count": 164 },
            { "startOffset": 24510, "endOffset": 24603, "count": 0 },
            { "startOffset": 24626, "endOffset": 24983, "count": 3 },
            { "startOffset": 24662, "endOffset": 24983, "count": 0 },
            { "startOffset": 24987, "endOffset": 25001, "count": 3 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "arrayClone",
          "ranges": [
            { "startOffset": 25254, "endOffset": 25727, "count": 5 },
            { "startOffset": 25426, "endOffset": 25458, "count": 2 },
            { "startOffset": 25463, "endOffset": 25503, "count": 2 },
            { "startOffset": 25508, "endOffset": 25556, "count": 1 },
            { "startOffset": 25561, "endOffset": 25617, "count": 0 },
            { "startOffset": 25622, "endOffset": 25686, "count": 0 },
            { "startOffset": 25690, "endOffset": 25726, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "addAbortListener",
          "ranges": [
            { "startOffset": 33971, "endOffset": 34853, "count": 17 },
            { "startOffset": 34045, "endOffset": 34119, "count": 0 },
            { "startOffset": 34253, "endOffset": 34375, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 34353, "endOffset": 34369, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "removeEventListener",
          "ranges": [{ "startOffset": 34681, "endOffset": 34747, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 34789, "endOffset": 34845, "count": 17 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "30",
      "url": "node:buffer",
      "functions": [
        {
          "functionName": "createPool",
          "ranges": [{ "startOffset": 4084, "endOffset": 4243, "count": 21 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "alignPool",
          "ranges": [{ "startOffset": 4259, "endOffset": 4381, "count": 210 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "from",
          "ranges": [{ "startOffset": 8559, "endOffset": 9524, "count": 20 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 11471, "endOffset": 11626, "count": 342 },
            { "startOffset": 11557, "endOffset": 11624, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "alloc",
          "ranges": [
            { "startOffset": 11729, "endOffset": 11974, "count": 96 },
            { "startOffset": 11813, "endOffset": 11826, "count": 0 },
            { "startOffset": 11827, "endOffset": 11838, "count": 0 },
            { "startOffset": 11840, "endOffset": 11941, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "allocUnsafe",
          "ranges": [
            { "startOffset": 12153, "endOffset": 12228, "count": 246 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "allocate",
          "ranges": [
            { "startOffset": 12858, "endOffset": 13190, "count": 246 },
            { "startOffset": 12901, "endOffset": 12935, "count": 1 },
            { "startOffset": 12935, "endOffset": 12974, "count": 245 },
            { "startOffset": 12974, "endOffset": 13153, "count": 190 },
            { "startOffset": 13022, "endOffset": 13035, "count": 21 },
            { "startOffset": 13153, "endOffset": 13189, "count": 55 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "fromStringFast",
          "ranges": [{ "startOffset": 13192, "endOffset": 13738, "count": 3 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fromString",
          "ranges": [{ "startOffset": 13740, "endOffset": 14193, "count": 3 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fromArrayLike",
          "ranges": [
            { "startOffset": 14894, "endOffset": 15288, "count": 17 },
            { "startOffset": 14951, "endOffset": 14975, "count": 0 },
            { "startOffset": 15074, "endOffset": 15087, "count": 0 },
            { "startOffset": 15256, "endOffset": 15287, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "fromObject",
          "ranges": [
            { "startOffset": 15290, "endOffset": 15596, "count": 17 },
            { "startOffset": 15348, "endOffset": 15379, "count": 0 },
            { "startOffset": 15423, "endOffset": 15461, "count": 0 },
            { "startOffset": 15496, "endOffset": 15551, "count": 0 },
            { "startOffset": 15553, "endOffset": 15594, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isBuffer",
          "ranges": [{ "startOffset": 15635, "endOffset": 15689, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "isEncoding",
          "ranges": [
            { "startOffset": 16057, "endOffset": 16208, "count": 163 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "write",
          "ranges": [{ "startOffset": 17827, "endOffset": 17891, "count": 3 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "slice",
          "ranges": [
            { "startOffset": 17904, "endOffset": 17950, "count": 163 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getEncodingOps",
          "ranges": [
            { "startOffset": 21219, "endOffset": 23043, "count": 163 },
            { "startOffset": 21369, "endOffset": 21605, "count": 0 },
            { "startOffset": 21610, "endOffset": 22029, "count": 0 },
            { "startOffset": 22034, "endOffset": 22188, "count": 0 },
            { "startOffset": 22193, "endOffset": 22349, "count": 0 },
            { "startOffset": 22354, "endOffset": 22735, "count": 0 },
            { "startOffset": 22740, "endOffset": 22872, "count": 0 },
            { "startOffset": 22877, "endOffset": 23037, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "toString",
          "ranges": [
            { "startOffset": 24447, "endOffset": 25026, "count": 166 },
            { "startOffset": 24519, "endOffset": 24567, "count": 3 },
            { "startOffset": 24567, "endOffset": 24619, "count": 163 },
            { "startOffset": 24619, "endOffset": 24629, "count": 0 },
            { "startOffset": 24629, "endOffset": 24692, "count": 163 },
            { "startOffset": 24659, "endOffset": 24669, "count": 0 },
            { "startOffset": 24692, "endOffset": 24718, "count": 163 },
            { "startOffset": 24718, "endOffset": 24730, "count": 0 },
            { "startOffset": 24736, "endOffset": 24746, "count": 163 },
            { "startOffset": 24746, "endOffset": 24767, "count": 0 },
            { "startOffset": 24767, "endOffset": 24793, "count": 163 },
            { "startOffset": 24793, "endOffset": 24803, "count": 0 },
            { "startOffset": 24803, "endOffset": 24839, "count": 163 },
            { "startOffset": 24839, "endOffset": 24873, "count": 0 },
            { "startOffset": 24873, "endOffset": 24944, "count": 163 },
            { "startOffset": 24944, "endOffset": 24985, "count": 0 },
            { "startOffset": 24985, "endOffset": 25025, "count": 163 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "adjustOffset",
          "ranges": [
            { "startOffset": 33632, "endOffset": 34066, "count": 2 },
            { "startOffset": 33872, "endOffset": 33910, "count": 1 },
            { "startOffset": 33910, "endOffset": 33973, "count": 0 },
            { "startOffset": 33973, "endOffset": 34021, "count": 1 },
            { "startOffset": 34021, "endOffset": 34054, "count": 0 },
            { "startOffset": 34055, "endOffset": 34063, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "subarray",
          "ranges": [
            { "startOffset": 34096, "endOffset": 34399, "count": 1 },
            { "startOffset": 34260, "endOffset": 34271, "count": 0 },
            { "startOffset": 34319, "endOffset": 34322, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 41014, "endOffset": 41049, "count": 13 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "31",
      "url": "node:internal/buffer",
      "functions": [
        {
          "functionName": "writeU_Int8",
          "ranges": [
            { "startOffset": 19785, "endOffset": 20197, "count": 96 },
            { "startOffset": 19996, "endOffset": 20076, "count": 0 },
            { "startOffset": 20114, "endOffset": 20150, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "writeUInt8",
          "ranges": [{ "startOffset": 20199, "endOffset": 20293, "count": 96 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "FastBuffer",
          "ranges": [
            { "startOffset": 26365, "endOffset": 26465, "count": 384 }
          ],
          "isBlockCoverage": false
        },
        {
          "functionName": "markAsUntransferable",
          "ranges": [{ "startOffset": 29764, "endOffset": 30013, "count": 21 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createUnsafeBuffer",
          "ranges": [{ "startOffset": 30291, "endOffset": 30427, "count": 76 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reconnectZeroFillToggle",
          "ranges": [{ "startOffset": 30682, "endOffset": 30754, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "33",
      "url": "node:internal/process/per_thread",
      "functions": [
        {
          "functionName": "refreshHrtimeBuffer",
          "ranges": [{ "startOffset": 1323, "endOffset": 1791, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "hrtime",
          "ranges": [
            { "startOffset": 1840, "endOffset": 2342, "count": 13 },
            { "startOffset": 1911, "endOffset": 2261, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "hrtimeBigInt",
          "ranges": [{ "startOffset": 2344, "endOffset": 2425, "count": 36 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "toggleTraceCategoryState",
          "ranges": [
            { "startOffset": 11885, "endOffset": 12215, "count": 1 },
            { "startOffset": 11965, "endOffset": 12140, "count": 0 },
            { "startOffset": 12172, "endOffset": 12213, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "34",
      "url": "node:internal/process/task_queues",
      "functions": [
        {
          "functionName": "setHasTickScheduled",
          "ranges": [
            { "startOffset": 1059, "endOffset": 1145, "count": 91 },
            { "startOffset": 1135, "endOffset": 1138, "count": 89 },
            { "startOffset": 1139, "endOffset": 1142, "count": 2 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "processTicksAndRejections",
          "ranges": [
            { "startOffset": 1445, "endOffset": 2424, "count": 2 },
            { "startOffset": 1501, "endOffset": 2304, "count": 86 },
            { "startOffset": 1547, "endOffset": 2279, "count": 621 },
            { "startOffset": 1748, "endOffset": 1781, "count": 83 },
            { "startOffset": 1781, "endOffset": 2155, "count": 538 },
            { "startOffset": 1868, "endOffset": 1901, "count": 228 },
            { "startOffset": 1914, "endOffset": 1956, "count": 310 },
            { "startOffset": 1969, "endOffset": 2020, "count": 0 },
            { "startOffset": 2033, "endOffset": 2093, "count": 0 },
            { "startOffset": 2106, "endOffset": 2133, "count": 0 },
            { "startOffset": 2217, "endOffset": 2238, "count": 556 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "nextTick",
          "ranges": [
            { "startOffset": 2568, "endOffset": 3442, "count": 621 },
            { "startOffset": 2669, "endOffset": 2676, "count": 0 },
            { "startOffset": 2724, "endOffset": 2738, "count": 83 },
            { "startOffset": 2743, "endOffset": 2780, "count": 228 },
            { "startOffset": 2785, "endOffset": 2836, "count": 310 },
            { "startOffset": 2841, "endOffset": 2906, "count": 0 },
            { "startOffset": 2911, "endOffset": 3054, "count": 0 },
            { "startOffset": 3083, "endOffset": 3109, "count": 89 },
            { "startOffset": 3354, "endOffset": 3414, "count": 558 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "35",
      "url": "node:internal/process/promises",
      "functions": [
        {
          "functionName": "setHasRejectionToWarn",
          "ranges": [
            { "startOffset": 2119, "endOffset": 2209, "count": 2 },
            { "startOffset": 2199, "endOffset": 2202, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "processPromiseRejections",
          "ranges": [
            { "startOffset": 6636, "endOffset": 9797, "count": 2 },
            { "startOffset": 6794, "endOffset": 6973, "count": 0 },
            { "startOffset": 7038, "endOffset": 9701, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "36",
      "url": "node:internal/fixed_queue",
      "functions": [
        {
          "functionName": "isEmpty",
          "ranges": [{ "startOffset": 3077, "endOffset": 3129, "count": 1414 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "isFull",
          "ranges": [{ "startOffset": 3133, "endOffset": 3200, "count": 621 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "push",
          "ranges": [{ "startOffset": 3204, "endOffset": 3291, "count": 621 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "shift",
          "ranges": [
            { "startOffset": 3295, "endOffset": 3510, "count": 707 },
            { "startOffset": 3388, "endOffset": 3400, "count": 86 },
            { "startOffset": 3400, "endOffset": 3509, "count": 621 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isEmpty",
          "ranges": [{ "startOffset": 3630, "endOffset": 3677, "count": 707 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "push",
          "ranges": [
            { "startOffset": 3681, "endOffset": 3945, "count": 621 },
            { "startOffset": 3722, "endOffset": 3915, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "shift",
          "ranges": [
            { "startOffset": 3949, "endOffset": 4204, "count": 707 },
            { "startOffset": 4041, "endOffset": 4062, "count": 175 },
            { "startOffset": 4064, "endOffset": 4183, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "37",
      "url": "node:async_hooks",
      "functions": [
        {
          "functionName": "AsyncHook",
          "ranges": [{ "startOffset": 1522, "endOffset": 2356, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "enable",
          "ranges": [
            { "startOffset": 2360, "endOffset": 3605, "count": 1 },
            { "startOffset": 2794, "endOffset": 2806, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "disable",
          "ranges": [
            { "startOffset": 3609, "endOffset": 4393, "count": 1 },
            { "startOffset": 3774, "endOffset": 3786, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "createHook",
          "ranges": [{ "startOffset": 4398, "endOffset": 4455, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "AsyncResource",
          "ranges": [
            { "startOffset": 4548, "endOffset": 5745, "count": 19 },
            { "startOffset": 4823, "endOffset": 4844, "count": 0 },
            { "startOffset": 5076, "endOffset": 5155, "count": 0 },
            { "startOffset": 5307, "endOffset": 5470, "count": 17 },
            { "startOffset": 5361, "endOffset": 5410, "count": 0 },
            { "startOffset": 5526, "endOffset": 5741, "count": 17 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "runInAsyncScope",
          "ranges": [{ "startOffset": 5749, "endOffset": 6065, "count": 18 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "asyncId",
          "ranges": [{ "startOffset": 6248, "endOffset": 6297, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "bind",
          "ranges": [
            { "startOffset": 6369, "endOffset": 7137, "count": 1 },
            { "startOffset": 6664, "endOffset": 6755, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "bound",
          "ranges": [{ "startOffset": 6512, "endOffset": 6657, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "39",
      "url": "node:internal/process/execution",
      "functions": [
        {
          "functionName": "tryGetCwd",
          "ranges": [
            { "startOffset": 702, "endOffset": 1032, "count": 1 },
            { "startOffset": 763, "endOffset": 1030, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "40",
      "url": "node:path",
      "functions": [
        {
          "functionName": "isPosixPathSeparator",
          "ranges": [
            { "startOffset": 1852, "endOffset": 1929, "count": 135885 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "normalizeString",
          "ranges": [
            { "startOffset": 2164, "endOffset": 4112, "count": 1812 },
            { "startOffset": 2381, "endOffset": 4096, "count": 135746 },
            { "startOffset": 2414, "endOffset": 2456, "count": 133934 },
            { "startOffset": 2456, "endOffset": 2547, "count": 1812 },
            { "startOffset": 2499, "endOffset": 2505, "count": 1673 },
            { "startOffset": 2505, "endOffset": 2547, "count": 139 },
            { "startOffset": 2547, "endOffset": 2580, "count": 134073 },
            { "startOffset": 2580, "endOffset": 3997, "count": 17501 },
            { "startOffset": 2612, "endOffset": 2625, "count": 14794 },
            { "startOffset": 2627, "endOffset": 2652, "count": 2925 },
            { "startOffset": 2652, "endOffset": 3954, "count": 14576 },
            { "startOffset": 2674, "endOffset": 3709, "count": 112 },
            { "startOffset": 2703, "endOffset": 2729, "count": 78 },
            { "startOffset": 2730, "endOffset": 2804, "count": 21 },
            { "startOffset": 2805, "endOffset": 2879, "count": 21 },
            { "startOffset": 2881, "endOffset": 3569, "count": 91 },
            { "startOffset": 2913, "endOffset": 3390, "count": 57 },
            { "startOffset": 3033, "endOffset": 3109, "count": 0 },
            { "startOffset": 3390, "endOffset": 3559, "count": 34 },
            { "startOffset": 3418, "endOffset": 3559, "count": 0 },
            { "startOffset": 3569, "endOffset": 3701, "count": 55 },
            { "startOffset": 3632, "endOffset": 3650, "count": 21 },
            { "startOffset": 3651, "endOffset": 3657, "count": 34 },
            { "startOffset": 3709, "endOffset": 3954, "count": 14464 },
            { "startOffset": 3755, "endOffset": 3824, "count": 12686 },
            { "startOffset": 3824, "endOffset": 3899, "count": 1778 },
            { "startOffset": 3954, "endOffset": 3997, "count": 17444 },
            { "startOffset": 3997, "endOffset": 4092, "count": 116572 },
            { "startOffset": 4025, "endOffset": 4039, "count": 1836 },
            { "startOffset": 4041, "endOffset": 4062, "count": 444 },
            { "startOffset": 4062, "endOffset": 4092, "count": 116128 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "resolve",
          "ranges": [
            { "startOffset": 34688, "endOffset": 35611, "count": 1673 },
            { "startOffset": 34811, "endOffset": 34831, "count": 4674 },
            { "startOffset": 34838, "endOffset": 35165, "count": 3001 },
            { "startOffset": 34876, "endOffset": 34888, "count": 0 },
            { "startOffset": 34991, "endOffset": 35018, "count": 0 },
            { "startOffset": 35550, "endOffset": 35600, "count": 0 },
            { "startOffset": 35601, "endOffset": 35606, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "normalize",
          "ranges": [
            { "startOffset": 35677, "endOffset": 36290, "count": 139 },
            { "startOffset": 35763, "endOffset": 35774, "count": 0 },
            { "startOffset": 36102, "endOffset": 36196, "count": 0 },
            { "startOffset": 36230, "endOffset": 36242, "count": 0 },
            { "startOffset": 36266, "endOffset": 36278, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isAbsolute",
          "ranges": [
            { "startOffset": 36357, "endOffset": 36513, "count": 256 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "toNamespacedPath",
          "ranges": [
            { "startOffset": 39512, "endOffset": 39588, "count": 1035 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "dirname",
          "ranges": [
            { "startOffset": 39654, "endOffset": 40330, "count": 541 },
            { "startOffset": 39737, "endOffset": 39748, "count": 0 },
            { "startOffset": 39922, "endOffset": 40175, "count": 7022 },
            { "startOffset": 39993, "endOffset": 40077, "count": 541 },
            { "startOffset": 40077, "endOffset": 40169, "count": 6481 },
            { "startOffset": 40203, "endOffset": 40230, "count": 0 },
            { "startOffset": 40267, "endOffset": 40279, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "basename",
          "ranges": [
            { "startOffset": 40426, "endOffset": 42853, "count": 121 },
            { "startOffset": 40487, "endOffset": 40517, "count": 0 },
            { "startOffset": 40649, "endOffset": 40669, "count": 0 },
            { "startOffset": 40670, "endOffset": 40701, "count": 0 },
            { "startOffset": 40703, "endOffset": 42227, "count": 0 },
            { "startOffset": 42275, "endOffset": 42760, "count": 1631 },
            { "startOffset": 42346, "endOffset": 42570, "count": 121 },
            { "startOffset": 42570, "endOffset": 42754, "count": 1510 },
            { "startOffset": 42592, "endOffset": 42754, "count": 121 },
            { "startOffset": 42788, "endOffset": 42798, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "42",
      "url": "node:internal/vm",
      "functions": [
        {
          "functionName": "registerImportModuleDynamically",
          "ranges": [{ "startOffset": 1761, "endOffset": 2126, "count": 120 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "internalCompileFunction",
          "ranges": [
            { "startOffset": 2128, "endOffset": 3011, "count": 120 },
            { "startOffset": 2574, "endOffset": 2647, "count": 0 },
            { "startOffset": 2674, "endOffset": 2731, "count": 0 },
            { "startOffset": 2787, "endOffset": 2860, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "44",
      "url": "node:internal/source_map/source_map_cache",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 620, "endOffset": 645, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "getSourceMapsEnabled",
          "ranges": [{ "startOffset": 1859, "endOffset": 1922, "count": 42 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "setSourceMapsEnabled",
          "ranges": [
            { "startOffset": 1924, "endOffset": 2466, "count": 1 },
            { "startOffset": 2032, "endOffset": 2187, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "extractSourceURLMagicComment",
          "ranges": [
            { "startOffset": 2468, "endOffset": 3068, "count": 42 },
            { "startOffset": 2770, "endOffset": 2803, "count": 0 },
            { "startOffset": 2856, "endOffset": 2992, "count": 0 },
            { "startOffset": 2994, "endOffset": 3067, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "maybeCacheSourceMap",
          "ranges": [
            { "startOffset": 3515, "endOffset": 5217, "count": 42 },
            { "startOffset": 3717, "endOffset": 3737, "count": 0 },
            { "startOffset": 3740, "endOffset": 3747, "count": 0 },
            { "startOffset": 3881, "endOffset": 4005, "count": 0 },
            { "startOffset": 4041, "endOffset": 4107, "count": 0 },
            { "startOffset": 4196, "endOffset": 4213, "count": 0 },
            { "startOffset": 4386, "endOffset": 4400, "count": 0 },
            { "startOffset": 4427, "endOffset": 4589, "count": 0 },
            { "startOffset": 4618, "endOffset": 4861, "count": 0 },
            { "startOffset": 5157, "endOffset": 5211, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "dataFromUrl",
          "ranges": [
            { "startOffset": 5749, "endOffset": 6269, "count": 42 },
            { "startOffset": 5886, "endOffset": 5961, "count": 0 },
            { "startOffset": 5968, "endOffset": 6048, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "lineLengths",
          "ranges": [{ "startOffset": 6459, "endOffset": 6804, "count": 42 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6761, "endOffset": 6800, "count": 6676 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "sourceMapFromFile",
          "ranges": [
            { "startOffset": 6806, "endOffset": 7086, "count": 42 },
            { "startOffset": 7034, "endOffset": 7084, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "sourcesToAbsolute",
          "ranges": [{ "startOffset": 8036, "endOffset": 8363, "count": 42 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 8114, "endOffset": 8220, "count": 62 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "45",
      "url": "node:internal/url",
      "functions": [
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 3902, "endOffset": 4691, "count": 254 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get hasPort",
          "ranges": [{ "startOffset": 4470, "endOffset": 4535, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get hasSearch",
          "ranges": [{ "startOffset": 4539, "endOffset": 4614, "count": 66 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get hasHash",
          "ranges": [{ "startOffset": 4618, "endOffset": 4689, "count": 66 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "isURL",
          "ranges": [
            { "startOffset": 17719, "endOffset": 17814, "count": 679 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "URL",
          "ranges": [
            { "startOffset": 17830, "endOffset": 18256, "count": 254 },
            { "startOffset": 17901, "endOffset": 17949, "count": 0 },
            { "startOffset": 18076, "endOffset": 18107, "count": 120 },
            { "startOffset": 18173, "endOffset": 18220, "count": 42 },
            { "startOffset": 18220, "endOffset": 18255, "count": 212 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "#updateContext",
          "ranges": [
            { "startOffset": 19117, "endOffset": 20056, "count": 212 },
            { "startOffset": 19853, "endOffset": 20052, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "toString",
          "ranges": [
            { "startOffset": 20060, "endOffset": 20170, "count": 24 },
            { "startOffset": 20101, "endOffset": 20135, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get href",
          "ranges": [
            { "startOffset": 20174, "endOffset": 20284, "count": 146 },
            { "startOffset": 20215, "endOffset": 20249, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get protocol",
          "ranges": [
            { "startOffset": 21505, "endOffset": 21672, "count": 50 },
            { "startOffset": 21550, "endOffset": 21584, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get hostname",
          "ranges": [
            { "startOffset": 23653, "endOffset": 23989, "count": 50 },
            { "startOffset": 23698, "endOffset": 23732, "count": 0 },
            { "startOffset": 23893, "endOffset": 23918, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get pathname",
          "ranges": [
            { "startOffset": 24640, "endOffset": 24966, "count": 66 },
            { "startOffset": 24685, "endOffset": 24719, "count": 0 },
            { "startOffset": 24790, "endOffset": 24830, "count": 0 },
            { "startOffset": 24853, "endOffset": 24891, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getPathFromURLPosix",
          "ranges": [
            { "startOffset": 39509, "endOffset": 40030, "count": 50 },
            { "startOffset": 39572, "endOffset": 39628, "count": 0 },
            { "startOffset": 39706, "endOffset": 39989, "count": 4381 },
            { "startOffset": 39737, "endOffset": 39985, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "fileURLToPath",
          "ranges": [
            { "startOffset": 40032, "endOffset": 40371, "count": 50 },
            { "startOffset": 40099, "endOffset": 40120, "count": 42 },
            { "startOffset": 40120, "endOffset": 40214, "count": 8 },
            { "startOffset": 40150, "endOffset": 40214, "count": 0 },
            { "startOffset": 40252, "endOffset": 40293, "count": 0 },
            { "startOffset": 40313, "endOffset": 40340, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "encodePathChars",
          "ranges": [
            { "startOffset": 41184, "endOffset": 41960, "count": 50 },
            { "startOffset": 41277, "endOffset": 41348, "count": 0 },
            { "startOffset": 41476, "endOffset": 41549, "count": 0 },
            { "startOffset": 41607, "endOffset": 41678, "count": 0 },
            { "startOffset": 41736, "endOffset": 41814, "count": 0 },
            { "startOffset": 41872, "endOffset": 41939, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "pathToFileURL",
          "ranges": [
            { "startOffset": 41962, "endOffset": 43939, "count": 50 },
            { "startOffset": 42013, "endOffset": 42059, "count": 0 },
            { "startOffset": 42061, "endOffset": 42826, "count": 0 },
            { "startOffset": 43129, "endOffset": 43168, "count": 0 },
            { "startOffset": 43171, "endOffset": 43222, "count": 0 },
            { "startOffset": 43228, "endOffset": 43244, "count": 0 },
            { "startOffset": 43700, "endOffset": 43772, "count": 0 },
            { "startOffset": 43829, "endOffset": 43897, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "toPathIfFileURL",
          "ranges": [
            { "startOffset": 43941, "endOffset": 44078, "count": 335 },
            { "startOffset": 44037, "endOffset": 44077, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "50",
      "url": "node:internal/console/constructor",
      "functions": [
        {
          "functionName": "value",
          "ranges": [{ "startOffset": 5848, "endOffset": 6493, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6057, "endOffset": 6152, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 6164, "endOffset": 6194, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6324, "endOffset": 6423, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 6435, "endOffset": 6465, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "value",
          "ranges": [{ "startOffset": 6585, "endOffset": 7993, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "createWriteErrorHandler",
          "ranges": [{ "startOffset": 10678, "endOffset": 11567, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 10746, "endOffset": 11564, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "initializeGlobalConsole",
          "ranges": [
            { "startOffset": 20440, "endOffset": 21479, "count": 1 },
            { "startOffset": 20808, "endOffset": 21478, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 21374, "endOffset": 21475, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "52",
      "url": "node:internal/event_target",
      "functions": [
        {
          "functionName": "isEvent",
          "ranges": [{ "startOffset": 2224, "endOffset": 2296, "count": 26 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 2298, "endOffset": 6603, "count": 13 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Event",
          "ranges": [
            { "startOffset": 2614, "endOffset": 3096, "count": 13 },
            { "startOffset": 2696, "endOffset": 2731, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3100, "endOffset": 3615, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "stopImmediatePropagation",
          "ranges": [{ "startOffset": 3619, "endOffset": 3742, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "preventDefault",
          "ranges": [{ "startOffset": 3746, "endOffset": 3870, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get target",
          "ranges": [{ "startOffset": 3911, "endOffset": 4022, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get currentTarget",
          "ranges": [{ "startOffset": 4063, "endOffset": 4181, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get srcElement",
          "ranges": [{ "startOffset": 4222, "endOffset": 4337, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get type",
          "ranges": [
            { "startOffset": 4373, "endOffset": 4480, "count": 13 },
            { "startOffset": 4416, "endOffset": 4452, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get cancelable",
          "ranges": [{ "startOffset": 4517, "endOffset": 4635, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get defaultPrevented",
          "ranges": [
            { "startOffset": 4672, "endOffset": 4822, "count": 13 },
            { "startOffset": 4727, "endOffset": 4763, "count": 0 },
            { "startOffset": 4792, "endOffset": 4817, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get timeStamp",
          "ranges": [{ "startOffset": 4858, "endOffset": 4974, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "composedPath",
          "ranges": [{ "startOffset": 5192, "endOffset": 5339, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get returnValue",
          "ranges": [{ "startOffset": 5376, "endOffset": 5523, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get bubbles",
          "ranges": [{ "startOffset": 5560, "endOffset": 5672, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get composed",
          "ranges": [{ "startOffset": 5709, "endOffset": 5823, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get eventPhase",
          "ranges": [{ "startOffset": 5859, "endOffset": 6016, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get cancelBubble",
          "ranges": [{ "startOffset": 6053, "endOffset": 6181, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set cancelBubble",
          "ranges": [{ "startOffset": 6218, "endOffset": 6367, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "stopPropagation",
          "ranges": [{ "startOffset": 6371, "endOffset": 6498, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Listener",
          "ranges": [
            { "startOffset": 10027, "endOffset": 11491, "count": 17 },
            { "startOffset": 10405, "endOffset": 10427, "count": 0 },
            { "startOffset": 10451, "endOffset": 10473, "count": 0 },
            { "startOffset": 10509, "endOffset": 10533, "count": 0 },
            { "startOffset": 10554, "endOffset": 10573, "count": 0 },
            { "startOffset": 10719, "endOffset": 11175, "count": 0 },
            { "startOffset": 11288, "endOffset": 11487, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Listener.callback",
          "ranges": [{ "startOffset": 11318, "endOffset": 11448, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get capture",
          "ranges": [{ "startOffset": 11558, "endOffset": 11624, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get weak",
          "ranges": [{ "startOffset": 11779, "endOffset": 11839, "count": 51 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "set removed",
          "ranges": [
            { "startOffset": 12008, "endOffset": 12125, "count": 34 },
            { "startOffset": 12050, "endOffset": 12121, "count": 17 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "same",
          "ranges": [
            { "startOffset": 12129, "endOffset": 12296, "count": 17 },
            { "startOffset": 12188, "endOffset": 12211, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "remove",
          "ranges": [
            { "startOffset": 12300, "endOffset": 12557, "count": 17 },
            { "startOffset": 12425, "endOffset": 12460, "count": 0 },
            { "startOffset": 12511, "endOffset": 12553, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initEventTarget",
          "ranges": [{ "startOffset": 12561, "endOffset": 12745, "count": 21 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "EventTarget",
          "ranges": [{ "startOffset": 12988, "endOffset": 13034, "count": 21 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 13038, "endOffset": 13843, "count": 17 },
            { "startOffset": 13199, "endOffset": 13247, "count": 0 },
            { "startOffset": 13249, "endOffset": 13839, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 13846, "endOffset": 13897, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "addEventListener",
          "ranges": [
            { "startOffset": 14286, "endOffset": 16952, "count": 17 },
            { "startOffset": 14381, "endOffset": 14423, "count": 0 },
            { "startOffset": 14460, "endOffset": 14507, "count": 0 },
            { "startOffset": 14847, "endOffset": 15300, "count": 0 },
            { "startOffset": 15364, "endOffset": 15748, "count": 0 },
            { "startOffset": 16311, "endOffset": 16501, "count": 0 },
            { "startOffset": 16503, "endOffset": 16951, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "signal.addEventListener.__proto__",
          "ranges": [{ "startOffset": 15579, "endOffset": 15653, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "removeEventListener",
          "ranges": [
            { "startOffset": 17110, "endOffset": 17951, "count": 17 },
            { "startOffset": 17208, "endOffset": 17250, "count": 0 },
            { "startOffset": 17287, "endOffset": 17334, "count": 0 },
            { "startOffset": 17383, "endOffset": 17390, "count": 0 },
            { "startOffset": 17589, "endOffset": 17596, "count": 0 },
            { "startOffset": 17911, "endOffset": 17947, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "dispatchEvent",
          "ranges": [
            { "startOffset": 18618, "endOffset": 19079, "count": 13 },
            { "startOffset": 18677, "endOffset": 18719, "count": 0 },
            { "startOffset": 18756, "endOffset": 18792, "count": 0 },
            { "startOffset": 18835, "endOffset": 18891, "count": 0 },
            { "startOffset": 18934, "endOffset": 18976, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 19083, "endOffset": 21379, "count": 13 },
            { "startOffset": 19529, "endOffset": 19555, "count": 0 },
            { "startOffset": 19657, "endOffset": 21375, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "createEvent",
          "ranges": [{ "startOffset": 19151, "endOffset": 19351, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "iterationCondition",
          "ranges": [{ "startOffset": 19734, "endOffset": 19899, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateEventListener",
          "ranges": [
            { "startOffset": 26263, "endOffset": 26635, "count": 34 },
            { "startOffset": 26343, "endOffset": 26395, "count": 0 },
            { "startOffset": 26419, "endOffset": 26634, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "validateEventListenerOptions",
          "ranges": [
            { "startOffset": 26637, "endOffset": 27216, "count": 17 },
            { "startOffset": 26726, "endOffset": 26754, "count": 0 },
            { "startOffset": 26784, "endOffset": 26804, "count": 0 },
            { "startOffset": 27135, "endOffset": 27143, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isEventTarget",
          "ranges": [{ "startOffset": 27521, "endOffset": 27597, "count": 47 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "defineEventHandler",
          "ranges": [{ "startOffset": 28495, "endOffset": 29689, "count": 5 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 28679, "endOffset": 28750, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 28756, "endOffset": 29634, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "53",
      "url": "node:util",
      "functions": [
        {
          "functionName": "lazyAbortController",
          "ranges": [{ "startOffset": 2369, "endOffset": 2489, "count": 9 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "inherits",
          "ranges": [
            { "startOffset": 5909, "endOffset": 6547, "count": 1 },
            { "startOffset": 5994, "endOffset": 6051, "count": 0 },
            { "startOffset": 6110, "endOffset": 6177, "count": 0 },
            { "startOffset": 6220, "endOffset": 6350, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get transferableAbortSignal",
          "ranges": [{ "startOffset": 10340, "endOffset": 10433, "count": 3 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get transferableAbortController",
          "ranges": [{ "startOffset": 10437, "endOffset": 10538, "count": 3 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get aborted",
          "ranges": [{ "startOffset": 10542, "endOffset": 10603, "count": 3 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "54",
      "url": "node:internal/webidl",
      "functions": [
        {
          "functionName": "DOMString",
          "ranges": [
            { "startOffset": 4438, "endOffset": 4568, "count": 34 },
            { "startOffset": 4491, "endOffset": 4545, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "55",
      "url": "node:internal/perf/utils",
      "functions": [
        {
          "functionName": "now",
          "ranges": [{ "startOffset": 243, "endOffset": 344, "count": 13 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "refreshTimeOrigin",
          "ranges": [{ "startOffset": 499, "endOffset": 563, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "56",
      "url": "node:internal/bootstrap/switches/is_main_thread",
      "functions": [
        {
          "functionName": "createWritableStdioStream",
          "ranges": [
            { "startOffset": 1423, "endOffset": 3025, "count": 2 },
            { "startOffset": 1575, "endOffset": 1709, "count": 0 },
            { "startOffset": 1715, "endOffset": 1909, "count": 0 },
            { "startOffset": 2216, "endOffset": 2244, "count": 0 },
            { "startOffset": 2246, "endOffset": 2467, "count": 0 },
            { "startOffset": 2650, "endOffset": 2904, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "write",
          "ranges": [{ "startOffset": 2840, "endOffset": 2887, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "addCleanup",
          "ranges": [
            { "startOffset": 3638, "endOffset": 3729, "count": 2 },
            { "startOffset": 3692, "endOffset": 3727, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getStdout",
          "ranges": [
            { "startOffset": 3731, "endOffset": 4423, "count": 3 },
            { "startOffset": 3768, "endOffset": 3782, "count": 2 },
            { "startOffset": 3782, "endOffset": 4016, "count": 1 },
            { "startOffset": 4016, "endOffset": 4074, "count": 0 },
            { "startOffset": 4074, "endOffset": 4422, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "cleanupStdout",
          "ranges": [{ "startOffset": 4089, "endOffset": 4267, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getStderr",
          "ranges": [
            { "startOffset": 4425, "endOffset": 5116, "count": 7 },
            { "startOffset": 4462, "endOffset": 4476, "count": 6 },
            { "startOffset": 4476, "endOffset": 4710, "count": 1 },
            { "startOffset": 4710, "endOffset": 4768, "count": 0 },
            { "startOffset": 4768, "endOffset": 5115, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "cleanupStderr",
          "ranges": [{ "startOffset": 4782, "endOffset": 4960, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "57",
      "url": "node:internal/v8/startup_snapshot",
      "functions": [
        {
          "functionName": "isBuildingSnapshot",
          "ranges": [{ "startOffset": 370, "endOffset": 531, "count": 134 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "runDeserializeCallbacks",
          "ranges": [
            { "startOffset": 725, "endOffset": 898, "count": 1 },
            { "startOffset": 804, "endOffset": 896, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "58",
      "url": "node:internal/process/signal",
      "functions": [
        {
          "functionName": "isSignal",
          "ranges": [{ "startOffset": 238, "endOffset": 334, "count": 4 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "startListeningIfSignal",
          "ranges": [{ "startOffset": 398, "endOffset": 904, "count": 4 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "stopListeningIfSignal",
          "ranges": [
            { "startOffset": 906, "endOffset": 1101, "count": 2 },
            { "startOffset": 1008, "endOffset": 1044, "count": 0 },
            { "startOffset": 1046, "endOffset": 1099, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "59",
      "url": "node:fs",
      "functions": [
        {
          "functionName": "isFileType",
          "ranges": [
            { "startOffset": 5280, "endOffset": 5540, "count": 2183 },
            { "startOffset": 5479, "endOffset": 5499, "count": 190 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "tryStatSync",
          "ranges": [
            { "startOffset": 10866, "endOffset": 11096, "count": 163 },
            { "startOffset": 11009, "endOffset": 11021, "count": 0 },
            { "startOffset": 11023, "endOffset": 11078, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "tryCreateBuffer",
          "ranges": [
            { "startOffset": 11098, "endOffset": 11409, "count": 163 },
            { "startOffset": 11216, "endOffset": 11268, "count": 0 },
            { "startOffset": 11355, "endOffset": 11367, "count": 0 },
            { "startOffset": 11369, "endOffset": 11386, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "tryReadSync",
          "ranges": [
            { "startOffset": 11411, "endOffset": 11666, "count": 163 },
            { "startOffset": 11609, "endOffset": 11621, "count": 0 },
            { "startOffset": 11623, "endOffset": 11640, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "readFileSync",
          "ranges": [
            { "startOffset": 11890, "endOffset": 13288, "count": 163 },
            { "startOffset": 12059, "endOffset": 12065, "count": 0 },
            { "startOffset": 12205, "endOffset": 12208, "count": 0 },
            { "startOffset": 12338, "endOffset": 12361, "count": 0 },
            { "startOffset": 12613, "endOffset": 12982, "count": 0 },
            { "startOffset": 13042, "endOffset": 13138, "count": 0 },
            { "startOffset": 13160, "endOffset": 13200, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "closeSync",
          "ranges": [
            { "startOffset": 13833, "endOffset": 13973, "count": 163 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "openSync",
          "ranges": [
            { "startOffset": 14965, "endOffset": 15361, "count": 163 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "readSync",
          "ranges": [
            { "startOffset": 18030, "endOffset": 19031, "count": 163 },
            { "startOffset": 18172, "endOffset": 18378, "count": 0 },
            { "startOffset": 18402, "endOffset": 18423, "count": 0 },
            { "startOffset": 18514, "endOffset": 18533, "count": 0 },
            { "startOffset": 18566, "endOffset": 18696, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "splitRoot",
          "ranges": [
            { "startOffset": 68437, "endOffset": 68647, "count": 121 },
            { "startOffset": 68504, "endOffset": 68627, "count": 242 },
            { "startOffset": 68582, "endOffset": 68621, "count": 121 },
            { "startOffset": 68627, "endOffset": 68646, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "encodeRealpathResult",
          "ranges": [
            { "startOffset": 68652, "endOffset": 68939, "count": 121 },
            { "startOffset": 68737, "endOffset": 68767, "count": 0 },
            { "startOffset": 68787, "endOffset": 68938, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "nextPart",
          "ranges": [
            { "startOffset": 69345, "endOffset": 69420, "count": 1105 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "realpathSync",
          "ranges": [
            { "startOffset": 69594, "endOffset": 73506, "count": 172 },
            { "startOffset": 69718, "endOffset": 69736, "count": 0 },
            { "startOffset": 69897, "endOffset": 69932, "count": 51 },
            { "startOffset": 69932, "endOffset": 70494, "count": 121 },
            { "startOffset": 70494, "endOffset": 70666, "count": 0 },
            { "startOffset": 70666, "endOffset": 70803, "count": 121 },
            { "startOffset": 70803, "endOffset": 73433, "count": 1105 },
            { "startOffset": 70915, "endOffset": 71046, "count": 121 },
            { "startOffset": 71046, "endOffset": 71204, "count": 984 },
            { "startOffset": 71321, "endOffset": 71474, "count": 915 },
            { "startOffset": 71428, "endOffset": 71452, "count": 0 },
            { "startOffset": 71474, "endOffset": 71540, "count": 190 },
            { "startOffset": 71577, "endOffset": 71626, "count": 0 },
            { "startOffset": 71626, "endOffset": 72930, "count": 190 },
            { "startOffset": 72066, "endOffset": 72850, "count": 0 },
            { "startOffset": 72894, "endOffset": 72924, "count": 0 },
            { "startOffset": 72930, "endOffset": 73245, "count": 0 },
            { "startOffset": 73247, "endOffset": 73429, "count": 0 },
            { "startOffset": 73433, "endOffset": 73447, "count": 121 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "60",
      "url": "node:internal/fs/utils",
      "functions": [
        {
          "functionName": "assertEncoding",
          "ranges": [
            { "startOffset": 3590, "endOffset": 3790, "count": 335 },
            { "startOffset": 3641, "endOffset": 3672, "count": 163 },
            { "startOffset": 3674, "endOffset": 3788, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getOptions",
          "ranges": [
            { "startOffset": 7755, "endOffset": 8381, "count": 335 },
            { "startOffset": 7873, "endOffset": 7905, "count": 0 },
            { "startOffset": 7942, "endOffset": 8060, "count": 163 },
            { "startOffset": 8060, "endOffset": 8182, "count": 172 },
            { "startOffset": 8099, "endOffset": 8182, "count": 0 },
            { "startOffset": 8296, "endOffset": 8360, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "handleErrorFromBinding",
          "ranges": [
            { "startOffset": 8439, "endOffset": 8968, "count": 679 },
            { "startOffset": 8509, "endOffset": 8644, "count": 0 },
            { "startOffset": 8676, "endOffset": 8966, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 9109, "endOffset": 9699, "count": 335 },
            { "startOffset": 9339, "endOffset": 9359, "count": 0 },
            { "startOffset": 9429, "endOffset": 9497, "count": 0 },
            { "startOffset": 9516, "endOffset": 9698, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "stringToFlags",
          "ranges": [
            { "startOffset": 16094, "endOffset": 17350, "count": 163 },
            { "startOffset": 16175, "endOffset": 16230, "count": 0 },
            { "startOffset": 16253, "endOffset": 16279, "count": 0 },
            { "startOffset": 16336, "endOffset": 16347, "count": 0 },
            { "startOffset": 16369, "endOffset": 16406, "count": 0 },
            { "startOffset": 16411, "endOffset": 16437, "count": 0 },
            { "startOffset": 16442, "endOffset": 16454, "count": 0 },
            { "startOffset": 16476, "endOffset": 16512, "count": 0 },
            { "startOffset": 16518, "endOffset": 16565, "count": 0 },
            { "startOffset": 16570, "endOffset": 16581, "count": 0 },
            { "startOffset": 16603, "endOffset": 16660, "count": 0 },
            { "startOffset": 16666, "endOffset": 16712, "count": 0 },
            { "startOffset": 16717, "endOffset": 16728, "count": 0 },
            { "startOffset": 16750, "endOffset": 16805, "count": 0 },
            { "startOffset": 16811, "endOffset": 16859, "count": 0 },
            { "startOffset": 16864, "endOffset": 16875, "count": 0 },
            { "startOffset": 16897, "endOffset": 16955, "count": 0 },
            { "startOffset": 16960, "endOffset": 16971, "count": 0 },
            { "startOffset": 16993, "endOffset": 17051, "count": 0 },
            { "startOffset": 17057, "endOffset": 17104, "count": 0 },
            { "startOffset": 17109, "endOffset": 17120, "count": 0 },
            { "startOffset": 17142, "endOffset": 17198, "count": 0 },
            { "startOffset": 17203, "endOffset": 17214, "count": 0 },
            { "startOffset": 17236, "endOffset": 17292, "count": 0 },
            { "startOffset": 17296, "endOffset": 17349, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 18327, "endOffset": 18706, "count": 163 },
            { "startOffset": 18383, "endOffset": 18450, "count": 0 },
            { "startOffset": 18471, "endOffset": 18538, "count": 0 },
            { "startOffset": 18579, "endOffset": 18702, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 19212, "endOffset": 19482, "count": 335 },
            { "startOffset": 19274, "endOffset": 19296, "count": 0 },
            { "startOffset": 19298, "endOffset": 19384, "count": 0 },
            { "startOffset": 19460, "endOffset": 19480, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 19527, "endOffset": 19662, "count": 163 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 19705, "endOffset": 19826, "count": 326 },
            { "startOffset": 19756, "endOffset": 19775, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 25531, "endOffset": 26001, "count": 163 },
            { "startOffset": 25631, "endOffset": 25999, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "63",
      "url": "node:internal/modules/cjs/loader",
      "functions": [
        {
          "functionName": "get hasLoadedAnyUserCJSModule",
          "ranges": [{ "startOffset": 2204, "endOffset": 2273, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 3441, "endOffset": 3532, "count": 1 },
            { "startOffset": 3488, "endOffset": 3524, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3581, "endOffset": 3624, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3665, "endOffset": 3719, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "stat",
          "ranges": [
            { "startOffset": 5161, "endOffset": 5575, "count": 619 },
            { "startOffset": 5259, "endOffset": 5357, "count": 618 },
            { "startOffset": 5335, "endOffset": 5353, "count": 183 },
            { "startOffset": 5357, "endOffset": 5430, "count": 436 },
            { "startOffset": 5430, "endOffset": 5444, "count": 435 },
            { "startOffset": 5446, "endOffset": 5556, "count": 160 },
            { "startOffset": 5556, "endOffset": 5574, "count": 436 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "updateChildren",
          "ranges": [
            { "startOffset": 6066, "endOffset": 6268, "count": 266 },
            { "startOffset": 6138, "endOffset": 6148, "count": 265 },
            { "startOffset": 6165, "endOffset": 6218, "count": 265 },
            { "startOffset": 6175, "endOffset": 6217, "count": 145 },
            { "startOffset": 6220, "endOffset": 6266, "count": 259 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "reportModuleToWatchMode",
          "ranges": [
            { "startOffset": 6385, "endOffset": 6541, "count": 415 },
            { "startOffset": 6466, "endOffset": 6481, "count": 0 },
            { "startOffset": 6483, "endOffset": 6539, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Module",
          "ranges": [
            { "startOffset": 7135, "endOffset": 7892, "count": 121 },
            { "startOffset": 7448, "endOffset": 7458, "count": 0 },
            { "startOffset": 7476, "endOffset": 7840, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 9854, "endOffset": 9879, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeCJS",
          "ranges": [{ "startOffset": 10599, "endOffset": 11099, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "tryPackage",
          "ranges": [
            { "startOffset": 11983, "endOffset": 13262, "count": 33 },
            { "startOffset": 12105, "endOffset": 12186, "count": 12 },
            { "startOffset": 12186, "endOffset": 12280, "count": 21 },
            { "startOffset": 12280, "endOffset": 12324, "count": 1 },
            { "startOffset": 12325, "endOffset": 12392, "count": 0 },
            { "startOffset": 12418, "endOffset": 13243, "count": 0 },
            { "startOffset": 13243, "endOffset": 13261, "count": 21 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "tryFile",
          "ranges": [
            { "startOffset": 13571, "endOffset": 13807, "count": 243 },
            { "startOffset": 13660, "endOffset": 13671, "count": 94 },
            { "startOffset": 13671, "endOffset": 13716, "count": 149 },
            { "startOffset": 13716, "endOffset": 13726, "count": 0 },
            { "startOffset": 13728, "endOffset": 13771, "count": 0 },
            { "startOffset": 13771, "endOffset": 13806, "count": 149 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "tryExtensions",
          "ranges": [
            { "startOffset": 14072, "endOffset": 14292, "count": 152 },
            { "startOffset": 14161, "endOffset": 14274, "count": 214 },
            { "startOffset": 14240, "endOffset": 14270, "count": 121 },
            { "startOffset": 14274, "endOffset": 14291, "count": 31 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "findLongestRegisteredExtension",
          "ranges": [
            { "startOffset": 14476, "endOffset": 14952, "count": 121 },
            { "startOffset": 14700, "endOffset": 14934, "count": 122 },
            { "startOffset": 14751, "endOffset": 14764, "count": 0 },
            { "startOffset": 14902, "endOffset": 14930, "count": 121 },
            { "startOffset": 14934, "endOffset": 14951, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "trySelfParentPath",
          "ranges": [
            { "startOffset": 15075, "endOffset": 15368, "count": 213 },
            { "startOffset": 15127, "endOffset": 15144, "count": 1 },
            { "startOffset": 15144, "endOffset": 15202, "count": 212 },
            { "startOffset": 15202, "endOffset": 15366, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "trySelf",
          "ranges": [
            { "startOffset": 15576, "endOffset": 16504, "count": 213 },
            { "startOffset": 15635, "endOffset": 15652, "count": 1 },
            { "startOffset": 15652, "endOffset": 15774, "count": 212 },
            { "startOffset": 15775, "endOffset": 15800, "count": 59 },
            { "startOffset": 15802, "endOffset": 15825, "count": 153 },
            { "startOffset": 15825, "endOffset": 15872, "count": 59 },
            { "startOffset": 15872, "endOffset": 15898, "count": 0 },
            { "startOffset": 15898, "endOffset": 16064, "count": 59 },
            { "startOffset": 15960, "endOffset": 16035, "count": 0 },
            { "startOffset": 16064, "endOffset": 16502, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "resolveExports",
          "ranges": [
            { "startOffset": 16852, "endOffset": 17670, "count": 170 },
            { "startOffset": 17059, "endOffset": 17074, "count": 139 },
            { "startOffset": 17089, "endOffset": 17100, "count": 139 },
            { "startOffset": 17100, "endOffset": 17223, "count": 31 },
            { "startOffset": 17225, "endOffset": 17668, "count": 8 },
            { "startOffset": 17505, "endOffset": 17664, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Module._findPath",
          "ranges": [
            { "startOffset": 17963, "endOffset": 21970, "count": 214 },
            { "startOffset": 18073, "endOffset": 18096, "count": 2 },
            { "startOffset": 18096, "endOffset": 18159, "count": 212 },
            { "startOffset": 18136, "endOffset": 18159, "count": 0 },
            { "startOffset": 18292, "endOffset": 18315, "count": 43 },
            { "startOffset": 18315, "endOffset": 18898, "count": 171 },
            { "startOffset": 18458, "endOffset": 18897, "count": 169 },
            { "startOffset": 18537, "endOffset": 18891, "count": 0 },
            { "startOffset": 18973, "endOffset": 19429, "count": 139 },
            { "startOffset": 19079, "endOffset": 19164, "count": 34 },
            { "startOffset": 19099, "endOffset": 19163, "count": 0 },
            { "startOffset": 19165, "endOffset": 19423, "count": 34 },
            { "startOffset": 19334, "endOffset": 19421, "count": 0 },
            { "startOffset": 19474, "endOffset": 19628, "count": 139 },
            { "startOffset": 19591, "endOffset": 19624, "count": 34 },
            { "startOffset": 19628, "endOffset": 19690, "count": 171 },
            { "startOffset": 19690, "endOffset": 21951, "count": 248 },
            { "startOffset": 19822, "endOffset": 19832, "count": 214 },
            { "startOffset": 19833, "endOffset": 19854, "count": 213 },
            { "startOffset": 19856, "endOffset": 19879, "count": 77 },
            { "startOffset": 19879, "endOffset": 19907, "count": 171 },
            { "startOffset": 19907, "endOffset": 20047, "count": 170 },
            { "startOffset": 20000, "endOffset": 20041, "count": 8 },
            { "startOffset": 20047, "endOffset": 20177, "count": 163 },
            { "startOffset": 20177, "endOffset": 21418, "count": 161 },
            { "startOffset": 20199, "endOffset": 21183, "count": 22 },
            { "startOffset": 20232, "endOffset": 20421, "count": 21 },
            { "startOffset": 20287, "endOffset": 20347, "count": 0 },
            { "startOffset": 20421, "endOffset": 21175, "count": 1 },
            { "startOffset": 20475, "endOffset": 21115, "count": 0 },
            { "startOffset": 21206, "endOffset": 21412, "count": 139 },
            { "startOffset": 21418, "endOffset": 21438, "count": 163 },
            { "startOffset": 21438, "endOffset": 21449, "count": 33 },
            { "startOffset": 21451, "endOffset": 21677, "count": 33 },
            { "startOffset": 21553, "endOffset": 21609, "count": 2 },
            { "startOffset": 21677, "endOffset": 21773, "count": 163 },
            { "startOffset": 21773, "endOffset": 21951, "count": 0 },
            { "startOffset": 21951, "endOffset": 21969, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Module._nodeModulePaths",
          "ranges": [
            { "startOffset": 24047, "endOffset": 25235, "count": 121 },
            { "startOffset": 24319, "endOffset": 24358, "count": 0 },
            { "startOffset": 24679, "endOffset": 25113, "count": 8315 },
            { "startOffset": 24775, "endOffset": 24983, "count": 984 },
            { "startOffset": 24802, "endOffset": 24942, "count": 865 },
            { "startOffset": 24983, "endOffset": 25107, "count": 7331 },
            { "startOffset": 25003, "endOffset": 25107, "count": 2620 },
            { "startOffset": 25038, "endOffset": 25064, "count": 1755 },
            { "startOffset": 25064, "endOffset": 25099, "count": 865 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Module._resolveLookupPaths",
          "ranges": [
            { "startOffset": 25370, "endOffset": 26657, "count": 213 },
            { "startOffset": 25450, "endOffset": 25516, "count": 0 },
            { "startOffset": 25601, "endOffset": 25800, "count": 179 },
            { "startOffset": 25681, "endOffset": 25731, "count": 109 },
            { "startOffset": 25732, "endOffset": 25799, "count": 0 },
            { "startOffset": 25802, "endOffset": 26129, "count": 34 },
            { "startOffset": 25862, "endOffset": 25877, "count": 33 },
            { "startOffset": 25879, "endOffset": 25989, "count": 33 },
            { "startOffset": 25989, "endOffset": 26029, "count": 1 },
            { "startOffset": 26118, "endOffset": 26124, "count": 0 },
            { "startOffset": 26129, "endOffset": 26197, "count": 179 },
            { "startOffset": 26198, "endOffset": 26217, "count": 179 },
            { "startOffset": 26219, "endOffset": 26468, "count": 0 },
            { "startOffset": 26468, "endOffset": 26656, "count": 179 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getExportsForCircularRequire",
          "ranges": [{ "startOffset": 28113, "endOffset": 28757, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Module._load",
          "ranges": [
            { "startOffset": 29423, "endOffset": 32576, "count": 295 },
            { "startOffset": 29506, "endOffset": 30334, "count": 294 },
            { "startOffset": 29965, "endOffset": 30330, "count": 53 },
            { "startOffset": 30145, "endOffset": 30217, "count": 0 },
            { "startOffset": 30262, "endOffset": 30330, "count": 0 },
            { "startOffset": 30334, "endOffset": 30387, "count": 242 },
            { "startOffset": 30387, "endOffset": 30659, "count": 2 },
            { "startOffset": 30516, "endOffset": 30576, "count": 0 },
            { "startOffset": 30659, "endOffset": 30812, "count": 240 },
            { "startOffset": 30812, "endOffset": 31182, "count": 92 },
            { "startOffset": 30892, "endOffset": 31130, "count": 1 },
            { "startOffset": 30988, "endOffset": 31015, "count": 0 },
            { "startOffset": 31085, "endOffset": 31130, "count": 0 },
            { "startOffset": 31130, "endOffset": 31178, "count": 91 },
            { "startOffset": 31182, "endOffset": 31242, "count": 148 },
            { "startOffset": 31242, "endOffset": 31325, "count": 27 },
            { "startOffset": 31325, "endOffset": 31455, "count": 121 },
            { "startOffset": 31472, "endOffset": 31613, "count": 1 },
            { "startOffset": 31613, "endOffset": 32548, "count": 121 },
            { "startOffset": 31891, "endOffset": 32294, "count": 0 },
            { "startOffset": 32476, "endOffset": 32544, "count": 0 },
            { "startOffset": 32548, "endOffset": 32575, "count": 121 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Module._resolveFilename",
          "ranges": [
            { "startOffset": 33038, "endOffset": 36174, "count": 240 },
            { "startOffset": 33135, "endOffset": 33160, "count": 27 },
            { "startOffset": 33160, "endOffset": 33210, "count": 213 },
            { "startOffset": 33210, "endOffset": 33229, "count": 0 },
            { "startOffset": 33231, "endOffset": 34324, "count": 0 },
            { "startOffset": 34324, "endOffset": 34419, "count": 213 },
            { "startOffset": 34419, "endOffset": 34467, "count": 0 },
            { "startOffset": 34469, "endOffset": 35111, "count": 0 },
            { "startOffset": 35111, "endOffset": 35272, "count": 213 },
            { "startOffset": 35272, "endOffset": 35468, "count": 0 },
            { "startOffset": 35468, "endOffset": 35628, "count": 213 },
            { "startOffset": 35628, "endOffset": 36173, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "finalizeEsmResolution",
          "ranges": [
            { "startOffset": 36601, "endOffset": 37182, "count": 8 },
            { "startOffset": 36799, "endOffset": 36928, "count": 0 },
            { "startOffset": 37047, "endOffset": 37181, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Module.load",
          "ranges": [
            { "startOffset": 37831, "endOffset": 38680, "count": 121 },
            { "startOffset": 38166, "endOffset": 38196, "count": 0 },
            { "startOffset": 38198, "endOffset": 38250, "count": 0 },
            { "startOffset": 38530, "endOffset": 38578, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Module.require",
          "ranges": [
            { "startOffset": 38967, "endOffset": 39266, "count": 294 },
            { "startOffset": 39027, "endOffset": 39145, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "wrapSafe",
          "ranges": [
            { "startOffset": 39792, "endOffset": 42146, "count": 120 },
            { "startOffset": 40177, "endOffset": 40945, "count": 0 },
            { "startOffset": 41808, "endOffset": 41906, "count": 42 },
            { "startOffset": 41940, "endOffset": 42144, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "importModuleDynamically",
          "ranges": [{ "startOffset": 39909, "endOffset": 40161, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Module._compile",
          "ranges": [
            { "startOffset": 42467, "endOffset": 44293, "count": 120 },
            { "startOffset": 42558, "endOffset": 42568, "count": 0 },
            { "startOffset": 42586, "endOffset": 42739, "count": 0 },
            { "startOffset": 42872, "endOffset": 42896, "count": 0 },
            { "startOffset": 42898, "endOffset": 43634, "count": 0 },
            { "startOffset": 43857, "endOffset": 43887, "count": 1 },
            { "startOffset": 43912, "endOffset": 44051, "count": 0 },
            { "startOffset": 44253, "endOffset": 44274, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Module._extensions..js",
          "ranges": [
            { "startOffset": 44471, "endOffset": 46271, "count": 120 },
            { "startOffset": 44632, "endOffset": 44640, "count": 0 },
            { "startOffset": 44642, "endOffset": 44707, "count": 0 },
            { "startOffset": 44879, "endOffset": 44901, "count": 0 },
            { "startOffset": 44997, "endOffset": 46227, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Module._extensions..json",
          "ranges": [
            { "startOffset": 46453, "endOffset": 46859, "count": 1 },
            { "startOffset": 46563, "endOffset": 46573, "count": 0 },
            { "startOffset": 46591, "endOffset": 46693, "count": 0 },
            { "startOffset": 46776, "endOffset": 46857, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Module._initPaths",
          "ranges": [
            { "startOffset": 49087, "endOffset": 50052, "count": 1 },
            { "startOffset": 49128, "endOffset": 49153, "count": 0 },
            { "startOffset": 49205, "endOffset": 49228, "count": 0 },
            { "startOffset": 49436, "endOffset": 49478, "count": 0 },
            { "startOffset": 49777, "endOffset": 49919, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "64",
      "url": "node:internal/modules/helpers",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1054, "endOffset": 1079, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "toRealPath",
          "ranges": [{ "startOffset": 1548, "endOffset": 1680, "count": 172 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeCjsConditions",
          "ranges": [
            { "startOffset": 1796, "endOffset": 2188, "count": 1 },
            { "startOffset": 1975, "endOffset": 1979, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getCjsConditions",
          "ranges": [
            { "startOffset": 2255, "endOffset": 2382, "count": 8 },
            { "startOffset": 2320, "endOffset": 2356, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "loadBuiltinModule",
          "ranges": [
            { "startOffset": 2609, "endOffset": 2989, "count": 29 },
            { "startOffset": 2698, "endOffset": 2715, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "lazyModule",
          "ranges": [
            { "startOffset": 3082, "endOffset": 3195, "count": 120 },
            { "startOffset": 3126, "endOffset": 3174, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "makeRequireFunction",
          "ranges": [
            { "startOffset": 3784, "endOffset": 6316, "count": 120 },
            { "startOffset": 3923, "endOffset": 3986, "count": 0 },
            { "startOffset": 4053, "endOffset": 5324, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "require",
          "ranges": [{ "startOffset": 4196, "endOffset": 5319, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "require",
          "ranges": [{ "startOffset": 5346, "endOffset": 5486, "count": 294 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "resolve",
          "ranges": [{ "startOffset": 5672, "endOffset": 5818, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "paths",
          "ranges": [{ "startOffset": 5963, "endOffset": 6085, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "stripBOM",
          "ranges": [
            { "startOffset": 6528, "endOffset": 6683, "count": 1 },
            { "startOffset": 6610, "endOffset": 6663, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "normalizeReferrerURL",
          "ranges": [
            { "startOffset": 9045, "endOffset": 9233, "count": 42 },
            { "startOffset": 9198, "endOffset": 9232, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "65",
      "url": "node:internal/modules/package_json_reader",
      "functions": [
        {
          "functionName": "read",
          "ranges": [
            { "startOffset": 1053, "endOffset": 3803, "count": 1096 },
            { "startOffset": 1149, "endOffset": 1186, "count": 1033 },
            { "startOffset": 1186, "endOffset": 1863, "count": 63 },
            { "startOffset": 1863, "endOffset": 1872, "count": 0 },
            { "startOffset": 1873, "endOffset": 1887, "count": 0 },
            { "startOffset": 1888, "endOffset": 1910, "count": 63 },
            { "startOffset": 1934, "endOffset": 3753, "count": 24 },
            { "startOffset": 2002, "endOffset": 2598, "count": 0 },
            { "startOffset": 2756, "endOffset": 2790, "count": 23 },
            { "startOffset": 2792, "endOffset": 2832, "count": 23 },
            { "startOffset": 2888, "endOffset": 2922, "count": 20 },
            { "startOffset": 2924, "endOffset": 2964, "count": 20 },
            { "startOffset": 3024, "endOffset": 3070, "count": 4 },
            { "startOffset": 3130, "endOffset": 3176, "count": 0 },
            { "startOffset": 3287, "endOffset": 3346, "count": 3 },
            { "startOffset": 3318, "endOffset": 3345, "count": 1 },
            { "startOffset": 3348, "endOffset": 3388, "count": 3 },
            { "startOffset": 3422, "endOffset": 3618, "count": 1 },
            { "startOffset": 3543, "endOffset": 3596, "count": 0 },
            { "startOffset": 3646, "endOffset": 3749, "count": 0 },
            { "startOffset": 3753, "endOffset": 3802, "count": 63 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "readPackage",
          "ranges": [{ "startOffset": 3871, "endOffset": 3961, "count": 1096 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "readPackageScope",
          "ranges": [
            { "startOffset": 4178, "endOffset": 4756, "count": 333 },
            { "startOffset": 4313, "endOffset": 4693, "count": 1032 },
            { "startOffset": 4514, "endOffset": 4541, "count": 0 },
            { "startOffset": 4612, "endOffset": 4689, "count": 333 },
            { "startOffset": 4693, "endOffset": 4755, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "66",
      "url": "node:internal/modules/esm/utils",
      "functions": [
        {
          "functionName": "getDefaultConditions",
          "ranges": [{ "startOffset": 926, "endOffset": 1032, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeDefaultConditions",
          "ranges": [
            { "startOffset": 1427, "endOffset": 1809, "count": 1 },
            { "startOffset": 1610, "endOffset": 1614, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "registerModule",
          "ranges": [
            { "startOffset": 3981, "endOffset": 4524, "count": 120 },
            { "startOffset": 4186, "endOffset": 4399, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeESM",
          "ranges": [{ "startOffset": 6352, "endOffset": 6728, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "isLoaderWorker",
          "ranges": [{ "startOffset": 6869, "endOffset": 6924, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "67",
      "url": "node:internal/process/pre_execution",
      "functions": [
        {
          "functionName": "prepareMainThreadExecution",
          "ranges": [{ "startOffset": 756, "endOffset": 940, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "prepareExecution",
          "ranges": [
            { "startOffset": 1143, "endOffset": 3296, "count": 1 },
            { "startOffset": 2063, "endOffset": 2167, "count": 0 },
            { "startOffset": 3055, "endOffset": 3217, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setupSymbolDisposePolyfill",
          "ranges": [{ "startOffset": 3298, "endOffset": 4033, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "setupUserModules",
          "ranges": [
            { "startOffset": 4035, "endOffset": 4463, "count": 1 },
            { "startOffset": 4344, "endOffset": 4361, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "refreshRuntimeOptions",
          "ranges": [{ "startOffset": 4465, "endOffset": 4521, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "patchProcessObject",
          "ranges": [
            { "startOffset": 4948, "endOffset": 7392, "count": 1 },
            { "startOffset": 6040, "endOffset": 6092, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "addReadOnlyProcessAlias",
          "ranges": [
            { "startOffset": 7394, "endOffset": 7675, "count": 13 },
            { "startOffset": 7515, "endOffset": 7673, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setupWarningHandler",
          "ranges": [
            { "startOffset": 7677, "endOffset": 8197, "count": 1 },
            { "startOffset": 8052, "endOffset": 8191, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 8081, "endOffset": 8183, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setupFetch",
          "ranges": [
            { "startOffset": 8233, "endOffset": 9384, "count": 1 },
            { "startOffset": 8364, "endOffset": 8381, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "lazyUndici",
          "ranges": [{ "startOffset": 8399, "endOffset": 8544, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fetch",
          "ranges": [{ "startOffset": 8548, "endOffset": 8643, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyInterface",
          "ranges": [{ "startOffset": 8695, "endOffset": 8936, "count": 4 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 8796, "endOffset": 8846, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 8854, "endOffset": 8924, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 9269, "endOffset": 9380, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setupWebCrypto",
          "ranges": [
            { "startOffset": 9490, "endOffset": 9940, "count": 1 },
            { "startOffset": 9651, "endOffset": 9938, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setupCodeCoverage",
          "ranges": [{ "startOffset": 9942, "endOffset": 10463, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "setupCustomEvent",
          "ranges": [
            { "startOffset": 10571, "endOffset": 10857, "count": 1 },
            { "startOffset": 10736, "endOffset": 10856, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setupStacktracePrinterOnSigint",
          "ranges": [
            { "startOffset": 10859, "endOffset": 11084, "count": 1 },
            { "startOffset": 10961, "endOffset": 11083, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeReport",
          "ranges": [{ "startOffset": 11086, "endOffset": 11335, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 11231, "endOffset": 11326, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setupDebugEnv",
          "ranges": [
            { "startOffset": 11337, "endOffset": 11568, "count": 1 },
            { "startOffset": 11488, "endOffset": 11566, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeReportSignalHandlers",
          "ranges": [
            { "startOffset": 11630, "endOffset": 11818, "count": 1 },
            { "startOffset": 11718, "endOffset": 11816, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeHeapSnapshotSignalHandlers",
          "ranges": [
            { "startOffset": 11820, "endOffset": 12401, "count": 1 },
            { "startOffset": 11955, "endOffset": 12399, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "doWriteHeapSnapshot",
          "ranges": [{ "startOffset": 12068, "endOffset": 12129, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 12321, "endOffset": 12393, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setupTraceCategoryState",
          "ranges": [{ "startOffset": 12403, "endOffset": 12662, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "setupPerfHooks",
          "ranges": [{ "startOffset": 12664, "endOffset": 12747, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "setupInspectorHooks",
          "ranges": [{ "startOffset": 12749, "endOffset": 13331, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeDeprecations",
          "ranges": [
            { "startOffset": 13526, "endOffset": 15478, "count": 1 },
            { "startOffset": 14238, "endOffset": 14540, "count": 16 },
            { "startOffset": 14283, "endOffset": 14515, "count": 0 },
            { "startOffset": 14857, "endOffset": 15054, "count": 0 },
            { "startOffset": 15082, "endOffset": 15476, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setupChildProcessIpcChannel",
          "ranges": [
            { "startOffset": 15480, "endOffset": 16045, "count": 1 },
            { "startOffset": 15556, "endOffset": 16043, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeClusterIPC",
          "ranges": [
            { "startOffset": 16047, "endOffset": 16317, "count": 1 },
            { "startOffset": 16134, "endOffset": 16315, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "readPolicyFromDisk",
          "ranges": [
            { "startOffset": 16319, "endOffset": 18138, "count": 1 },
            { "startOffset": 16447, "endOffset": 18136, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeCJSLoader",
          "ranges": [{ "startOffset": 18140, "endOffset": 18261, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeESMLoader",
          "ranges": [
            { "startOffset": 18263, "endOffset": 18838, "count": 1 },
            { "startOffset": 18591, "endOffset": 18836, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeSourceMapsHandlers",
          "ranges": [{ "startOffset": 18840, "endOffset": 19038, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "initializeFrozenIntrinsics",
          "ranges": [
            { "startOffset": 19040, "endOffset": 19297, "count": 1 },
            { "startOffset": 19125, "endOffset": 19295, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "loadPreloadModules",
          "ranges": [
            { "startOffset": 19299, "endOffset": 19647, "count": 1 },
            { "startOffset": 19493, "endOffset": 19645, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "markBootstrapComplete",
          "ranges": [{ "startOffset": 19649, "endOffset": 19743, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "68",
      "url": "node:internal/vm/module",
      "functions": [
        {
          "functionName": "importModuleDynamicallyWrap",
          "ranges": [
            { "startOffset": 11660, "endOffset": 12139, "count": 120 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "importModuleDynamicallyWrapper",
          "ranges": [{ "startOffset": 11765, "endOffset": 12095, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "70",
      "url": "node:internal/modules/run_main",
      "functions": [
        {
          "functionName": "resolveMainPath",
          "ranges": [
            { "startOffset": 256, "endOffset": 1415, "count": 1 },
            { "startOffset": 430, "endOffset": 534, "count": 0 },
            { "startOffset": 827, "endOffset": 838, "count": 0 },
            { "startOffset": 1065, "endOffset": 1389, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "shouldUseESMLoader",
          "ranges": [
            { "startOffset": 1576, "endOffset": 2864, "count": 1 },
            { "startOffset": 1682, "endOffset": 1698, "count": 0 },
            { "startOffset": 2172, "endOffset": 2194, "count": 0 },
            { "startOffset": 2338, "endOffset": 2360, "count": 0 },
            { "startOffset": 2475, "endOffset": 2491, "count": 0 },
            { "startOffset": 2554, "endOffset": 2571, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "executeUserEntryPoint",
          "ranges": [
            { "startOffset": 4261, "endOffset": 4659, "count": 1 },
            { "startOffset": 4441, "endOffset": 4484, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "71",
      "url": "node:internal/dns/utils",
      "functions": [
        {
          "functionName": "initializeDns",
          "ranges": [
            { "startOffset": 5443, "endOffset": 5829, "count": 1 },
            { "startOffset": 5586, "endOffset": 5696, "count": 0 },
            { "startOffset": 5744, "endOffset": 5828, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 5769, "endOffset": 5825, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "73",
      "url": "node:internal/bootstrap/switches/does_own_process_state",
      "functions": [
        {
          "functionName": "wrappedCwd",
          "ranges": [{ "startOffset": 3330, "endOffset": 3433, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "390",
      "url": "node:internal/main/run_main_module",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1182, "count": 1 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "391",
      "url": "file:///Users/markus/Code/pixoo-daemon/test/lib/mqtt-service.test.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 7431, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "createMockLogger",
          "ranges": [{ "startOffset": 279, "endOffset": 380, "count": 11 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "ok",
          "ranges": [{ "startOffset": 294, "endOffset": 302, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "info",
          "ranges": [{ "startOffset": 312, "endOffset": 320, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "warn",
          "ranges": [{ "startOffset": 330, "endOffset": 338, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "error",
          "ranges": [{ "startOffset": 349, "endOffset": 357, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "debug",
          "ranges": [{ "startOffset": 368, "endOffset": 376, "count": 10 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 407, "endOffset": 7428, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 441, "endOffset": 1496, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 501, "endOffset": 834, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 889, "endOffset": 1490, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1543, "endOffset": 3157, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1593, "endOffset": 1915, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "handler",
          "ranges": [{ "startOffset": 1716, "endOffset": 1730, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1963, "endOffset": 2438, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "sceneHandler",
          "ranges": [{ "startOffset": 2091, "endOffset": 2105, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "driverHandler",
          "ranges": [{ "startOffset": 2135, "endOffset": 2149, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2479, "endOffset": 2837, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "handler",
          "ranges": [{ "startOffset": 2602, "endOffset": 2616, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2899, "endOffset": 3151, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3020, "endOffset": 3094, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3192, "endOffset": 6322, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3254, "endOffset": 4199, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "testHandler",
          "ranges": [{ "startOffset": 3523, "endOffset": 3704, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4249, "endOffset": 4773, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "testHandler",
          "ranges": [{ "startOffset": 4422, "endOffset": 4493, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 4825, "endOffset": 6316, "count": 1 },
            { "startOffset": 5695, "endOffset": 5791, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "ok",
          "ranges": [{ "startOffset": 4897, "endOffset": 4949, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "info",
          "ranges": [{ "startOffset": 4965, "endOffset": 5019, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "warn",
          "ranges": [{ "startOffset": 5035, "endOffset": 5089, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "error",
          "ranges": [{ "startOffset": 5106, "endOffset": 5161, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "debug",
          "ranges": [{ "startOffset": 5178, "endOffset": 5233, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 5492, "endOffset": 5567, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 5862, "endOffset": 5888, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6007, "endOffset": 6039, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6356, "endOffset": 7424, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6406, "endOffset": 6656, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6704, "endOffset": 7209, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6844, "endOffset": 6858, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6901, "endOffset": 6915, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6957, "endOffset": 6971, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 7253, "endOffset": 7418, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "392",
      "url": "node:assert/strict",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 58, "count": 1 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "393",
      "url": "node:assert",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 31809, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyLoadComparison",
          "ranges": [{ "startOffset": 2693, "endOffset": 2877, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "escapeFn",
          "ranges": [{ "startOffset": 3458, "endOffset": 3506, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "innerFail",
          "ranges": [{ "startOffset": 4060, "endOffset": 4176, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fail",
          "ranges": [{ "startOffset": 4337, "endOffset": 5318, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "findColumn",
          "ranges": [{ "startOffset": 5434, "endOffset": 6374, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getCode",
          "ranges": [{ "startOffset": 6376, "endOffset": 8021, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "parseCode",
          "ranges": [{ "startOffset": 8023, "endOffset": 9440, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getErrMessage",
          "ranges": [{ "startOffset": 9442, "endOffset": 12536, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "innerOk",
          "ranges": [
            { "startOffset": 12538, "endOffset": 13146, "count": 11 },
            { "startOffset": 12599, "endOffset": 13144, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "ok",
          "ranges": [{ "startOffset": 13279, "endOffset": 13340, "count": 11 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "equal",
          "ranges": [{ "startOffset": 13599, "endOffset": 13971, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "notEqual",
          "ranges": [{ "startOffset": 14190, "endOffset": 14566, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "deepEqual",
          "ranges": [{ "startOffset": 14766, "endOffset": 15131, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "notDeepEqual",
          "ranges": [{ "startOffset": 15337, "endOffset": 15710, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "deepStrictEqual",
          "ranges": [
            { "startOffset": 15953, "endOffset": 16342, "count": 2 },
            { "startOffset": 16035, "endOffset": 16094, "count": 0 },
            { "startOffset": 16128, "endOffset": 16149, "count": 1 },
            { "startOffset": 16194, "endOffset": 16340, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "notDeepStrictEqual",
          "ranges": [{ "startOffset": 16591, "endOffset": 16988, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "strictEqual",
          "ranges": [
            { "startOffset": 17193, "endOffset": 17506, "count": 18 },
            { "startOffset": 17271, "endOffset": 17330, "count": 0 },
            { "startOffset": 17366, "endOffset": 17504, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "notStrictEqual",
          "ranges": [{ "startOffset": 17718, "endOffset": 18039, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Comparison",
          "ranges": [{ "startOffset": 18063, "endOffset": 18445, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "compareExceptionKey",
          "ranges": [{ "startOffset": 18449, "endOffset": 19168, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "expectedException",
          "ranges": [
            { "startOffset": 19170, "endOffset": 22574, "count": 1 },
            { "startOffset": 19498, "endOffset": 20875, "count": 0 },
            { "startOffset": 20996, "endOffset": 22572, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getActual",
          "ranges": [
            { "startOffset": 22576, "endOffset": 22716, "count": 1 },
            { "startOffset": 22682, "endOffset": 22715, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "checkIsPromise",
          "ranges": [{ "startOffset": 22718, "endOffset": 23082, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "waitForActual",
          "ranges": [{ "startOffset": 23084, "endOffset": 23798, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "expectsError",
          "ranges": [
            { "startOffset": 23800, "endOffset": 25417, "count": 1 },
            { "startOffset": 23895, "endOffset": 24595, "count": 0 },
            { "startOffset": 24661, "endOffset": 24704, "count": 0 },
            { "startOffset": 24706, "endOffset": 24876, "count": 0 },
            { "startOffset": 24918, "endOffset": 25328, "count": 0 },
            { "startOffset": 25348, "endOffset": 25355, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "hasMatchingError",
          "ranges": [{ "startOffset": 25419, "endOffset": 26037, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "expectsNoError",
          "ranges": [{ "startOffset": 26039, "endOffset": 26690, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "throws",
          "ranges": [{ "startOffset": 26848, "endOffset": 26942, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "rejects",
          "ranges": [{ "startOffset": 27121, "endOffset": 27233, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "doesNotThrow",
          "ranges": [{ "startOffset": 27395, "endOffset": 27489, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "doesNotReject",
          "ranges": [{ "startOffset": 27655, "endOffset": 27767, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ifError",
          "ranges": [{ "startOffset": 27895, "endOffset": 29684, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "internalMatch",
          "ranges": [{ "startOffset": 29687, "endOffset": 30770, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "match",
          "ranges": [{ "startOffset": 30966, "endOffset": 31058, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "doesNotMatch",
          "ranges": [{ "startOffset": 31266, "endOffset": 31372, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "strict",
          "ranges": [{ "startOffset": 31504, "endOffset": 31573, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "394",
      "url": "node:internal/assert/assertion_error",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 17119, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "copyError",
          "ranges": [{ "startOffset": 1465, "endOffset": 1758, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "inspectValue",
          "ranges": [{ "startOffset": 1760, "endOffset": 2368, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createErrDiff",
          "ranges": [{ "startOffset": 2370, "endOffset": 11106, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "addEllipsis",
          "ranges": [{ "startOffset": 11108, "endOffset": 11411, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "AssertionError",
          "ranges": [{ "startOffset": 11452, "endOffset": 16148, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toString",
          "ranges": [{ "startOffset": 16152, "endOffset": 16227, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 16231, "endOffset": 17082, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "395",
      "url": "node:internal/util/colors",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1122, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyInternalTTY",
          "ranges": [{ "startOffset": 32, "endOffset": 127, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "shouldColorize",
          "ranges": [
            { "startOffset": 244, "endOffset": 504, "count": 1 },
            { "startOffset": 375, "endOffset": 400, "count": 0 },
            { "startOffset": 401, "endOffset": 499, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "refresh",
          "ranges": [
            { "startOffset": 508, "endOffset": 1090, "count": 1 },
            { "startOffset": 550, "endOffset": 1086, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "396",
      "url": "node:net",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 64869, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1585, "endOffset": 1610, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "noop",
          "ranges": [{ "startOffset": 4091, "endOffset": 4099, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyChannels",
          "ranges": [{ "startOffset": 4234, "endOffset": 4790, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getFlags",
          "ranges": [{ "startOffset": 4950, "endOffset": 5044, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createHandle",
          "ranges": [
            { "startOffset": 5046, "endOffset": 5429, "count": 2 },
            { "startOffset": 5213, "endOffset": 5235, "count": 0 },
            { "startOffset": 5270, "endOffset": 5428, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getNewAsyncId",
          "ranges": [
            { "startOffset": 5432, "endOffset": 5570, "count": 2 },
            { "startOffset": 5527, "endOffset": 5545, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isPipeName",
          "ranges": [{ "startOffset": 5573, "endOffset": 5656, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createServer",
          "ranges": [{ "startOffset": 5857, "endOffset": 5961, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "connect",
          "ranges": [{ "startOffset": 6184, "endOffset": 6602, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getDefaultAutoSelectFamily",
          "ranges": [{ "startOffset": 6604, "endOffset": 6679, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setDefaultAutoSelectFamily",
          "ranges": [{ "startOffset": 6681, "endOffset": 6797, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getDefaultAutoSelectFamilyAttemptTimeout",
          "ranges": [{ "startOffset": 6799, "endOffset": 6902, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setDefaultAutoSelectFamilyAttemptTimeout",
          "ranges": [{ "startOffset": 6904, "endOffset": 7091, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "normalizeArgs",
          "ranges": [{ "startOffset": 7585, "endOffset": 8311, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "initSocketHandle",
          "ranges": [
            { "startOffset": 8383, "endOffset": 8986, "count": 2 },
            { "startOffset": 8739, "endOffset": 8980, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "closeSocketHandle",
          "ranges": [{ "startOffset": 8988, "endOffset": 9328, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket",
          "ranges": [
            { "startOffset": 9580, "endOffset": 14123, "count": 2 },
            { "startOffset": 9640, "endOffset": 9667, "count": 0 },
            { "startOffset": 9695, "endOffset": 9824, "count": 0 },
            { "startOffset": 9894, "endOffset": 10142, "count": 0 },
            { "startOffset": 10204, "endOffset": 10400, "count": 0 },
            { "startOffset": 10962, "endOffset": 10988, "count": 0 },
            { "startOffset": 11394, "endOffset": 11502, "count": 0 },
            { "startOffset": 12030, "endOffset": 12064, "count": 0 },
            { "startOffset": 12140, "endOffset": 12151, "count": 1 },
            { "startOffset": 12209, "endOffset": 12738, "count": 0 },
            { "startOffset": 12829, "endOffset": 12906, "count": 0 },
            { "startOffset": 12907, "endOffset": 12953, "count": 0 },
            { "startOffset": 12955, "endOffset": 13170, "count": 0 },
            { "startOffset": 13705, "endOffset": 13970, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "_unrefTimer",
          "ranges": [
            { "startOffset": 14296, "endOffset": 14426, "count": 82 },
            { "startOffset": 14398, "endOffset": 14420, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Socket._final",
          "ranges": [{ "startOffset": 14546, "endOffset": 15162, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "afterShutdown",
          "ranges": [{ "startOffset": 15165, "endOffset": 15311, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeAfterFIN",
          "ranges": [{ "startOffset": 15518, "endOffset": 16026, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket._onTimeout",
          "ranges": [{ "startOffset": 16108, "endOffset": 16612, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.setNoDelay",
          "ranges": [{ "startOffset": 16646, "endOffset": 17023, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.setKeepAlive",
          "ranges": [{ "startOffset": 17059, "endOffset": 17665, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.address",
          "ranges": [{ "startOffset": 17696, "endOffset": 17740, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 17826, "endOffset": 17870, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 17950, "endOffset": 18006, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 18117, "endOffset": 18432, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 18521, "endOffset": 18601, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 18689, "endOffset": 18734, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "tryReadStart",
          "ranges": [{ "startOffset": 18742, "endOffset": 18988, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket._read",
          "ranges": [{ "startOffset": 19080, "endOffset": 19399, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.end",
          "ranges": [{ "startOffset": 19426, "endOffset": 19613, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.resetAndDestroy",
          "ranges": [{ "startOffset": 19651, "endOffset": 20001, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.pause",
          "ranges": [{ "startOffset": 20029, "endOffset": 20363, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.resume",
          "ranges": [{ "startOffset": 20393, "endOffset": 20577, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.read",
          "ranges": [{ "startOffset": 20605, "endOffset": 20791, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onReadableStreamEnd",
          "ranges": [{ "startOffset": 20838, "endOffset": 20937, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.destroySoon",
          "ranges": [{ "startOffset": 20971, "endOffset": 21118, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket._destroy",
          "ranges": [{ "startOffset": 21150, "endOffset": 22660, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket._reset",
          "ranges": [{ "startOffset": 22689, "endOffset": 22788, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket._getpeername",
          "ranges": [{ "startOffset": 22823, "endOffset": 23120, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "protoGetter",
          "ranges": [{ "startOffset": 23123, "endOffset": 23305, "count": 9 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "bytesRead",
          "ranges": [{ "startOffset": 23332, "endOffset": 23423, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "remoteAddress",
          "ranges": [{ "startOffset": 23456, "endOffset": 23522, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "remoteFamily",
          "ranges": [{ "startOffset": 23554, "endOffset": 23618, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "remotePort",
          "ranges": [{ "startOffset": 23648, "endOffset": 23708, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket._getsockname",
          "ranges": [{ "startOffset": 23745, "endOffset": 24021, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "localAddress",
          "ranges": [{ "startOffset": 24053, "endOffset": 24118, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "localPort",
          "ranges": [{ "startOffset": 24148, "endOffset": 24207, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "localFamily",
          "ranges": [{ "startOffset": 24238, "endOffset": 24301, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.<computed>",
          "ranges": [{ "startOffset": 24342, "endOffset": 24389, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket._writeGeneric",
          "ranges": [
            { "startOffset": 24425, "endOffset": 25337, "count": 82 },
            { "startOffset": 24647, "endOffset": 24991, "count": 0 },
            { "startOffset": 25072, "endOffset": 25128, "count": 0 },
            { "startOffset": 25182, "endOffset": 25218, "count": 0 },
            { "startOffset": 25297, "endOffset": 25335, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "connect",
          "ranges": [{ "startOffset": 24742, "endOffset": 24856, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onClose",
          "ranges": [{ "startOffset": 24863, "endOffset": 24942, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket._writev",
          "ranges": [{ "startOffset": 25368, "endOffset": 25436, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket._write",
          "ranges": [{ "startOffset": 25466, "endOffset": 25547, "count": 82 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_bytesDispatched",
          "ranges": [{ "startOffset": 25740, "endOffset": 25844, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "bytesWritten",
          "ranges": [{ "startOffset": 25876, "endOffset": 26805, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "checkBindError",
          "ranges": [{ "startOffset": 26810, "endOffset": 27609, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "internalConnect",
          "ranges": [{ "startOffset": 27612, "endOffset": 29607, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "internalConnectMultiple",
          "ranges": [{ "startOffset": 29610, "endOffset": 32090, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.connect",
          "ranges": [{ "startOffset": 32119, "endOffset": 33570, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reinitializeHandle",
          "ranges": [{ "startOffset": 33613, "endOffset": 33767, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "socketToDnsFamily",
          "ranges": [{ "startOffset": 33770, "endOffset": 33916, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lookupAndConnect",
          "ranges": [{ "startOffset": 33918, "endOffset": 37827, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lookupAndConnectMultiple",
          "ranges": [{ "startOffset": 37829, "endOffset": 40914, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "connectErrorNT",
          "ranges": [{ "startOffset": 40916, "endOffset": 40975, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.ref",
          "ranges": [{ "startOffset": 41001, "endOffset": 41188, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.unref",
          "ranges": [{ "startOffset": 41217, "endOffset": 41410, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "afterConnect",
          "ranges": [{ "startOffset": 41414, "endOffset": 42995, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "afterConnectMultiple",
          "ranges": [{ "startOffset": 42997, "endOffset": 44884, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "internalConnectMultipleTimeout",
          "ranges": [{ "startOffset": 44886, "endOffset": 45118, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "addAbortSignalOption",
          "ranges": [{ "startOffset": 45120, "endOffset": 45560, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Server",
          "ranges": [{ "startOffset": 45562, "endOffset": 47149, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toNumber",
          "ranges": [{ "startOffset": 47260, "endOffset": 47325, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createServerHandle",
          "ranges": [{ "startOffset": 47393, "endOffset": 48845, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setupListenHandle",
          "ranges": [{ "startOffset": 48847, "endOffset": 51198, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitErrorNT",
          "ranges": [{ "startOffset": 51265, "endOffset": 51327, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitListeningNT",
          "ranges": [{ "startOffset": 51330, "endOffset": 51445, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "listenInCluster",
          "ranges": [{ "startOffset": 51448, "endOffset": 52708, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Server.listen",
          "ranges": [{ "startOffset": 52737, "endOffset": 56563, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lookupAndListen",
          "ranges": [{ "startOffset": 56566, "endOffset": 56978, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 57060, "endOffset": 57103, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Server.address",
          "ranges": [{ "startOffset": 57179, "endOffset": 57468, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onconnection",
          "ranges": [{ "startOffset": 57471, "endOffset": 59426, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Server.getConnections",
          "ranges": [{ "startOffset": 59575, "endOffset": 60328, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Server.close",
          "ranges": [{ "startOffset": 60357, "endOffset": 61224, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Server.<computed>",
          "ranges": [{ "startOffset": 61266, "endOffset": 61386, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Server._emitCloseIfDrained",
          "ranges": [{ "startOffset": 61428, "endOffset": 61814, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitCloseNT",
          "ranges": [{ "startOffset": 61818, "endOffset": 61901, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Server.<computed>",
          "ranges": [{ "startOffset": 61960, "endOffset": 62122, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 62344, "endOffset": 62380, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 62384, "endOffset": 62425, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 62505, "endOffset": 62536, "count": 98 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 62540, "endOffset": 62576, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Server._setupWorker",
          "ranges": [{ "startOffset": 62615, "endOffset": 62856, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Server.ref",
          "ranges": [{ "startOffset": 62882, "endOffset": 62980, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Server.unref",
          "ranges": [{ "startOffset": 63008, "endOffset": 63107, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_setSimultaneousAccepts",
          "ranges": [{ "startOffset": 63249, "endOffset": 63918, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_setSimultaneousAccepts",
          "ranges": [{ "startOffset": 63957, "endOffset": 64198, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get BlockList",
          "ranges": [{ "startOffset": 64327, "endOffset": 64429, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get SocketAddress",
          "ranges": [{ "startOffset": 64433, "endOffset": 64555, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "397",
      "url": "node:stream",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 4784, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fn",
          "ranges": [{ "startOffset": 2402, "endOffset": 2558, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fn",
          "ranges": [{ "startOffset": 2983, "endOffset": 3117, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 4105, "endOffset": 4137, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 4235, "endOffset": 4276, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 4369, "endOffset": 4410, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_uint8ArrayToBuffer",
          "ranges": [{ "startOffset": 4575, "endOffset": 4782, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "398",
      "url": "node:internal/streams/operators",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 10772, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "compose",
          "ranges": [{ "startOffset": 1019, "endOffset": 1599, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "map",
          "ranges": [{ "startOffset": 1601, "endOffset": 4704, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "asIndexedPairs",
          "ranges": [{ "startOffset": 4706, "endOffset": 5179, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "some",
          "ranges": [{ "startOffset": 5181, "endOffset": 5329, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "every",
          "ranges": [{ "startOffset": 5331, "endOffset": 5659, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "find",
          "ranges": [{ "startOffset": 5661, "endOffset": 5803, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "forEach",
          "ranges": [{ "startOffset": 5805, "endOffset": 6175, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "filter",
          "ranges": [{ "startOffset": 6177, "endOffset": 6504, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReduceAwareErrMissingArgs",
          "ranges": [{ "startOffset": 6720, "endOffset": 6834, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reduce",
          "ranges": [{ "startOffset": 6838, "endOffset": 8280, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toArray",
          "ranges": [{ "startOffset": 8282, "endOffset": 8711, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "flatMap",
          "ranges": [{ "startOffset": 8713, "endOffset": 8907, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toIntegerOrInfinity",
          "ranges": [{ "startOffset": 8909, "endOffset": 9231, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "drop",
          "ranges": [{ "startOffset": 9233, "endOffset": 9781, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "take",
          "ranges": [{ "startOffset": 9783, "endOffset": 10453, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "399",
      "url": "node:internal/abort_controller",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 12781, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyMessageChannel",
          "ranges": [{ "startOffset": 1574, "endOffset": 1707, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyMakeTransferable",
          "ranges": [{ "startOffset": 1709, "endOffset": 1867, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "customInspect",
          "ranges": [{ "startOffset": 2337, "endOffset": 2596, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateThisAbortSignal",
          "ranges": [
            { "startOffset": 2598, "endOffset": 2723, "count": 129 },
            { "startOffset": 2679, "endOffset": 2721, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setWeakAbortSignalTimeout",
          "ranges": [{ "startOffset": 3305, "endOffset": 3705, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "AbortSignal",
          "ranges": [{ "startOffset": 3749, "endOffset": 3809, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get aborted",
          "ranges": [{ "startOffset": 3846, "endOffset": 3929, "count": 129 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get reason",
          "ranges": [{ "startOffset": 3962, "endOffset": 4041, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "throwIfAborted",
          "ranges": [{ "startOffset": 4045, "endOffset": 4161, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4165, "endOffset": 4294, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "abort",
          "ranges": [{ "startOffset": 4372, "endOffset": 4516, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "timeout",
          "ranges": [{ "startOffset": 4594, "endOffset": 4856, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "any",
          "ranges": [{ "startOffset": 4943, "endOffset": 6278, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 6282, "endOffset": 7050, "count": 17 },
            { "startOffset": 6511, "endOffset": 6540, "count": 0 },
            { "startOffset": 6586, "endOffset": 6613, "count": 0 },
            { "startOffset": 6614, "endOffset": 6638, "count": 0 },
            { "startOffset": 6639, "endOffset": 6655, "count": 0 },
            { "startOffset": 6656, "endOffset": 6677, "count": 0 },
            { "startOffset": 6679, "endOffset": 7046, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 7054, "endOffset": 7408, "count": 17 },
            { "startOffset": 7247, "endOffset": 7276, "count": 0 },
            { "startOffset": 7322, "endOffset": 7341, "count": 0 },
            { "startOffset": 7342, "endOffset": 7355, "count": 0 },
            { "startOffset": 7357, "endOffset": 7404, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 7412, "endOffset": 8019, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 8023, "endOffset": 8275, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 8279, "endOffset": 8727, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ClonedAbortSignal",
          "ranges": [{ "startOffset": 8731, "endOffset": 8815, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ClonedAbortSignal.<computed>",
          "ranges": [{ "startOffset": 8860, "endOffset": 8869, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createAbortSignal",
          "ranges": [
            { "startOffset": 9347, "endOffset": 9760, "count": 20 },
            { "startOffset": 9718, "endOffset": 9748, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "abortSignal",
          "ranges": [
            { "startOffset": 9762, "endOffset": 10124, "count": 13 },
            { "startOffset": 9825, "endOffset": 9832, "count": 0 },
            { "startOffset": 10014, "endOffset": 10023, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 10024, "endOffset": 10120, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateAbortController",
          "ranges": [
            { "startOffset": 10301, "endOffset": 10429, "count": 33 },
            { "startOffset": 10381, "endOffset": 10427, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "AbortController",
          "ranges": [{ "startOffset": 10457, "endOffset": 10517, "count": 20 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get signal",
          "ranges": [{ "startOffset": 10558, "endOffset": 10637, "count": 20 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "abort",
          "ranges": [{ "startOffset": 10680, "endOffset": 10837, "count": 13 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 10841, "endOffset": 10968, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 10979, "endOffset": 11147, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "transferableAbortSignal",
          "ranges": [{ "startOffset": 11297, "endOffset": 11489, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "transferableAbortController",
          "ranges": [{ "startOffset": 11561, "endOffset": 11650, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "aborted",
          "ranges": [{ "startOffset": 11744, "endOffset": 12332, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "400",
      "url": "node:internal/streams/end-of-stream",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 8360, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isRequest",
          "ranges": [
            { "startOffset": 891, "endOffset": 986, "count": 4 },
            { "startOffset": 946, "endOffset": 983, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "nop",
          "ranges": [{ "startOffset": 1000, "endOffset": 1008, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eos",
          "ranges": [
            { "startOffset": 1011, "endOffset": 6953, "count": 4 },
            { "startOffset": 1083, "endOffset": 1140, "count": 0 },
            { "startOffset": 1167, "endOffset": 1200, "count": 0 },
            { "startOffset": 1442, "endOffset": 1493, "count": 0 },
            { "startOffset": 1524, "endOffset": 1631, "count": 0 },
            { "startOffset": 1669, "endOffset": 1700, "count": 0 },
            { "startOffset": 1738, "endOffset": 1769, "count": 0 },
            { "startOffset": 2208, "endOffset": 2256, "count": 2 },
            { "startOffset": 4409, "endOffset": 4617, "count": 0 },
            { "startOffset": 4636, "endOffset": 4646, "count": 2 },
            { "startOffset": 4648, "endOffset": 4749, "count": 0 },
            { "startOffset": 4828, "endOffset": 4866, "count": 2 },
            { "startOffset": 4868, "endOffset": 4908, "count": 0 },
            { "startOffset": 5086, "endOffset": 5122, "count": 0 },
            { "startOffset": 5138, "endOffset": 5152, "count": 2 },
            { "startOffset": 5178, "endOffset": 5249, "count": 0 },
            { "startOffset": 5274, "endOffset": 5319, "count": 2 },
            { "startOffset": 5297, "endOffset": 5318, "count": 0 },
            { "startOffset": 5320, "endOffset": 5377, "count": 2 },
            { "startOffset": 5382, "endOffset": 5419, "count": 0 },
            { "startOffset": 5444, "endOffset": 5489, "count": 2 },
            { "startOffset": 5490, "endOffset": 5547, "count": 0 },
            { "startOffset": 5552, "endOffset": 5589, "count": 0 },
            { "startOffset": 5621, "endOffset": 5638, "count": 0 },
            { "startOffset": 5641, "endOffset": 5678, "count": 0 },
            { "startOffset": 6290, "endOffset": 6300, "count": 0 },
            { "startOffset": 6302, "endOffset": 6932, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onlegacyfinish",
          "ranges": [{ "startOffset": 1878, "endOffset": 1941, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onfinish",
          "ranges": [
            { "startOffset": 2342, "endOffset": 2762, "count": 2 },
            { "startOffset": 2565, "endOffset": 2601, "count": 0 },
            { "startOffset": 2625, "endOffset": 2658, "count": 0 },
            { "startOffset": 2660, "endOffset": 2681, "count": 0 },
            { "startOffset": 2701, "endOffset": 2720, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onend",
          "ranges": [
            { "startOffset": 2841, "endOffset": 3261, "count": 4 },
            { "startOffset": 3064, "endOffset": 3100, "count": 0 },
            { "startOffset": 3124, "endOffset": 3157, "count": 2 },
            { "startOffset": 3145, "endOffset": 3156, "count": 0 },
            { "startOffset": 3159, "endOffset": 3219, "count": 2 },
            { "startOffset": 3221, "endOffset": 3257, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onerror",
          "ranges": [{ "startOffset": 3282, "endOffset": 3328, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onclose",
          "ranges": [
            { "startOffset": 3383, "endOffset": 4048, "count": 2 },
            { "startOffset": 3504, "endOffset": 3535, "count": 0 },
            { "startOffset": 3537, "endOffset": 3589, "count": 0 },
            { "startOffset": 3629, "endOffset": 3666, "count": 0 },
            { "startOffset": 3668, "endOffset": 3822, "count": 0 },
            { "startOffset": 3840, "endOffset": 3860, "count": 0 },
            { "startOffset": 3862, "endOffset": 4016, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onclosed",
          "ranges": [{ "startOffset": 4070, "endOffset": 4308, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onrequest",
          "ranges": [{ "startOffset": 4331, "endOffset": 4381, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "cleanup",
          "ranges": [
            { "startOffset": 5698, "endOffset": 6266, "count": 2 },
            { "startOffset": 5936, "endOffset": 5982, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "abort",
          "ranges": [{ "startOffset": 6322, "endOffset": 6543, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6815, "endOffset": 6920, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eosWeb",
          "ranges": [{ "startOffset": 6955, "endOffset": 7840, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "finished",
          "ranges": [{ "startOffset": 7842, "endOffset": 8300, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "401",
      "url": "node:internal/streams/utils",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 8416, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isReadableNodeStream",
          "ranges": [
            { "startOffset": 774, "endOffset": 1191, "count": 25 },
            { "startOffset": 886, "endOffset": 921, "count": 24 },
            { "startOffset": 922, "endOffset": 1029, "count": 24 },
            { "startOffset": 945, "endOffset": 1023, "count": 0 },
            { "startOffset": 1030, "endOffset": 1100, "count": 24 },
            { "startOffset": 1058, "endOffset": 1099, "count": 12 },
            { "startOffset": 1101, "endOffset": 1161, "count": 24 },
            { "startOffset": 1139, "endOffset": 1160, "count": 12 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isWritableNodeStream",
          "ranges": [
            { "startOffset": 1193, "endOffset": 1413, "count": 13 },
            { "startOffset": 1290, "endOffset": 1325, "count": 8 },
            { "startOffset": 1326, "endOffset": 1396, "count": 8 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isDuplexNodeStream",
          "ranges": [
            { "startOffset": 1415, "endOffset": 1614, "count": 1 },
            { "startOffset": 1510, "endOffset": 1531, "count": 0 },
            { "startOffset": 1533, "endOffset": 1568, "count": 0 },
            { "startOffset": 1569, "endOffset": 1607, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isNodeStream",
          "ranges": [
            { "startOffset": 1616, "endOffset": 1887, "count": 47 },
            { "startOffset": 1698, "endOffset": 1725, "count": 3 },
            { "startOffset": 1726, "endOffset": 1800, "count": 3 },
            { "startOffset": 1768, "endOffset": 1799, "count": 0 },
            { "startOffset": 1801, "endOffset": 1874, "count": 3 },
            { "startOffset": 1842, "endOffset": 1873, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isReadableStream",
          "ranges": [
            { "startOffset": 1889, "endOffset": 2103, "count": 5 },
            { "startOffset": 1969, "endOffset": 2013, "count": 1 },
            { "startOffset": 2014, "endOffset": 2056, "count": 0 },
            { "startOffset": 2057, "endOffset": 2096, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isWritableStream",
          "ranges": [
            { "startOffset": 2105, "endOffset": 2273, "count": 6 },
            { "startOffset": 2185, "endOffset": 2227, "count": 1 },
            { "startOffset": 2228, "endOffset": 2266, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isTransformStream",
          "ranges": [
            { "startOffset": 2275, "endOffset": 2442, "count": 1 },
            { "startOffset": 2356, "endOffset": 2395, "count": 0 },
            { "startOffset": 2396, "endOffset": 2435, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isWebStream",
          "ranges": [{ "startOffset": 2444, "endOffset": 2556, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isIterable",
          "ranges": [
            { "startOffset": 2558, "endOffset": 2888, "count": 2 },
            { "startOffset": 2613, "endOffset": 2626, "count": 0 },
            { "startOffset": 2651, "endOffset": 2705, "count": 0 },
            { "startOffset": 2731, "endOffset": 2780, "count": 0 },
            { "startOffset": 2837, "endOffset": 2885, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isDestroyed",
          "ranges": [
            { "startOffset": 2890, "endOffset": 3153, "count": 11 },
            { "startOffset": 2950, "endOffset": 2962, "count": 0 },
            { "startOffset": 3066, "endOffset": 3075, "count": 3 },
            { "startOffset": 3106, "endOffset": 3129, "count": 10 },
            { "startOffset": 3130, "endOffset": 3149, "count": 10 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isWritableEnded",
          "ranges": [
            { "startOffset": 3177, "endOffset": 3468, "count": 3 },
            { "startOffset": 3249, "endOffset": 3261, "count": 0 },
            { "startOffset": 3299, "endOffset": 3311, "count": 0 },
            { "startOffset": 3375, "endOffset": 3388, "count": 0 },
            { "startOffset": 3431, "endOffset": 3443, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isWritableFinished",
          "ranges": [
            { "startOffset": 3496, "endOffset": 3893, "count": 4 },
            { "startOffset": 3579, "endOffset": 3632, "count": 2 },
            { "startOffset": 3632, "endOffset": 3644, "count": 0 },
            { "startOffset": 3644, "endOffset": 3706, "count": 2 },
            { "startOffset": 3708, "endOffset": 3721, "count": 0 },
            { "startOffset": 3721, "endOffset": 3751, "count": 2 },
            { "startOffset": 3767, "endOffset": 3779, "count": 0 },
            { "startOffset": 3779, "endOffset": 3886, "count": 2 },
            { "startOffset": 3863, "endOffset": 3885, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isReadableEnded",
          "ranges": [{ "startOffset": 3922, "endOffset": 4223, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isReadableFinished",
          "ranges": [
            { "startOffset": 4248, "endOffset": 4596, "count": 12 },
            { "startOffset": 4331, "endOffset": 4343, "count": 0 },
            { "startOffset": 4407, "endOffset": 4420, "count": 0 },
            { "startOffset": 4468, "endOffset": 4480, "count": 0 },
            { "startOffset": 4541, "endOffset": 4565, "count": 4 },
            { "startOffset": 4566, "endOffset": 4588, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isReadable",
          "ranges": [
            { "startOffset": 4598, "endOffset": 4898, "count": 7 },
            { "startOffset": 4673, "endOffset": 4700, "count": 0 },
            { "startOffset": 4746, "endOffset": 4758, "count": 0 },
            { "startOffset": 4786, "endOffset": 4799, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isWritable",
          "ranges": [
            { "startOffset": 4900, "endOffset": 5197, "count": 6 },
            { "startOffset": 4975, "endOffset": 5002, "count": 0 },
            { "startOffset": 5048, "endOffset": 5088, "count": 3 },
            { "startOffset": 5088, "endOffset": 5101, "count": 0 },
            { "startOffset": 5101, "endOffset": 5162, "count": 3 },
            { "startOffset": 5163, "endOffset": 5194, "count": 3 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isFinished",
          "ranges": [{ "startOffset": 5199, "endOffset": 5513, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isWritableErrored",
          "ranges": [
            { "startOffset": 5515, "endOffset": 5727, "count": 2 },
            { "startOffset": 5581, "endOffset": 5603, "count": 0 },
            { "startOffset": 5635, "endOffset": 5675, "count": 0 },
            { "startOffset": 5707, "endOffset": 5716, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isReadableErrored",
          "ranges": [
            { "startOffset": 5729, "endOffset": 5941, "count": 2 },
            { "startOffset": 5795, "endOffset": 5817, "count": 0 },
            { "startOffset": 5849, "endOffset": 5889, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isClosed",
          "ranges": [
            { "startOffset": 5943, "endOffset": 6448, "count": 4 },
            { "startOffset": 6000, "endOffset": 6022, "count": 0 },
            { "startOffset": 6097, "endOffset": 6212, "count": 0 },
            { "startOffset": 6227, "endOffset": 6269, "count": 0 },
            { "startOffset": 6274, "endOffset": 6396, "count": 0 },
            { "startOffset": 6398, "endOffset": 6447, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isOutgoingMessage",
          "ranges": [{ "startOffset": 6450, "endOffset": 6702, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isServerResponse",
          "ranges": [{ "startOffset": 6704, "endOffset": 6831, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isServerRequest",
          "ranges": [{ "startOffset": 6833, "endOffset": 7021, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "willEmitClose",
          "ranges": [
            { "startOffset": 7023, "endOffset": 7361, "count": 4 },
            { "startOffset": 7085, "endOffset": 7097, "count": 0 },
            { "startOffset": 7202, "endOffset": 7211, "count": 2 },
            { "startOffset": 7231, "endOffset": 7258, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isDisturbed",
          "ranges": [{ "startOffset": 7363, "endOffset": 7508, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isErrored",
          "ranges": [{ "startOffset": 7510, "endOffset": 7815, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "402",
      "url": "node:internal/streams/compose",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 5451, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "compose",
          "ranges": [
            { "startOffset": 543, "endOffset": 5449, "count": 1 },
            { "startOffset": 602, "endOffset": 650, "count": 0 },
            { "startOffset": 680, "endOffset": 721, "count": 0 },
            { "startOffset": 799, "endOffset": 846, "count": 0 },
            { "startOffset": 1037, "endOffset": 1778, "count": 2 },
            { "startOffset": 1073, "endOffset": 1100, "count": 0 },
            { "startOffset": 1102, "endOffset": 1175, "count": 0 },
            { "startOffset": 1214, "endOffset": 1345, "count": 1 },
            { "startOffset": 1257, "endOffset": 1296, "count": 0 },
            { "startOffset": 1297, "endOffset": 1337, "count": 0 },
            { "startOffset": 1352, "endOffset": 1483, "count": 0 },
            { "startOffset": 1505, "endOffset": 1636, "count": 1 },
            { "startOffset": 1548, "endOffset": 1587, "count": 0 },
            { "startOffset": 1588, "endOffset": 1628, "count": 0 },
            { "startOffset": 1643, "endOffset": 1774, "count": 0 },
            { "startOffset": 2300, "endOffset": 2329, "count": 0 },
            { "startOffset": 2330, "endOffset": 2360, "count": 0 },
            { "startOffset": 2720, "endOffset": 4018, "count": 0 },
            { "startOffset": 4569, "endOffset": 5081, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onfinished",
          "ranges": [
            { "startOffset": 1856, "endOffset": 2070, "count": 1 },
            { "startOffset": 1962, "endOffset": 2066, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "d._write",
          "ranges": [{ "startOffset": 2769, "endOffset": 2936, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "d._final",
          "ranges": [{ "startOffset": 2956, "endOffset": 3033, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3059, "endOffset": 3184, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "d._write",
          "ranges": [{ "startOffset": 3355, "endOffset": 3578, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "d._final",
          "ranges": [{ "startOffset": 3598, "endOffset": 3808, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3901, "endOffset": 4012, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4094, "endOffset": 4228, "count": 83 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4253, "endOffset": 4295, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "d._read",
          "ranges": [
            { "startOffset": 4315, "endOffset": 4562, "count": 166 },
            { "startOffset": 4349, "endOffset": 4554, "count": 248 },
            { "startOffset": 4414, "endOffset": 4481, "count": 166 },
            { "startOffset": 4481, "endOffset": 4511, "count": 82 },
            { "startOffset": 4511, "endOffset": 4544, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "d._read",
          "ranges": [{ "startOffset": 4730, "endOffset": 5074, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "d._destroy",
          "ranges": [
            { "startOffset": 5102, "endOffset": 5433, "count": 1 },
            { "startOffset": 5292, "endOffset": 5320, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "403",
      "url": "node:internal/streams/pipeline",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 12326, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "destroyer",
          "ranges": [{ "startOffset": 1058, "endOffset": 1487, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1150, "endOffset": 1182, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1258, "endOffset": 1293, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "destroy",
          "ranges": [
            { "startOffset": 1321, "endOffset": 1466, "count": 2 },
            { "startOffset": 1359, "endOffset": 1458, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "popCallback",
          "ranges": [{ "startOffset": 1489, "endOffset": 1817, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "makeAsyncIterable",
          "ranges": [{ "startOffset": 1819, "endOffset": 2105, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fromReadable",
          "ranges": [{ "startOffset": 2107, "endOffset": 2281, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pumpToNode",
          "ranges": [{ "startOffset": 2283, "endOffset": 3327, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pumpToWeb",
          "ranges": [{ "startOffset": 3329, "endOffset": 3927, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pipeline",
          "ranges": [{ "startOffset": 3929, "endOffset": 4022, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "pipelineImpl",
          "ranges": [
            { "startOffset": 4024, "endOffset": 10476, "count": 1 },
            { "startOffset": 4188, "endOffset": 4236, "count": 0 },
            { "startOffset": 4328, "endOffset": 4336, "count": 0 },
            { "startOffset": 4696, "endOffset": 4756, "count": 0 },
            { "startOffset": 5416, "endOffset": 10376, "count": 2 },
            { "startOffset": 5544, "endOffset": 5566, "count": 1 },
            { "startOffset": 5551, "endOffset": 5556, "count": 0 },
            { "startOffset": 5824, "endOffset": 5878, "count": 1 },
            { "startOffset": 6244, "endOffset": 6355, "count": 1 },
            { "startOffset": 6380, "endOffset": 6796, "count": 1 },
            { "startOffset": 6422, "endOffset": 6618, "count": 0 },
            { "startOffset": 6647, "endOffset": 6678, "count": 0 },
            { "startOffset": 6679, "endOffset": 6707, "count": 0 },
            { "startOffset": 6740, "endOffset": 6790, "count": 0 },
            { "startOffset": 6796, "endOffset": 10372, "count": 1 },
            { "startOffset": 6836, "endOffset": 8965, "count": 0 },
            { "startOffset": 9234, "endOffset": 9689, "count": 0 },
            { "startOffset": 9715, "endOffset": 10372, "count": 0 },
            { "startOffset": 10376, "endOffset": 10390, "count": 2 },
            { "startOffset": 10414, "endOffset": 10423, "count": 0 },
            { "startOffset": 10425, "endOffset": 10459, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "abort",
          "ranges": [{ "startOffset": 4542, "endOffset": 4598, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "finish",
          "ranges": [{ "startOffset": 4834, "endOffset": 4902, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "finishImpl",
          "ranges": [
            { "startOffset": 4906, "endOffset": 5360, "count": 2 },
            { "startOffset": 4952, "endOffset": 5010, "count": 0 },
            { "startOffset": 5012, "endOffset": 5038, "count": 0 },
            { "startOffset": 5066, "endOffset": 5117, "count": 1 },
            { "startOffset": 5155, "endOffset": 5171, "count": 1 },
            { "startOffset": 5171, "endOffset": 5188, "count": 0 },
            { "startOffset": 5224, "endOffset": 5356, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 5280, "endOffset": 5292, "count": 3 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "onError",
          "ranges": [{ "startOffset": 5965, "endOffset": 6162, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6277, "endOffset": 6345, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 7859, "endOffset": 8169, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 8171, "endOffset": 8295, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pipe",
          "ranges": [
            { "startOffset": 10478, "endOffset": 12279, "count": 1 },
            { "startOffset": 11124, "endOffset": 11218, "count": 0 },
            { "startOffset": 11265, "endOffset": 11290, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 10560, "endOffset": 10718, "count": 1 },
            { "startOffset": 10584, "endOffset": 10714, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "endFn",
          "ranges": [{ "startOffset": 11028, "endOffset": 11089, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 11340, "endOffset": 12211, "count": 1 },
            { "startOffset": 11409, "endOffset": 11459, "count": 0 },
            { "startOffset": 11460, "endOffset": 11536, "count": 0 },
            { "startOffset": 11543, "endOffset": 12175, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "404",
      "url": "node:internal/streams/destroy",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 6743, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "checkError",
          "ranges": [
            { "startOffset": 360, "endOffset": 671, "count": 6 },
            { "startOffset": 404, "endOffset": 669, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "destroy",
          "ranges": [
            { "startOffset": 781, "endOffset": 1568, "count": 3 },
            { "startOffset": 950, "endOffset": 954, "count": 1 },
            { "startOffset": 964, "endOffset": 975, "count": 2 },
            { "startOffset": 993, "endOffset": 1070, "count": 0 },
            { "startOffset": 1255, "endOffset": 1284, "count": 2 },
            { "startOffset": 1403, "endOffset": 1510, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1429, "endOffset": 1504, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_destroy",
          "ranges": [
            { "startOffset": 1570, "endOffset": 2184, "count": 3 },
            { "startOffset": 2145, "endOffset": 2182, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onDestroy",
          "ranges": [
            { "startOffset": 1630, "endOffset": 2089, "count": 3 },
            { "startOffset": 1672, "endOffset": 1693, "count": 0 },
            { "startOffset": 1824, "endOffset": 1854, "count": 2 },
            { "startOffset": 1932, "endOffset": 1954, "count": 0 },
            { "startOffset": 1969, "endOffset": 2029, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "emitErrorCloseNT",
          "ranges": [{ "startOffset": 2186, "endOffset": 2273, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitCloseNT",
          "ranges": [
            { "startOffset": 2275, "endOffset": 2523, "count": 3 },
            { "startOffset": 2380, "endOffset": 2412, "count": 2 },
            { "startOffset": 2463, "endOffset": 2474, "count": 2 },
            { "startOffset": 2475, "endOffset": 2490, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "emitErrorNT",
          "ranges": [{ "startOffset": 2525, "endOffset": 2800, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "undestroy",
          "ranges": [{ "startOffset": 2802, "endOffset": 3492, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "errorOrDestroy",
          "ranges": [{ "startOffset": 3494, "endOffset": 4413, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "construct",
          "ranges": [
            { "startOffset": 4415, "endOffset": 4821, "count": 9 },
            { "startOffset": 4512, "endOffset": 4820, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "constructNT",
          "ranges": [{ "startOffset": 4823, "endOffset": 5552, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isRequest",
          "ranges": [{ "startOffset": 5554, "endOffset": 5650, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitCloseLegacy",
          "ranges": [{ "startOffset": 5652, "endOffset": 5712, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitErrorCloseLegacy",
          "ranges": [{ "startOffset": 5714, "endOffset": 5834, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "destroyer",
          "ranges": [
            { "startOffset": 5869, "endOffset": 6651, "count": 1 },
            { "startOffset": 5958, "endOffset": 5993, "count": 0 },
            { "startOffset": 5995, "endOffset": 6649, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "405",
      "url": "node:internal/streams/duplex",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 4938, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Duplex",
          "ranges": [
            { "startOffset": 1996, "endOffset": 2663, "count": 4 },
            { "startOffset": 2060, "endOffset": 2087, "count": 0 },
            { "startOffset": 2266, "endOffset": 2402, "count": 2 },
            { "startOffset": 2440, "endOffset": 2615, "count": 1 },
            { "startOffset": 2619, "endOffset": 2661, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 3811, "endOffset": 4023, "count": 175 },
            { "startOffset": 3909, "endOffset": 3940, "count": 0 },
            { "startOffset": 3984, "endOffset": 4016, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 4029, "endOffset": 4290, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyWebStreams",
          "ranges": [{ "startOffset": 4364, "endOffset": 4528, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Duplex.fromWeb",
          "ranges": [{ "startOffset": 4547, "endOffset": 4665, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Duplex.toWeb",
          "ranges": [{ "startOffset": 4683, "endOffset": 4772, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Duplex.from",
          "ranges": [{ "startOffset": 4805, "endOffset": 4936, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "406",
      "url": "node:internal/streams/readable",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 43613, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1799, "endOffset": 1824, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "nop",
          "ranges": [{ "startOffset": 2591, "endOffset": 2599, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "makeBitMapDescriptor",
          "ranges": [{ "startOffset": 3280, "endOffset": 3496, "count": 19 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 3355, "endOffset": 3397, "count": 6753 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "set",
          "ranges": [
            { "startOffset": 3403, "endOffset": 3488, "count": 2143 },
            { "startOffset": 3433, "endOffset": 3451, "count": 1451 },
            { "startOffset": 3451, "endOffset": 3482, "count": 692 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "ReadableState",
          "ranges": [
            { "startOffset": 5372, "endOffset": 7986, "count": 5 },
            { "startOffset": 5771, "endOffset": 5814, "count": 0 },
            { "startOffset": 6156, "endOffset": 6182, "count": 2 },
            { "startOffset": 6199, "endOffset": 6209, "count": 4 },
            { "startOffset": 6210, "endOffset": 6239, "count": 4 },
            { "startOffset": 6245, "endOffset": 6271, "count": 1 },
            { "startOffset": 6519, "endOffset": 6555, "count": 0 },
            { "startOffset": 6952, "endOffset": 6978, "count": 2 },
            { "startOffset": 7101, "endOffset": 7129, "count": 0 },
            { "startOffset": 7885, "endOffset": 7984, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable",
          "ranges": [
            { "startOffset": 7989, "endOffset": 8877, "count": 5 },
            { "startOffset": 8057, "endOffset": 8086, "count": 0 },
            { "startOffset": 8409, "endOffset": 8435, "count": 0 },
            { "startOffset": 8490, "endOffset": 8522, "count": 1 },
            { "startOffset": 8579, "endOffset": 8615, "count": 0 },
            { "startOffset": 8640, "endOffset": 8652, "count": 0 },
            { "startOffset": 8660, "endOffset": 8697, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 8764, "endOffset": 8873, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable._destroy",
          "ranges": [{ "startOffset": 9014, "endOffset": 9046, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable.<computed>",
          "ranges": [{ "startOffset": 9097, "endOffset": 9135, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.<computed>",
          "ranges": [{ "startOffset": 9179, "endOffset": 9435, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.push",
          "ranges": [{ "startOffset": 9664, "endOffset": 9750, "count": 249 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable.unshift",
          "ranges": [{ "startOffset": 9846, "endOffset": 9931, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "readableAddChunk",
          "ranges": [
            { "startOffset": 9934, "endOffset": 12336, "count": 249 },
            { "startOffset": 10127, "endOffset": 10942, "count": 0 },
            { "startOffset": 10955, "endOffset": 10993, "count": 0 },
            { "startOffset": 11019, "endOffset": 11085, "count": 3 },
            { "startOffset": 11085, "endOffset": 12052, "count": 246 },
            { "startOffset": 11131, "endOffset": 11161, "count": 0 },
            { "startOffset": 11185, "endOffset": 11439, "count": 0 },
            { "startOffset": 11462, "endOffset": 11532, "count": 0 },
            { "startOffset": 11576, "endOffset": 11603, "count": 0 },
            { "startOffset": 11667, "endOffset": 11679, "count": 0 },
            { "startOffset": 11681, "endOffset": 11888, "count": 0 },
            { "startOffset": 11960, "endOffset": 12052, "count": 0 },
            { "startOffset": 12268, "endOffset": 12333, "count": 246 },
            { "startOffset": 12311, "endOffset": 12332, "count": 140 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "addChunk",
          "ranges": [
            { "startOffset": 12338, "endOffset": 13103, "count": 246 },
            { "startOffset": 12412, "endOffset": 12433, "count": 156 },
            { "startOffset": 12434, "endOffset": 12448, "count": 84 },
            { "startOffset": 12449, "endOffset": 12490, "count": 83 },
            { "startOffset": 12492, "endOffset": 12800, "count": 83 },
            { "startOffset": 12636, "endOffset": 12682, "count": 0 },
            { "startOffset": 12800, "endOffset": 13069, "count": 163 },
            { "startOffset": 12880, "endOffset": 12894, "count": 0 },
            { "startOffset": 12922, "endOffset": 12950, "count": 0 },
            { "startOffset": 13044, "endOffset": 13065, "count": 84 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable.isPaused",
          "ranges": [{ "startOffset": 13135, "endOffset": 13247, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.setEncoding",
          "ranges": [{ "startOffset": 13311, "endOffset": 13872, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "computeNewHighWaterMark",
          "ranges": [{ "startOffset": 13933, "endOffset": 14284, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "howMuchToRead",
          "ranges": [
            { "startOffset": 14397, "endOffset": 14808, "count": 482 },
            { "startOffset": 14445, "endOffset": 14483, "count": 389 },
            { "startOffset": 14468, "endOffset": 14482, "count": 169 },
            { "startOffset": 14489, "endOffset": 14498, "count": 95 },
            { "startOffset": 14498, "endOffset": 14553, "count": 387 },
            { "startOffset": 14553, "endOffset": 14801, "count": 0 },
            { "startOffset": 14802, "endOffset": 14805, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable.read",
          "ranges": [
            { "startOffset": 14905, "endOffset": 19407, "count": 482 },
            { "startOffset": 15089, "endOffset": 15107, "count": 332 },
            { "startOffset": 15107, "endOffset": 15174, "count": 150 },
            { "startOffset": 15138, "endOffset": 15174, "count": 0 },
            { "startOffset": 15339, "endOffset": 15388, "count": 0 },
            { "startOffset": 15409, "endOffset": 15442, "count": 332 },
            { "startOffset": 15628, "endOffset": 15655, "count": 150 },
            { "startOffset": 15656, "endOffset": 15789, "count": 140 },
            { "startOffset": 15739, "endOffset": 15765, "count": 0 },
            { "startOffset": 15767, "endOffset": 15788, "count": 83 },
            { "startOffset": 15791, "endOffset": 15976, "count": 57 },
            { "startOffset": 15880, "endOffset": 15894, "count": 0 },
            { "startOffset": 15902, "endOffset": 15920, "count": 0 },
            { "startOffset": 15976, "endOffset": 16085, "count": 425 },
            { "startOffset": 16085, "endOffset": 16099, "count": 95 },
            { "startOffset": 16101, "endOffset": 16176, "count": 10 },
            { "startOffset": 16137, "endOffset": 16155, "count": 2 },
            { "startOffset": 16176, "endOffset": 17469, "count": 415 },
            { "startOffset": 17469, "endOffset": 17510, "count": 164 },
            { "startOffset": 17512, "endOffset": 17585, "count": 414 },
            { "startOffset": 17585, "endOffset": 17814, "count": 415 },
            { "startOffset": 17814, "endOffset": 17830, "count": 407 },
            { "startOffset": 17831, "endOffset": 17849, "count": 225 },
            { "startOffset": 17850, "endOffset": 17866, "count": 225 },
            { "startOffset": 17867, "endOffset": 17894, "count": 225 },
            { "startOffset": 17896, "endOffset": 17974, "count": 190 },
            { "startOffset": 17974, "endOffset": 18574, "count": 225 },
            { "startOffset": 17992, "endOffset": 18574, "count": 224 },
            { "startOffset": 18160, "endOffset": 18189, "count": 84 },
            { "startOffset": 18279, "endOffset": 18331, "count": 0 },
            { "startOffset": 18538, "endOffset": 18570, "count": 57 },
            { "startOffset": 18574, "endOffset": 18604, "count": 415 },
            { "startOffset": 18604, "endOffset": 18629, "count": 330 },
            { "startOffset": 18629, "endOffset": 18652, "count": 85 },
            { "startOffset": 18652, "endOffset": 18674, "count": 415 },
            { "startOffset": 18674, "endOffset": 18752, "count": 252 },
            { "startOffset": 18752, "endOffset": 18915, "count": 163 },
            { "startOffset": 18814, "endOffset": 18860, "count": 0 },
            { "startOffset": 18915, "endOffset": 18943, "count": 415 },
            { "startOffset": 18943, "endOffset": 19259, "count": 335 },
            { "startOffset": 19092, "endOffset": 19118, "count": 334 },
            { "startOffset": 19215, "endOffset": 19229, "count": 251 },
            { "startOffset": 19237, "endOffset": 19255, "count": 1 },
            { "startOffset": 19259, "endOffset": 19280, "count": 415 },
            { "startOffset": 19280, "endOffset": 19302, "count": 163 },
            { "startOffset": 19303, "endOffset": 19325, "count": 163 },
            { "startOffset": 19327, "endOffset": 19390, "count": 163 },
            { "startOffset": 19390, "endOffset": 19406, "count": 415 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onEofChunk",
          "ranges": [
            { "startOffset": 19410, "endOffset": 20230, "count": 3 },
            { "startOffset": 19489, "endOffset": 19496, "count": 0 },
            { "startOffset": 19518, "endOffset": 19692, "count": 0 },
            { "startOffset": 19734, "endOffset": 19936, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "emitReadable",
          "ranges": [
            { "startOffset": 20431, "endOffset": 20758, "count": 141 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "emitReadable_",
          "ranges": [
            { "startOffset": 20760, "endOffset": 21414, "count": 144 },
            { "startOffset": 20960, "endOffset": 20974, "count": 2 },
            { "startOffset": 21333, "endOffset": 21352, "count": 143 },
            { "startOffset": 21353, "endOffset": 21395, "count": 140 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "maybeReadMore",
          "ranges": [
            { "startOffset": 21764, "endOffset": 21941, "count": 246 },
            { "startOffset": 21829, "endOffset": 21849, "count": 222 },
            { "startOffset": 21851, "endOffset": 21939, "count": 222 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "maybeReadMore_",
          "ranges": [
            { "startOffset": 21943, "endOffset": 23735, "count": 222 },
            { "startOffset": 23409, "endOffset": 23424, "count": 140 },
            { "startOffset": 23425, "endOffset": 23524, "count": 139 },
            { "startOffset": 23473, "endOffset": 23523, "count": 57 },
            { "startOffset": 23501, "endOffset": 23522, "count": 0 },
            { "startOffset": 23526, "endOffset": 23704, "count": 82 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable._read",
          "ranges": [{ "startOffset": 24006, "endOffset": 24072, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.pipe",
          "ranges": [
            { "startOffset": 24101, "endOffset": 28546, "count": 2 },
            { "startOffset": 24218, "endOffset": 24419, "count": 0 },
            { "startOffset": 24539, "endOffset": 24564, "count": 1 },
            { "startOffset": 24566, "endOffset": 24606, "count": 1 },
            { "startOffset": 24607, "endOffset": 24647, "count": 0 },
            { "startOffset": 24672, "endOffset": 24679, "count": 0 },
            { "startOffset": 24718, "endOffset": 24742, "count": 0 },
            { "startOffset": 28435, "endOffset": 28453, "count": 0 },
            { "startOffset": 28479, "endOffset": 28528, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onunpipe",
          "ranges": [{ "startOffset": 24812, "endOffset": 25038, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "onend",
          "ranges": [{ "startOffset": 25042, "endOffset": 25100, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "cleanup",
          "ranges": [
            { "startOffset": 25145, "endOffset": 26037, "count": 2 },
            { "startOffset": 25348, "endOffset": 25400, "count": 1 },
            { "startOffset": 25922, "endOffset": 25948, "count": 1 },
            { "startOffset": 25949, "endOffset": 26015, "count": 1 },
            { "startOffset": 26023, "endOffset": 26033, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "pause",
          "ranges": [
            { "startOffset": 26041, "endOffset": 27038, "count": 82 },
            { "startOffset": 26501, "endOffset": 26693, "count": 0 },
            { "startOffset": 26737, "endOffset": 27034, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "ondata",
          "ranges": [
            { "startOffset": 27068, "endOffset": 27228, "count": 164 },
            { "startOffset": 27202, "endOffset": 27224, "count": 82 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onerror",
          "ranges": [{ "startOffset": 27350, "endOffset": 27761, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onclose",
          "ranges": [{ "startOffset": 27941, "endOffset": 28024, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onfinish",
          "ranges": [{ "startOffset": 28058, "endOffset": 28163, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unpipe",
          "ranges": [{ "startOffset": 28200, "endOffset": 28266, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "pipeOnDrain",
          "ranges": [{ "startOffset": 28549, "endOffset": 29194, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "pipeOnDrainFunctionResult",
          "ranges": [
            { "startOffset": 28592, "endOffset": 29191, "count": 82 },
            { "startOffset": 28907, "endOffset": 29049, "count": 0 },
            { "startOffset": 29085, "endOffset": 29122, "count": 0 },
            { "startOffset": 29160, "endOffset": 29187, "count": 81 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable.unpipe",
          "ranges": [
            { "startOffset": 29225, "endOffset": 29926, "count": 2 },
            { "startOffset": 29412, "endOffset": 29424, "count": 0 },
            { "startOffset": 29439, "endOffset": 29655, "count": 0 },
            { "startOffset": 29771, "endOffset": 29783, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable.on",
          "ranges": [
            { "startOffset": 30052, "endOffset": 30959, "count": 38 },
            { "startOffset": 30184, "endOffset": 30516, "count": 2 },
            { "startOffset": 30516, "endOffset": 30942, "count": 36 },
            { "startOffset": 30545, "endOffset": 30942, "count": 1 },
            { "startOffset": 30810, "endOffset": 30847, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable.removeListener",
          "ranges": [
            { "startOffset": 31054, "endOffset": 31619, "count": 39 },
            { "startOffset": 31216, "endOffset": 31602, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable.removeAllListeners",
          "ranges": [{ "startOffset": 31722, "endOffset": 32316, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "updateReadableListening",
          "ranges": [{ "startOffset": 32319, "endOffset": 32829, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "nReadingNextTick",
          "ranges": [{ "startOffset": 32831, "endOffset": 32919, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable.resume",
          "ranges": [{ "startOffset": 33073, "endOffset": 33398, "count": 83 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "resume",
          "ranges": [{ "startOffset": 33401, "endOffset": 33551, "count": 83 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "resume_",
          "ranges": [
            { "startOffset": 33553, "endOffset": 33804, "count": 83 },
            { "startOffset": 33643, "endOffset": 33668, "count": 67 },
            { "startOffset": 33764, "endOffset": 33781, "count": 2 },
            { "startOffset": 33787, "endOffset": 33802, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable.pause",
          "ranges": [
            { "startOffset": 33833, "endOffset": 34100, "count": 84 },
            { "startOffset": 33954, "endOffset": 34044, "count": 83 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "flow",
          "ranges": [
            { "startOffset": 34103, "endOffset": 34250, "count": 227 },
            { "startOffset": 34221, "endOffset": 34246, "count": 84 },
            { "startOffset": 34247, "endOffset": 34248, "count": 81 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Readable.wrap",
          "ranges": [{ "startOffset": 34434, "endOffset": 35455, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.<computed>",
          "ranges": [{ "startOffset": 35500, "endOffset": 35552, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.iterator",
          "ranges": [{ "startOffset": 35585, "endOffset": 35728, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "streamToAsyncIterator",
          "ranges": [{ "startOffset": 35731, "endOffset": 35980, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createAsyncIterator",
          "ranges": [{ "startOffset": 35982, "endOffset": 37058, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 37277, "endOffset": 37666, "count": 14 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 37672, "endOffset": 37802, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 37884, "endOffset": 37948, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 38030, "endOffset": 38238, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 38326, "endOffset": 38392, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 38473, "endOffset": 38555, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 38637, "endOffset": 38697, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 38708, "endOffset": 38817, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 38893, "endOffset": 38947, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 39027, "endOffset": 39115, "count": 1 },
            { "startOffset": 39101, "endOffset": 39108, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 39193, "endOffset": 39278, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 39347, "endOffset": 39431, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 39476, "endOffset": 39560, "count": 8 },
            { "startOffset": 39546, "endOffset": 39553, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 39631, "endOffset": 39718, "count": 5 },
            { "startOffset": 39704, "endOffset": 39711, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 39724, "endOffset": 40013, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 40088, "endOffset": 40176, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 40317, "endOffset": 40362, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 40442, "endOffset": 40493, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 40499, "endOffset": 40548, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fromList",
          "ranges": [
            { "startOffset": 40854, "endOffset": 41416, "count": 330 },
            { "startOffset": 40937, "endOffset": 40949, "count": 167 },
            { "startOffset": 40949, "endOffset": 41017, "count": 163 },
            { "startOffset": 41017, "endOffset": 41399, "count": 0 },
            { "startOffset": 41399, "endOffset": 41415, "count": 163 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "endReadable",
          "ranges": [{ "startOffset": 41418, "endOffset": 41639, "count": 3 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "endReadableNT",
          "ranges": [
            { "startOffset": 41641, "endOffset": 42561, "count": 3 },
            { "startOffset": 41962, "endOffset": 41995, "count": 0 },
            { "startOffset": 41997, "endOffset": 42051, "count": 0 },
            { "startOffset": 42283, "endOffset": 42488, "count": 2 },
            { "startOffset": 42451, "endOffset": 42479, "count": 1 },
            { "startOffset": 42514, "endOffset": 42549, "count": 2 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "endWritableNT",
          "ranges": [{ "startOffset": 42563, "endOffset": 42723, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.from",
          "ranges": [{ "startOffset": 42741, "endOffset": 42810, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyWebStreams",
          "ranges": [{ "startOffset": 42875, "endOffset": 43039, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.fromWeb",
          "ranges": [{ "startOffset": 43060, "endOffset": 43194, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.toWeb",
          "ranges": [{ "startOffset": 43214, "endOffset": 43348, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.wrap",
          "ranges": [{ "startOffset": 43367, "endOffset": 43611, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "407",
      "url": "node:internal/streams/legacy",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2934, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Stream",
          "ranges": [{ "startOffset": 112, "endOffset": 160, "count": 9 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Stream.pipe",
          "ranges": [{ "startOffset": 274, "endOffset": 2076, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "prependListener",
          "ranges": [
            { "startOffset": 2079, "endOffset": 2886, "count": 2 },
            { "startOffset": 2338, "endOffset": 2701, "count": 0 },
            { "startOffset": 2707, "endOffset": 2884, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "408",
      "url": "node:internal/streams/add-abort-signal",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1704, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateAbortSignal",
          "ranges": [{ "startOffset": 557, "endOffset": 716, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "addAbortSignal",
          "ranges": [{ "startOffset": 751, "endOffset": 1062, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "module.exports.addAbortSignalNoValidate",
          "ranges": [{ "startOffset": 1107, "endOffset": 1702, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "409",
      "url": "node:internal/streams/buffer_list",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 4060, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "BufferList",
          "ranges": [{ "startOffset": 254, "endOffset": 338, "count": 5 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "push",
          "ranges": [
            { "startOffset": 342, "endOffset": 529, "count": 163 },
            { "startOffset": 426, "endOffset": 449, "count": 79 },
            { "startOffset": 449, "endOffset": 483, "count": 84 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "unshift",
          "ranges": [{ "startOffset": 533, "endOffset": 691, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "shift",
          "ranges": [
            { "startOffset": 695, "endOffset": 922, "count": 163 },
            { "startOffset": 738, "endOffset": 745, "count": 0 },
            { "startOffset": 811, "endOffset": 840, "count": 84 },
            { "startOffset": 840, "endOffset": 883, "count": 79 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "clear",
          "ranges": [{ "startOffset": 926, "endOffset": 994, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "join",
          "ranges": [{ "startOffset": 998, "endOffset": 1180, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "concat",
          "ranges": [{ "startOffset": 1184, "endOffset": 1467, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "consume",
          "ranges": [{ "startOffset": 1551, "endOffset": 2005, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "first",
          "ranges": [{ "startOffset": 2009, "endOffset": 2049, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "module.exports",
          "ranges": [{ "startOffset": 2053, "endOffset": 2149, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_getString",
          "ranges": [{ "startOffset": 2224, "endOffset": 2862, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_getBuffer",
          "ranges": [{ "startOffset": 2932, "endOffset": 3779, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "module.exports",
          "ranges": [{ "startOffset": 3860, "endOffset": 4056, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "410",
      "url": "node:internal/streams/state",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1332, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "highWaterMarkFrom",
          "ranges": [
            { "startOffset": 287, "endOffset": 454, "count": 9 },
            { "startOffset": 385, "endOffset": 408, "count": 2 },
            { "startOffset": 409, "endOffset": 451, "count": 7 },
            { "startOffset": 424, "endOffset": 444, "count": 6 },
            { "startOffset": 445, "endOffset": 451, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getDefaultHighWaterMark",
          "ranges": [
            { "startOffset": 456, "endOffset": 586, "count": 7 },
            { "startOffset": 523, "endOffset": 555, "count": 2 },
            { "startOffset": 556, "endOffset": 583, "count": 5 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setDefaultHighWaterMark",
          "ranges": [{ "startOffset": 588, "endOffset": 799, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHighWaterMark",
          "ranges": [
            { "startOffset": 801, "endOffset": 1234, "count": 9 },
            { "startOffset": 948, "endOffset": 1160, "count": 2 },
            { "startOffset": 992, "endOffset": 1129, "count": 0 },
            { "startOffset": 1160, "endOffset": 1233, "count": 7 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "411",
      "url": "node:string_decoder",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 5213, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "normalizeEncoding",
          "ranges": [{ "startOffset": 2129, "endOffset": 2391, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "StringDecoder",
          "ranges": [{ "startOffset": 2705, "endOffset": 2904, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "write",
          "ranges": [{ "startOffset": 3227, "endOffset": 3612, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "end",
          "ranges": [{ "startOffset": 3889, "endOffset": 4080, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "text",
          "ranges": [{ "startOffset": 4291, "endOffset": 4448, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 4586, "endOffset": 4799, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 4891, "endOffset": 4954, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 5047, "endOffset": 5162, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "412",
      "url": "node:internal/streams/from",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2614, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "from",
          "ranges": [
            { "startOffset": 241, "endOffset": 2589, "count": 1 },
            { "startOffset": 365, "endOffset": 521, "count": 0 },
            { "startOffset": 660, "endOffset": 860, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "read",
          "ranges": [{ "startOffset": 438, "endOffset": 508, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "readable._read",
          "ranges": [{ "startOffset": 1142, "endOffset": 1220, "count": 83 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "readable._destroy",
          "ranges": [{ "startOffset": 1245, "endOffset": 1449, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1319, "endOffset": 1352, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1398, "endOffset": 1437, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "close",
          "ranges": [
            { "startOffset": 1454, "endOffset": 1891, "count": 1 },
            { "startOffset": 1624, "endOffset": 1635, "count": 0 },
            { "startOffset": 1637, "endOffset": 1764, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "next",
          "ranges": [
            { "startOffset": 1895, "endOffset": 2568, "count": 83 },
            { "startOffset": 2020, "endOffset": 2047, "count": 0 },
            { "startOffset": 2068, "endOffset": 2110, "count": 1 },
            { "startOffset": 2110, "endOffset": 2484, "count": 82 },
            { "startOffset": 2196, "endOffset": 2222, "count": 0 },
            { "startOffset": 2271, "endOffset": 2361, "count": 0 },
            { "startOffset": 2391, "endOffset": 2426, "count": 0 },
            { "startOffset": 2493, "endOffset": 2545, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "413",
      "url": "node:internal/streams/writable",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 26009, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "nop",
          "ranges": [{ "startOffset": 2389, "endOffset": 2406, "count": 164 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "WritableState",
          "ranges": [
            { "startOffset": 2452, "endOffset": 6975, "count": 4 },
            { "startOffset": 2847, "endOffset": 2890, "count": 0 },
            { "startOffset": 3099, "endOffset": 3149, "count": 3 },
            { "startOffset": 3441, "endOffset": 3477, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "resetBuffer",
          "ranges": [{ "startOffset": 6977, "endOffset": 7109, "count": 4 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "getBuffer",
          "ranges": [{ "startOffset": 7147, "endOffset": 7236, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7332, "endOffset": 7397, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable",
          "ranges": [
            { "startOffset": 7404, "endOffset": 8932, "count": 4 },
            { "startOffset": 8045, "endOffset": 8099, "count": 0 },
            { "startOffset": 8105, "endOffset": 8134, "count": 0 },
            { "startOffset": 8273, "endOffset": 8301, "count": 1 },
            { "startOffset": 8355, "endOffset": 8385, "count": 0 },
            { "startOffset": 8440, "endOffset": 8472, "count": 1 },
            { "startOffset": 8525, "endOffset": 8553, "count": 1 },
            { "startOffset": 8610, "endOffset": 8646, "count": 0 },
            { "startOffset": 8678, "endOffset": 8715, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 8782, "endOffset": 8928, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "value",
          "ranges": [{ "startOffset": 9014, "endOffset": 9218, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.pipe",
          "ranges": [{ "startOffset": 9319, "endOffset": 9387, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_write",
          "ranges": [
            { "startOffset": 9390, "endOffset": 10734, "count": 164 },
            { "startOffset": 9515, "endOffset": 9577, "count": 0 },
            { "startOffset": 9643, "endOffset": 9759, "count": 0 },
            { "startOffset": 9837, "endOffset": 9882, "count": 0 },
            { "startOffset": 9911, "endOffset": 10388, "count": 82 },
            { "startOffset": 9948, "endOffset": 10081, "count": 0 },
            { "startOffset": 10150, "endOffset": 10384, "count": 0 },
            { "startOffset": 10421, "endOffset": 10470, "count": 0 },
            { "startOffset": 10497, "endOffset": 10547, "count": 0 },
            { "startOffset": 10560, "endOffset": 10651, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Writable.write",
          "ranges": [
            { "startOffset": 10763, "endOffset": 10849, "count": 164 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Writable.cork",
          "ranges": [{ "startOffset": 10878, "endOffset": 10924, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.uncork",
          "ranges": [{ "startOffset": 10955, "endOffset": 11110, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setDefaultEncoding",
          "ranges": [{ "startOffset": 11153, "endOffset": 11478, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeOrBuffer",
          "ranges": [
            { "startOffset": 11668, "endOffset": 12681, "count": 164 },
            { "startOffset": 11766, "endOffset": 11769, "count": 82 },
            { "startOffset": 11770, "endOffset": 11784, "count": 82 },
            { "startOffset": 11988, "endOffset": 12011, "count": 82 },
            { "startOffset": 12089, "endOffset": 12321, "count": 0 },
            { "startOffset": 12641, "endOffset": 12658, "count": 82 },
            { "startOffset": 12659, "endOffset": 12678, "count": 82 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "doWrite",
          "ranges": [{ "startOffset": 12683, "endOffset": 13061, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onwriteError",
          "ranges": [{ "startOffset": 13063, "endOffset": 13448, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onwrite",
          "ranges": [
            { "startOffset": 13450, "endOffset": 15089, "count": 164 },
            { "startOffset": 13608, "endOffset": 13682, "count": 0 },
            { "startOffset": 13800, "endOffset": 14356, "count": 0 },
            { "startOffset": 14417, "endOffset": 14458, "count": 0 },
            { "startOffset": 14474, "endOffset": 15030, "count": 82 },
            { "startOffset": 14773, "endOffset": 14820, "count": 0 },
            { "startOffset": 14822, "endOffset": 14873, "count": 0 },
            { "startOffset": 15030, "endOffset": 15083, "count": 82 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "afterWriteTick",
          "ranges": [{ "startOffset": 15091, "endOffset": 15230, "count": 82 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "afterWrite",
          "ranges": [
            { "startOffset": 15232, "endOffset": 15607, "count": 164 },
            { "startOffset": 15314, "endOffset": 15334, "count": 163 },
            { "startOffset": 15335, "endOffset": 15356, "count": 163 },
            { "startOffset": 15357, "endOffset": 15379, "count": 163 },
            { "startOffset": 15398, "endOffset": 15458, "count": 81 },
            { "startOffset": 15545, "endOffset": 15574, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "errorBuffer",
          "ranges": [{ "startOffset": 15679, "endOffset": 16236, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearBuffer",
          "ranges": [{ "startOffset": 16302, "endOffset": 17796, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable._write",
          "ranges": [{ "startOffset": 17826, "endOffset": 17995, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.end",
          "ranges": [
            { "startOffset": 18059, "endOffset": 19395, "count": 1 },
            { "startOffset": 18164, "endOffset": 18224, "count": 0 },
            { "startOffset": 18266, "endOffset": 18311, "count": 0 },
            { "startOffset": 18370, "endOffset": 18477, "count": 0 },
            { "startOffset": 18526, "endOffset": 18572, "count": 0 },
            { "startOffset": 18585, "endOffset": 18611, "count": 0 },
            { "startOffset": 19062, "endOffset": 19218, "count": 0 },
            { "startOffset": 19252, "endOffset": 19377, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "needFinish",
          "ranges": [
            { "startOffset": 19398, "endOffset": 19738, "count": 166 },
            { "startOffset": 19450, "endOffset": 19479, "count": 3 },
            { "startOffset": 19480, "endOffset": 19510, "count": 3 },
            { "startOffset": 19511, "endOffset": 19542, "count": 3 },
            { "startOffset": 19543, "endOffset": 19570, "count": 2 },
            { "startOffset": 19571, "endOffset": 19611, "count": 2 },
            { "startOffset": 19612, "endOffset": 19640, "count": 2 },
            { "startOffset": 19641, "endOffset": 19668, "count": 2 },
            { "startOffset": 19669, "endOffset": 19701, "count": 2 },
            { "startOffset": 19702, "endOffset": 19734, "count": 2 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "callFinal",
          "ranges": [
            { "startOffset": 19740, "endOffset": 20686, "count": 1 },
            { "startOffset": 20625, "endOffset": 20661, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onFinish",
          "ranges": [
            { "startOffset": 19801, "endOffset": 20539, "count": 1 },
            { "startOffset": 19842, "endOffset": 19925, "count": 0 },
            { "startOffset": 19982, "endOffset": 20200, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "prefinish",
          "ranges": [
            { "startOffset": 20688, "endOffset": 20993, "count": 1 },
            { "startOffset": 20910, "endOffset": 20987, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "finishMaybe",
          "ranges": [
            { "startOffset": 20995, "endOffset": 21494, "count": 165 },
            { "startOffset": 21064, "endOffset": 21492, "count": 1 },
            { "startOffset": 21127, "endOffset": 21488, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 21199, "endOffset": 21361, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "finish",
          "ranges": [
            { "startOffset": 21496, "endOffset": 22222, "count": 1 },
            { "startOffset": 21687, "endOffset": 21720, "count": 0 },
            { "startOffset": 22127, "endOffset": 22155, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 22307, "endOffset": 22391, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 22439, "endOffset": 22526, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 22532, "endOffset": 22714, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 22761, "endOffset": 23153, "count": 8 },
            { "startOffset": 23084, "endOffset": 23099, "count": 7 },
            { "startOffset": 23100, "endOffset": 23113, "count": 7 },
            { "startOffset": 23114, "endOffset": 23134, "count": 7 },
            { "startOffset": 23135, "endOffset": 23146, "count": 6 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 23159, "endOffset": 23293, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 23348, "endOffset": 23434, "count": 2 },
            { "startOffset": 23420, "endOffset": 23427, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 23491, "endOffset": 23579, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 23632, "endOffset": 23714, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 23766, "endOffset": 23850, "count": 3 },
            { "startOffset": 23836, "endOffset": 23843, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 23906, "endOffset": 24064, "count": 2 },
            { "startOffset": 23975, "endOffset": 23988, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 24124, "endOffset": 24208, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 24261, "endOffset": 24341, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 24394, "endOffset": 24471, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 24540, "endOffset": 24624, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 24706, "endOffset": 24912, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.destroy",
          "ranges": [{ "startOffset": 24990, "endOffset": 25287, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable._destroy",
          "ranges": [{ "startOffset": 25375, "endOffset": 25407, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.<computed>",
          "ranges": [{ "startOffset": 25458, "endOffset": 25496, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyWebStreams",
          "ranges": [{ "startOffset": 25561, "endOffset": 25725, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.fromWeb",
          "ranges": [{ "startOffset": 25746, "endOffset": 25880, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.toWeb",
          "ranges": [{ "startOffset": 25900, "endOffset": 26007, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "414",
      "url": "node:stream/promises",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 917, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pipeline",
          "ranges": [{ "startOffset": 318, "endOffset": 869, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "415",
      "url": "node:internal/streams/transform",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 7176, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Transform",
          "ranges": [{ "startOffset": 3920, "endOffset": 5747, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "final",
          "ranges": [{ "startOffset": 5749, "endOffset": 6193, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "prefinish",
          "ranges": [{ "startOffset": 6195, "endOffset": 6276, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Transform._transform",
          "ranges": [{ "startOffset": 6348, "endOffset": 6443, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Transform._write",
          "ranges": [{ "startOffset": 6475, "endOffset": 7018, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Transform._read",
          "ranges": [{ "startOffset": 7049, "endOffset": 7174, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "416",
      "url": "node:internal/streams/passthrough",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1762, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "PassThrough",
          "ranges": [{ "startOffset": 1529, "endOffset": 1671, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "PassThrough._transform",
          "ranges": [{ "startOffset": 1708, "endOffset": 1760, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "417",
      "url": "node:internal/stream_base_commons",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 7041, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1010, "endOffset": 1035, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "handleWriteReq",
          "ranges": [
            { "startOffset": 1154, "endOffset": 2009, "count": 82 },
            { "startOffset": 1379, "endOffset": 1397, "count": 0 },
            { "startOffset": 1426, "endOffset": 1440, "count": 0 },
            { "startOffset": 1445, "endOffset": 1509, "count": 0 },
            { "startOffset": 1514, "endOffset": 1526, "count": 0 },
            { "startOffset": 1531, "endOffset": 1592, "count": 0 },
            { "startOffset": 1597, "endOffset": 1659, "count": 0 },
            { "startOffset": 1664, "endOffset": 1676, "count": 0 },
            { "startOffset": 1681, "endOffset": 1694, "count": 0 },
            { "startOffset": 1699, "endOffset": 1714, "count": 0 },
            { "startOffset": 1719, "endOffset": 1783, "count": 0 },
            { "startOffset": 1788, "endOffset": 2003, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onWriteComplete",
          "ranges": [{ "startOffset": 2011, "endOffset": 2696, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createWriteWrap",
          "ranges": [{ "startOffset": 2698, "endOffset": 2936, "count": 82 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "writevGeneric",
          "ranges": [{ "startOffset": 2938, "endOffset": 3577, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeGeneric",
          "ranges": [{ "startOffset": 3579, "endOffset": 3784, "count": 82 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "afterWriteDispatched",
          "ranges": [
            { "startOffset": 3786, "endOffset": 4089, "count": 82 },
            { "startOffset": 3953, "endOffset": 4004, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "onStreamRead",
          "ranges": [{ "startOffset": 4091, "endOffset": 6022, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setStreamTimeout",
          "ranges": [{ "startOffset": 6024, "endOffset": 6834, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "418",
      "url": "node:internal/dtrace",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 570, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "DTRACE_HTTP_CLIENT_REQUEST",
          "ranges": [{ "startOffset": 97, "endOffset": 105, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "DTRACE_HTTP_CLIENT_RESPONSE",
          "ranges": [{ "startOffset": 139, "endOffset": 147, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "DTRACE_HTTP_SERVER_REQUEST",
          "ranges": [{ "startOffset": 180, "endOffset": 188, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "DTRACE_HTTP_SERVER_RESPONSE",
          "ranges": [{ "startOffset": 222, "endOffset": 230, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "DTRACE_NET_SERVER_CONNECTION",
          "ranges": [{ "startOffset": 265, "endOffset": 273, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "DTRACE_NET_STREAM_END",
          "ranges": [{ "startOffset": 301, "endOffset": 309, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "419",
      "url": "node:internal/perf/observe",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 15460, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "queuePending",
          "ranges": [{ "startOffset": 2518, "endOffset": 2779, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getObserverType",
          "ranges": [{ "startOffset": 2781, "endOffset": 3121, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "maybeDecrementObserverCounts",
          "ranges": [{ "startOffset": 3123, "endOffset": 3544, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "maybeIncrementObserverCount",
          "ranges": [{ "startOffset": 3546, "endOffset": 3888, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 3890, "endOffset": 4896, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 4898, "endOffset": 8468, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "enqueue",
          "ranges": [{ "startOffset": 8634, "endOffset": 8836, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "bufferUserTiming",
          "ranges": [{ "startOffset": 8897, "endOffset": 9923, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "bufferResourceTiming",
          "ranges": [{ "startOffset": 10211, "endOffset": 11475, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setResourceTimingBufferSize",
          "ranges": [{ "startOffset": 11563, "endOffset": 11904, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setDispatchBufferFull",
          "ranges": [{ "startOffset": 11906, "endOffset": 11971, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "clearEntriesFromBuffer",
          "ranges": [{ "startOffset": 11973, "endOffset": 12573, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "filterBufferMapByNameAndType",
          "ranges": [{ "startOffset": 12575, "endOffset": 13463, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "observerCallback",
          "ranges": [{ "startOffset": 13465, "endOffset": 14583, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "hasObserver",
          "ranges": [{ "startOffset": 14620, "endOffset": 14739, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "startPerf",
          "ranges": [{ "startOffset": 14742, "endOffset": 14852, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "stopPerf",
          "ranges": [{ "startOffset": 14854, "endOffset": 15171, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "420",
      "url": "node:internal/perf/performance_entry",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1731, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isPerformanceEntry",
          "ranges": [{ "startOffset": 441, "endOffset": 514, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "PerformanceEntry",
          "ranges": [{ "startOffset": 543, "endOffset": 603, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get name",
          "ranges": [{ "startOffset": 607, "endOffset": 641, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get entryType",
          "ranges": [{ "startOffset": 645, "endOffset": 684, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get startTime",
          "ranges": [{ "startOffset": 688, "endOffset": 728, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get duration",
          "ranges": [{ "startOffset": 732, "endOffset": 774, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get detail",
          "ranges": [{ "startOffset": 778, "endOffset": 816, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 820, "endOffset": 1064, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toJSON",
          "ranges": [{ "startOffset": 1068, "endOffset": 1249, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "InternalPerformanceEntry",
          "ranges": [{ "startOffset": 1288, "endOffset": 1476, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "421",
      "url": "node:internal/assert/calltracker",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3452, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 462, "endOffset": 1495, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 1497, "endOffset": 3420, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "422",
      "url": "node:test",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 693, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 504, "endOffset": 687, "count": 2 },
            { "startOffset": 544, "endOffset": 661, "count": 1 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "423",
      "url": "node:internal/test_runner/harness",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 7172, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createTestTree",
          "ranges": [{ "startOffset": 706, "endOffset": 832, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "createProcessEventHandler",
          "ranges": [{ "startOffset": 834, "endOffset": 2352, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 901, "endOffset": 2349, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "configureCoverage",
          "ranges": [
            { "startOffset": 2354, "endOffset": 2721, "count": 1 },
            { "startOffset": 2461, "endOffset": 2719, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "collectCoverage",
          "ranges": [
            { "startOffset": 2723, "endOffset": 3113, "count": 1 },
            { "startOffset": 2809, "endOffset": 3112, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setup",
          "ranges": [
            { "startOffset": 3115, "endOffset": 5277, "count": 1 },
            { "startOffset": 3169, "endOffset": 3191, "count": 0 },
            { "startOffset": 4762, "endOffset": 4860, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "init",
          "ranges": [
            { "startOffset": 3449, "endOffset": 3754, "count": 1882 },
            { "startOffset": 3533, "endOffset": 3604, "count": 17 },
            { "startOffset": 3604, "endOffset": 3695, "count": 1865 },
            { "startOffset": 3695, "endOffset": 3748, "count": 1812 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "destroy",
          "ranges": [{ "startOffset": 3760, "endOffset": 3821, "count": 556 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "exitHandler",
          "ranges": [{ "startOffset": 4100, "endOffset": 4419, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "terminationHandler",
          "ranges": [{ "startOffset": 4451, "endOffset": 4501, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getGlobalRoot",
          "ranges": [
            { "startOffset": 5315, "endOffset": 5635, "count": 2 },
            { "startOffset": 5361, "endOffset": 5612, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 5438, "endOffset": 5553, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "startSubtest",
          "ranges": [{ "startOffset": 5637, "endOffset": 5778, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "runInParentContext",
          "ranges": [{ "startOffset": 5780, "endOffset": 6623, "count": 3 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "run",
          "ranges": [
            { "startOffset": 5821, "endOffset": 6136, "count": 17 },
            { "startOffset": 5923, "endOffset": 5941, "count": 1 },
            { "startOffset": 6060, "endOffset": 6103, "count": 1 },
            { "startOffset": 6103, "endOffset": 6135, "count": 16 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "test",
          "ranges": [{ "startOffset": 6153, "endOffset": 6314, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6366, "endOffset": 6604, "count": 9 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "test.<computed>",
          "ranges": [{ "startOffset": 6401, "endOffset": 6599, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "hook",
          "ranges": [{ "startOffset": 6625, "endOffset": 6909, "count": 4 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6656, "endOffset": 6906, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "424",
      "url": "node:internal/test_runner/test",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 26794, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "stopTest",
          "ranges": [
            { "startOffset": 2373, "endOffset": 3356, "count": 17 },
            { "startOffset": 2651, "endOffset": 3169, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2682, "endOffset": 2706, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2909, "endOffset": 3049, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "disposeFunction",
          "ranges": [{ "startOffset": 3083, "endOffset": 3164, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 3358, "endOffset": 4493, "count": 12 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "TestContext",
          "ranges": [{ "startOffset": 3390, "endOffset": 3436, "count": 12 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get signal",
          "ranges": [{ "startOffset": 3440, "endOffset": 3488, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get name",
          "ranges": [{ "startOffset": 3492, "endOffset": 3536, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "diagnostic",
          "ranges": [{ "startOffset": 3540, "endOffset": 3601, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get mock",
          "ranges": [{ "startOffset": 3605, "endOffset": 3692, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "runOnly",
          "ranges": [{ "startOffset": 3696, "endOffset": 3758, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "skip",
          "ranges": [{ "startOffset": 3762, "endOffset": 3811, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "todo",
          "ranges": [{ "startOffset": 3815, "endOffset": 3864, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "test",
          "ranges": [{ "startOffset": 3868, "endOffset": 4163, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "before",
          "ranges": [{ "startOffset": 4167, "endOffset": 4242, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "after",
          "ranges": [{ "startOffset": 4246, "endOffset": 4319, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "beforeEach",
          "ranges": [{ "startOffset": 4323, "endOffset": 4406, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "afterEach",
          "ranges": [{ "startOffset": 4410, "endOffset": 4491, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 4495, "endOffset": 4682, "count": 10 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "SuiteContext",
          "ranges": [{ "startOffset": 4529, "endOffset": 4578, "count": 10 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get signal",
          "ranges": [{ "startOffset": 4582, "endOffset": 4631, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get name",
          "ranges": [{ "startOffset": 4635, "endOffset": 4680, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 4684, "endOffset": 23261, "count": 18 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Test",
          "ranges": [
            { "startOffset": 4776, "endOffset": 8791, "count": 18 },
            { "startOffset": 4971, "endOffset": 4995, "count": 1 },
            { "startOffset": 5046, "endOffset": 5092, "count": 0 },
            { "startOffset": 5129, "endOffset": 5157, "count": 1 },
            { "startOffset": 5184, "endOffset": 5586, "count": 1 },
            { "startOffset": 5586, "endOffset": 6242, "count": 17 },
            { "startOffset": 5639, "endOffset": 5655, "count": 1 },
            { "startOffset": 5656, "endOffset": 5684, "count": 16 },
            { "startOffset": 6284, "endOffset": 6416, "count": 0 },
            { "startOffset": 6424, "endOffset": 6650, "count": 0 },
            { "startOffset": 6710, "endOffset": 6800, "count": 0 },
            { "startOffset": 6832, "endOffset": 6855, "count": 0 },
            { "startOffset": 6857, "endOffset": 6960, "count": 0 },
            { "startOffset": 7045, "endOffset": 7079, "count": 0 },
            { "startOffset": 7081, "endOffset": 7137, "count": 0 },
            { "startOffset": 7160, "endOffset": 7173, "count": 0 },
            { "startOffset": 7175, "endOffset": 7222, "count": 0 },
            { "startOffset": 7238, "endOffset": 7262, "count": 0 },
            { "startOffset": 7460, "endOffset": 7557, "count": 0 },
            { "startOffset": 7579, "endOffset": 7597, "count": 0 },
            { "startOffset": 7890, "endOffset": 7907, "count": 0 },
            { "startOffset": 7946, "endOffset": 7963, "count": 0 },
            { "startOffset": 8136, "endOffset": 8142, "count": 0 },
            { "startOffset": 8176, "endOffset": 8182, "count": 0 },
            { "startOffset": 8424, "endOffset": 8562, "count": 0 },
            { "startOffset": 8590, "endOffset": 8616, "count": 17 },
            { "startOffset": 8618, "endOffset": 8653, "count": 1 },
            { "startOffset": 8653, "endOffset": 8787, "count": 17 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "matchesTestNamePatterns",
          "ranges": [{ "startOffset": 8795, "endOffset": 8976, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "hasConcurrency",
          "ranges": [{ "startOffset": 8980, "endOffset": 9053, "count": 30 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "addPendingSubtest",
          "ranges": [{ "startOffset": 9057, "endOffset": 9146, "count": 11 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "processPendingSubtests",
          "ranges": [
            { "startOffset": 9150, "endOffset": 9477, "count": 17 },
            { "startOffset": 9226, "endOffset": 9250, "count": 13 },
            { "startOffset": 9252, "endOffset": 9473, "count": 11 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "addReadySubtest",
          "ranges": [{ "startOffset": 9481, "endOffset": 9568, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "processReadySubtestRange",
          "ranges": [
            { "startOffset": 9572, "endOffset": 10584, "count": 34 },
            { "startOffset": 9730, "endOffset": 10580, "count": 17 },
            { "startOffset": 9991, "endOffset": 10016, "count": 0 },
            { "startOffset": 10330, "endOffset": 10355, "count": 0 },
            { "startOffset": 10375, "endOffset": 10398, "count": 6 },
            { "startOffset": 10400, "endOffset": 10439, "count": 5 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "createSubtest",
          "ranges": [
            { "startOffset": 10588, "endOffset": 11819, "count": 17 },
            { "startOffset": 10679, "endOffset": 10703, "count": 0 },
            { "startOffset": 10756, "endOffset": 10805, "count": 0 },
            { "startOffset": 11226, "endOffset": 11312, "count": 0 },
            { "startOffset": 11442, "endOffset": 11491, "count": 6 },
            { "startOffset": 11524, "endOffset": 11750, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "#abortHandler",
          "ranges": [{ "startOffset": 11839, "endOffset": 11995, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "#cancel",
          "ranges": [{ "startOffset": 12000, "endOffset": 12417, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createHook",
          "ranges": [{ "startOffset": 12421, "endOffset": 12759, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fail",
          "ranges": [{ "startOffset": 12763, "endOffset": 12906, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pass",
          "ranges": [
            { "startOffset": 12910, "endOffset": 13029, "count": 17 },
            { "startOffset": 12950, "endOffset": 12971, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "skip",
          "ranges": [{ "startOffset": 13033, "endOffset": 13105, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "todo",
          "ranges": [{ "startOffset": 13109, "endOffset": 13180, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "diagnostic",
          "ranges": [{ "startOffset": 13184, "endOffset": 13260, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "start",
          "ranges": [
            { "startOffset": 13264, "endOffset": 13814, "count": 17 },
            { "startOffset": 13562, "endOffset": 13724, "count": 11 },
            { "startOffset": 13724, "endOffset": 13813, "count": 6 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 13818, "endOffset": 13986, "count": 29 },
            { "startOffset": 13866, "endOffset": 13892, "count": 0 },
            { "startOffset": 13917, "endOffset": 13926, "count": 0 },
            { "startOffset": 13928, "endOffset": 13982, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getRunArgs",
          "ranges": [{ "startOffset": 13990, "endOffset": 14097, "count": 12 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "runHook",
          "ranges": [
            { "startOffset": 14101, "endOffset": 14604, "count": 10 },
            { "startOffset": 14412, "endOffset": 14600, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 14240, "endOffset": 14385, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "run",
          "ranges": [
            { "startOffset": 14608, "endOffset": 17926, "count": 12 },
            { "startOffset": 14758, "endOffset": 14801, "count": 0 },
            { "startOffset": 15279, "endOffset": 15359, "count": 0 },
            { "startOffset": 15412, "endOffset": 15502, "count": 0 },
            { "startOffset": 15711, "endOffset": 16300, "count": 0 },
            { "startOffset": 16550, "endOffset": 16599, "count": 0 },
            { "startOffset": 16672, "endOffset": 17108, "count": 0 },
            { "startOffset": 17441, "endOffset": 17477, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "after",
          "ranges": [
            { "startOffset": 14866, "endOffset": 15003, "count": 12 },
            { "startOffset": 14919, "endOffset": 14997, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 15035, "endOffset": 15195, "count": 12 },
            { "startOffset": 15100, "endOffset": 15189, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "postRun",
          "ranges": [
            { "startOffset": 17930, "endOffset": 21058, "count": 18 },
            { "startOffset": 18136, "endOffset": 18174, "count": 1 },
            { "startOffset": 18447, "endOffset": 18702, "count": 17 },
            { "startOffset": 18519, "endOffset": 18622, "count": 0 },
            { "startOffset": 18649, "endOffset": 18667, "count": 0 },
            { "startOffset": 18669, "endOffset": 18696, "count": 0 },
            { "startOffset": 18725, "endOffset": 18748, "count": 1 },
            { "startOffset": 18765, "endOffset": 18952, "count": 0 },
            { "startOffset": 18974, "endOffset": 18995, "count": 0 },
            { "startOffset": 19039, "endOffset": 19046, "count": 0 },
            { "startOffset": 19081, "endOffset": 19807, "count": 17 },
            { "startOffset": 19292, "endOffset": 19335, "count": 1 },
            { "startOffset": 19336, "endOffset": 19387, "count": 1 },
            { "startOffset": 19388, "endOffset": 19435, "count": 1 },
            { "startOffset": 19436, "endOffset": 19481, "count": 1 },
            { "startOffset": 19483, "endOffset": 19801, "count": 0 },
            { "startOffset": 19807, "endOffset": 21054, "count": 1 },
            { "startOffset": 20257, "endOffset": 20325, "count": 0 },
            { "startOffset": 20965, "endOffset": 21025, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isClearToSend",
          "ranges": [
            { "startOffset": 21062, "endOffset": 21216, "count": 45 },
            { "startOffset": 21112, "endOffset": 21211, "count": 28 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "finalize",
          "ranges": [{ "startOffset": 21220, "endOffset": 21909, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "duration",
          "ranges": [{ "startOffset": 21913, "endOffset": 22067, "count": 18 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "report",
          "ranges": [
            { "startOffset": 22071, "endOffset": 23030, "count": 17 },
            { "startOffset": 22146, "endOffset": 22237, "count": 5 },
            { "startOffset": 22237, "endOffset": 22278, "count": 12 },
            { "startOffset": 22392, "endOffset": 22454, "count": 0 },
            { "startOffset": 22477, "endOffset": 22539, "count": 0 },
            { "startOffset": 22568, "endOffset": 22615, "count": 5 },
            { "startOffset": 22741, "endOffset": 22886, "count": 0 },
            { "startOffset": 22942, "endOffset": 23026, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "reportStarted",
          "ranges": [
            { "startOffset": 23034, "endOffset": 23259, "count": 34 },
            { "startOffset": 23082, "endOffset": 23105, "count": 18 },
            { "startOffset": 23107, "endOffset": 23258, "count": 17 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 23263, "endOffset": 24526, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 24528, "endOffset": 26640, "count": 5 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Suite",
          "ranges": [
            { "startOffset": 24583, "endOffset": 25470, "count": 5 },
            { "startOffset": 24661, "endOffset": 24677, "count": 0 },
            { "startOffset": 24678, "endOffset": 24694, "count": 0 },
            { "startOffset": 24696, "endOffset": 24770, "count": 0 },
            { "startOffset": 25322, "endOffset": 25442, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 25145, "endOffset": 25235, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 25246, "endOffset": 25305, "count": 5 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Suite.fn",
          "ranges": [{ "startOffset": 25457, "endOffset": 25465, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getRunArgs",
          "ranges": [{ "startOffset": 25474, "endOffset": 25582, "count": 10 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "run",
          "ranges": [
            { "startOffset": 25586, "endOffset": 26638, "count": 5 },
            { "startOffset": 25803, "endOffset": 25880, "count": 0 },
            { "startOffset": 25929, "endOffset": 26009, "count": 0 },
            { "startOffset": 26165, "endOffset": 26169, "count": 0 },
            { "startOffset": 26392, "endOffset": 26559, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 26234, "endOffset": 26264, "count": 16 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "425",
      "url": "node:internal/test_runner/mock/mock",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 13322, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "kDefaultFunction",
          "ranges": [{ "startOffset": 624, "endOffset": 654, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 656, "endOffset": 3250, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 3420, "endOffset": 12670, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get timers",
          "ranges": [{ "startOffset": 3593, "endOffset": 3675, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fn",
          "ranges": [{ "startOffset": 4130, "endOffset": 4899, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "method",
          "ranges": [{ "startOffset": 5673, "endOffset": 7845, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getter",
          "ranges": [{ "startOffset": 8622, "endOffset": 9242, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setter",
          "ranges": [{ "startOffset": 10014, "endOffset": 10634, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reset",
          "ranges": [{ "startOffset": 10721, "endOffset": 10806, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "restoreAll",
          "ranges": [{ "startOffset": 10883, "endOffset": 11012, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "#setupMock",
          "ranges": [{ "startOffset": 11016, "endOffset": 12668, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateStringOrSymbol",
          "ranges": [{ "startOffset": 12672, "endOffset": 12859, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateTimes",
          "ranges": [{ "startOffset": 12861, "endOffset": 12980, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "findMethodOnPrototypeChain",
          "ranges": [{ "startOffset": 12982, "endOffset": 13286, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "426",
      "url": "node:internal/test_runner/mock/mock_timers",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 14373, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "compareTimersLists",
          "ranges": [{ "startOffset": 769, "endOffset": 853, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setPosition",
          "ranges": [{ "startOffset": 855, "endOffset": 926, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "abortIt",
          "ranges": [{ "startOffset": 928, "endOffset": 1035, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 1186, "endOffset": 14338, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "427",
      "url": "node:timers/promises",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 6380, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "cancelListenerHandler",
          "ranges": [{ "startOffset": 690, "endOffset": 860, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setTimeout",
          "ranges": [{ "startOffset": 862, "endOffset": 2250, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setImmediate",
          "ranges": [{ "startOffset": 2252, "endOffset": 3602, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setInterval",
          "ranges": [{ "startOffset": 3604, "endOffset": 5080, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Scheduler",
          "ranges": [{ "startOffset": 5625, "endOffset": 5685, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "yield",
          "ranges": [{ "startOffset": 5731, "endOffset": 5845, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "wait",
          "ranges": [{ "startOffset": 6046, "endOffset": 6216, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6314, "endOffset": 6359, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "428",
      "url": "node:internal/test_runner/tests_stream",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2836, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 195, "endOffset": 2786, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "TestsStream",
          "ranges": [{ "startOffset": 258, "endOffset": 376, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_read",
          "ranges": [
            { "startOffset": 380, "endOffset": 575, "count": 58 },
            { "startOffset": 453, "endOffset": 571, "count": 57 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "fail",
          "ranges": [{ "startOffset": 579, "endOffset": 804, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ok",
          "ranges": [{ "startOffset": 808, "endOffset": 1031, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "plan",
          "ranges": [{ "startOffset": 1035, "endOffset": 1177, "count": 6 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "getSkip",
          "ranges": [{ "startOffset": 1181, "endOffset": 1268, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getTodo",
          "ranges": [{ "startOffset": 1272, "endOffset": 1359, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "enqueue",
          "ranges": [{ "startOffset": 1363, "endOffset": 1509, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "dequeue",
          "ranges": [{ "startOffset": 1513, "endOffset": 1659, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "start",
          "ranges": [{ "startOffset": 1663, "endOffset": 1805, "count": 17 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "diagnostic",
          "ranges": [{ "startOffset": 1809, "endOffset": 1967, "count": 8 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "stderr",
          "ranges": [{ "startOffset": 1971, "endOffset": 2074, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "stdout",
          "ranges": [{ "startOffset": 2078, "endOffset": 2181, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "coverage",
          "ranges": [{ "startOffset": 2185, "endOffset": 2339, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "end",
          "ranges": [{ "startOffset": 2343, "endOffset": 2379, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2383, "endOffset": 2595, "count": 82 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "#tryPush",
          "ranges": [
            { "startOffset": 2599, "endOffset": 2784, "count": 140 },
            { "startOffset": 2642, "endOffset": 2691, "count": 83 },
            { "startOffset": 2691, "endOffset": 2753, "count": 57 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "429",
      "url": "node:internal/test_runner/utils",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 13396, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "doesPathMatchFilter",
          "ranges": [{ "startOffset": 1300, "endOffset": 1405, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isSupportedFileType",
          "ranges": [{ "startOffset": 1407, "endOffset": 1510, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createDeferredCallback",
          "ranges": [{ "startOffset": 1512, "endOffset": 2126, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isTestFailureError",
          "ranges": [{ "startOffset": 2128, "endOffset": 2230, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "convertStringToRegExp",
          "ranges": [{ "startOffset": 2232, "endOffset": 2640, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "tryBuiltinReporter",
          "ranges": [
            { "startOffset": 3096, "endOffset": 3268, "count": 1 },
            { "startOffset": 3217, "endOffset": 3234, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getReportersMap",
          "ranges": [{ "startOffset": 3270, "endOffset": 4419, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 3388, "endOffset": 4415, "count": 1 },
            { "startOffset": 3475, "endOffset": 3512, "count": 0 },
            { "startOffset": 3727, "endOffset": 4032, "count": 0 },
            { "startOffset": 4061, "endOffset": 4103, "count": 0 },
            { "startOffset": 4203, "endOffset": 4243, "count": 0 },
            { "startOffset": 4264, "endOffset": 4355, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4529, "endOffset": 4860, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "parseCommandLine",
          "ranges": [
            { "startOffset": 4888, "endOffset": 6822, "count": 3 },
            { "startOffset": 4943, "endOffset": 4978, "count": 2 },
            { "startOffset": 4978, "endOffset": 5516, "count": 1 },
            { "startOffset": 5516, "endOffset": 6228, "count": 0 },
            { "startOffset": 6228, "endOffset": 6250, "count": 1 },
            { "startOffset": 6250, "endOffset": 6310, "count": 0 },
            { "startOffset": 6310, "endOffset": 6635, "count": 1 },
            { "startOffset": 6494, "endOffset": 6623, "count": 0 },
            { "startOffset": 6635, "endOffset": 6821, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6558, "endOffset": 6614, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "countCompletedTest",
          "ranges": [
            { "startOffset": 6824, "endOffset": 7436, "count": 17 },
            { "startOffset": 6915, "endOffset": 6953, "count": 1 },
            { "startOffset": 6991, "endOffset": 7039, "count": 5 },
            { "startOffset": 7039, "endOffset": 7147, "count": 12 },
            { "startOffset": 7147, "endOffset": 7184, "count": 0 },
            { "startOffset": 7184, "endOffset": 7408, "count": 12 },
            { "startOffset": 7207, "endOffset": 7241, "count": 0 },
            { "startOffset": 7267, "endOffset": 7306, "count": 0 },
            { "startOffset": 7330, "endOffset": 7366, "count": 0 },
            { "startOffset": 7408, "endOffset": 7435, "count": 12 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "addTableLine",
          "ranges": [{ "startOffset": 7467, "endOffset": 7711, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "truncateStart",
          "ranges": [{ "startOffset": 7751, "endOffset": 7918, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "truncateEnd",
          "ranges": [{ "startOffset": 7920, "endOffset": 8072, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "formatLinesToRanges",
          "ranges": [{ "startOffset": 8074, "endOffset": 8428, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "formatUncoveredLines",
          "ranges": [{ "startOffset": 8430, "endOffset": 8592, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getCoverageReport",
          "ranges": [{ "startOffset": 8768, "endOffset": 13151, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "430",
      "url": "node:os",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 9769, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getCheckedFunction",
          "ranges": [{ "startOffset": 2026, "endOffset": 2267, "count": 4 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "checkError",
          "ranges": [{ "startOffset": 2085, "endOffset": 2263, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getOSRelease",
          "ranges": [{ "startOffset": 2649, "endOffset": 2662, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getOSType",
          "ranges": [{ "startOffset": 2711, "endOffset": 2721, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getOSVersion",
          "ranges": [{ "startOffset": 2773, "endOffset": 2786, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getMachine",
          "ranges": [{ "startOffset": 2836, "endOffset": 2849, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getAvailableParallelism.<computed>",
          "ranges": [{ "startOffset": 2897, "endOffset": 2928, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getFreeMem.<computed>",
          "ranges": [{ "startOffset": 2962, "endOffset": 2980, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHostname.<computed>",
          "ranges": [{ "startOffset": 3015, "endOffset": 3034, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getOSVersion.<computed>",
          "ranges": [{ "startOffset": 3070, "endOffset": 3090, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getOSType.<computed>",
          "ranges": [{ "startOffset": 3123, "endOffset": 3140, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getOSRelease.<computed>",
          "ranges": [{ "startOffset": 3176, "endOffset": 3196, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getMachine.<computed>",
          "ranges": [{ "startOffset": 3230, "endOffset": 3248, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHomeDirectory.<computed>",
          "ranges": [{ "startOffset": 3288, "endOffset": 3312, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getTotalMem.<computed>",
          "ranges": [{ "startOffset": 3347, "endOffset": 3366, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getUptime.<computed>",
          "ranges": [{ "startOffset": 3399, "endOffset": 3416, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "loadavg",
          "ranges": [{ "startOffset": 3554, "endOffset": 3654, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "cpus",
          "ranges": [{ "startOffset": 3934, "endOffset": 4363, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "arch",
          "ranges": [{ "startOffset": 4394, "endOffset": 4436, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "arch.<computed>",
          "ranges": [{ "startOffset": 4463, "endOffset": 4481, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "platform",
          "ranges": [{ "startOffset": 4513, "endOffset": 4563, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "platform.<computed>",
          "ranges": [{ "startOffset": 4594, "endOffset": 4616, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "tmpdir",
          "ranges": [{ "startOffset": 4648, "endOffset": 5253, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "tmpdir.<computed>",
          "ranges": [{ "startOffset": 5282, "endOffset": 5296, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "endianness",
          "ranges": [{ "startOffset": 5333, "endOffset": 5380, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "endianness.<computed>",
          "ranges": [{ "startOffset": 5413, "endOffset": 5430, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "countBinaryOnes",
          "ranges": [{ "startOffset": 5518, "endOffset": 5771, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getCIDR",
          "ranges": [{ "startOffset": 5773, "endOffset": 6718, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "networkInterfaces",
          "ranges": [{ "startOffset": 6929, "endOffset": 7622, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setPriority",
          "ranges": [{ "startOffset": 7706, "endOffset": 7995, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getPriority",
          "ranges": [{ "startOffset": 8053, "endOffset": 8308, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "userInfo",
          "ranges": [{ "startOffset": 8612, "endOffset": 8900, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "431",
      "url": "node:internal/test_runner/runner",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 18132, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "processPath",
          "ranges": [{ "startOffset": 2749, "endOffset": 3676, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createTestFileList",
          "ranges": [{ "startOffset": 3678, "endOffset": 4353, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "filterExecArgv",
          "ranges": [{ "startOffset": 4355, "endOffset": 4582, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getRunArgs",
          "ranges": [{ "startOffset": 4584, "endOffset": 5114, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 5347, "endOffset": 11588, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "runTestFile",
          "ranges": [{ "startOffset": 11590, "endOffset": 14123, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "watchFiles",
          "ranges": [{ "startOffset": 14125, "endOffset": 15479, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "run",
          "ranges": [{ "startOffset": 15481, "endOffset": 18062, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "432",
      "url": "node:child_process",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 27198, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1936, "endOffset": 1965, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fork",
          "ranges": [{ "startOffset": 3430, "endOffset": 5105, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_forkChild",
          "ranges": [{ "startOffset": 5107, "endOffset": 5596, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "normalizeExecArgs",
          "ranges": [{ "startOffset": 5598, "endOffset": 6112, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "exec",
          "ranges": [{ "startOffset": 6649, "endOffset": 6896, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "customPromiseExecFunction",
          "ranges": [{ "startOffset": 6932, "endOffset": 7296, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6953, "endOffset": 7293, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "normalizeExecFileArgs",
          "ranges": [{ "startOffset": 7433, "endOffset": 8331, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "execFile",
          "ranges": [{ "startOffset": 8944, "endOffset": 13708, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "copyProcessEnvToEnv",
          "ranges": [{ "startOffset": 13852, "endOffset": 14052, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "normalizeSpawnArguments",
          "ranges": [{ "startOffset": 14054, "endOffset": 19321, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "abortChildProcess",
          "ranges": [{ "startOffset": 19323, "endOffset": 19579, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "spawn",
          "ranges": [{ "startOffset": 20134, "endOffset": 21334, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "spawnSync",
          "ranges": [{ "startOffset": 22094, "endOffset": 23602, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "checkExecSyncError",
          "ranges": [{ "startOffset": 23605, "endOffset": 23991, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "execFileSync",
          "ranges": [{ "startOffset": 24504, "endOffset": 24968, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "execSync",
          "ranges": [{ "startOffset": 25466, "endOffset": 25842, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateArgumentNullCheck",
          "ranges": [{ "startOffset": 25845, "endOffset": 26068, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateArgumentsNullCheck",
          "ranges": [{ "startOffset": 26071, "endOffset": 26233, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateTimeout",
          "ranges": [{ "startOffset": 26236, "endOffset": 26424, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateMaxBuffer",
          "ranges": [{ "startOffset": 26427, "endOffset": 26700, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "sanitizeKillSignal",
          "ranges": [{ "startOffset": 26703, "endOffset": 27066, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "433",
      "url": "node:internal/child_process",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 31566, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "send",
          "ranges": [{ "startOffset": 2400, "endOffset": 2459, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "got",
          "ranges": [{ "startOffset": 2466, "endOffset": 2520, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "send",
          "ranges": [{ "startOffset": 2582, "endOffset": 2649, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "got",
          "ranges": [{ "startOffset": 2656, "endOffset": 2797, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "send",
          "ranges": [{ "startOffset": 2827, "endOffset": 4381, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "postSend",
          "ranges": [{ "startOffset": 4388, "endOffset": 5134, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "got",
          "ranges": [{ "startOffset": 5141, "endOffset": 5598, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "send",
          "ranges": [{ "startOffset": 5663, "endOffset": 5722, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "got",
          "ranges": [{ "startOffset": 5729, "endOffset": 5783, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "send",
          "ranges": [{ "startOffset": 5848, "endOffset": 5968, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "got",
          "ranges": [{ "startOffset": 5975, "endOffset": 6134, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "stdioStringToArray",
          "ranges": [{ "startOffset": 6145, "endOffset": 6560, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ChildProcess",
          "ranges": [{ "startOffset": 6562, "endOffset": 7940, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "flushStdio",
          "ranges": [{ "startOffset": 8063, "endOffset": 8541, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createSocket",
          "ranges": [{ "startOffset": 8544, "endOffset": 8634, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHandleWrapType",
          "ranges": [{ "startOffset": 8637, "endOffset": 8866, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "closePendingHandle",
          "ranges": [{ "startOffset": 8868, "endOffset": 8981, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ChildProcess.spawn",
          "ranges": [{ "startOffset": 9015, "endOffset": 12582, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onErrorNT",
          "ranges": [{ "startOffset": 12586, "endOffset": 12647, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onSpawnNT",
          "ranges": [{ "startOffset": 12650, "endOffset": 12700, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ChildProcess.kill",
          "ranges": [{ "startOffset": 12733, "endOffset": 13398, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ChildProcess.<computed>",
          "ranges": [{ "startOffset": 13441, "endOffset": 13498, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ChildProcess.ref",
          "ranges": [{ "startOffset": 13531, "endOffset": 13585, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ChildProcess.unref",
          "ranges": [{ "startOffset": 13620, "endOffset": 13676, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 13679, "endOffset": 14676, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setupChannel",
          "ranges": [{ "startOffset": 14824, "endOffset": 26944, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isInternal",
          "ranges": [{ "startOffset": 26979, "endOffset": 27289, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getValidStdio",
          "ranges": [{ "startOffset": 27323, "endOffset": 30248, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getSocketList",
          "ranges": [{ "startOffset": 30251, "endOffset": 30567, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "maybeClose",
          "ranges": [{ "startOffset": 30570, "endOffset": 30771, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "spawnSync",
          "ranges": [{ "startOffset": 30773, "endOffset": 31440, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "434",
      "url": "node:dgram",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 28289, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyLoadCluster",
          "ranges": [{ "startOffset": 2860, "endOffset": 2957, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket",
          "ranges": [{ "startOffset": 3067, "endOffset": 4495, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createSocket",
          "ranges": [{ "startOffset": 4606, "endOffset": 4684, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "startListening",
          "ranges": [{ "startOffset": 4687, "endOffset": 5130, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "replaceHandle",
          "ranges": [{ "startOffset": 5132, "endOffset": 5697, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "bufferSize",
          "ranges": [{ "startOffset": 5699, "endOffset": 5991, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "bindServerHandle",
          "ranges": [{ "startOffset": 6059, "endOffset": 6469, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.bind",
          "ranges": [{ "startOffset": 6495, "endOffset": 9938, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.connect",
          "ranges": [{ "startOffset": 9968, "endOffset": 10764, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_connect",
          "ranges": [{ "startOffset": 10768, "endOffset": 11114, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "doConnect",
          "ranges": [{ "startOffset": 11117, "endOffset": 11759, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.disconnect",
          "ranges": [{ "startOffset": 11792, "endOffset": 12099, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.sendto",
          "ranges": [{ "startOffset": 12204, "endOffset": 12645, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "sliceBuffer",
          "ranges": [{ "startOffset": 12649, "endOffset": 13409, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fixBufferList",
          "ranges": [{ "startOffset": 13412, "endOffset": 13796, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "enqueue",
          "ranges": [{ "startOffset": 13799, "endOffset": 14226, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onListenSuccess",
          "ranges": [{ "startOffset": 14229, "endOffset": 14367, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onListenError",
          "ranges": [{ "startOffset": 14370, "endOffset": 14494, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearQueue",
          "ranges": [{ "startOffset": 14497, "endOffset": 14694, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.send",
          "ranges": [{ "startOffset": 15265, "endOffset": 18158, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "doSend",
          "ranges": [{ "startOffset": 18161, "endOffset": 19300, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "afterSend",
          "ranges": [{ "startOffset": 19302, "endOffset": 19479, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.close",
          "ranges": [{ "startOffset": 19506, "endOffset": 20074, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.<computed>",
          "ranges": [{ "startOffset": 20116, "endOffset": 20249, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "socketCloseNT",
          "ranges": [{ "startOffset": 20253, "endOffset": 20307, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.address",
          "ranges": [{ "startOffset": 20337, "endOffset": 20527, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.remoteAddress",
          "ranges": [{ "startOffset": 20563, "endOffset": 20873, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.setBroadcast",
          "ranges": [{ "startOffset": 20909, "endOffset": 21057, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.setTTL",
          "ranges": [{ "startOffset": 21087, "endOffset": 21261, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.setMulticastTTL",
          "ranges": [{ "startOffset": 21300, "endOffset": 21492, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.setMulticastLoopback",
          "ranges": [{ "startOffset": 21536, "endOffset": 21736, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.setMulticastInterface",
          "ranges": [{ "startOffset": 21781, "endOffset": 22043, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.addMembership",
          "ranges": [{ "startOffset": 22079, "endOffset": 22453, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.dropMembership",
          "ranges": [{ "startOffset": 22491, "endOffset": 22868, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.addSourceSpecificMembership",
          "ranges": [{ "startOffset": 22918, "endOffset": 23525, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.dropSourceSpecificMembership",
          "ranges": [{ "startOffset": 23577, "endOffset": 24190, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "healthCheck",
          "ranges": [{ "startOffset": 24194, "endOffset": 24357, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "stopReceiving",
          "ranges": [{ "startOffset": 24360, "endOffset": 24524, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onMessage",
          "ranges": [{ "startOffset": 24527, "endOffset": 24781, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onError",
          "ranges": [{ "startOffset": 24784, "endOffset": 24899, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.ref",
          "ranges": [{ "startOffset": 24925, "endOffset": 25032, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.unref",
          "ranges": [{ "startOffset": 25061, "endOffset": 25170, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.setRecvBufferSize",
          "ranges": [{ "startOffset": 25211, "endOffset": 25268, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.setSendBufferSize",
          "ranges": [{ "startOffset": 25309, "endOffset": 25366, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.getRecvBufferSize",
          "ranges": [{ "startOffset": 25407, "endOffset": 25464, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.getSendBufferSize",
          "ranges": [{ "startOffset": 25505, "endOffset": 25562, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.getSendQueueSize",
          "ranges": [{ "startOffset": 25601, "endOffset": 25670, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Socket.getSendQueueCount",
          "ranges": [{ "startOffset": 25710, "endOffset": 25780, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 25899, "endOffset": 25953, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 26026, "endOffset": 26082, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 26235, "endOffset": 26292, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 26368, "endOffset": 26427, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 26583, "endOffset": 26640, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 26716, "endOffset": 26775, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 26927, "endOffset": 26980, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 27052, "endOffset": 27107, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 27259, "endOffset": 27316, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 27392, "endOffset": 27451, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 27558, "endOffset": 27593, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 27702, "endOffset": 27739, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 28024, "endOffset": 28060, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 28064, "endOffset": 28105, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "435",
      "url": "node:internal/dgram",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1850, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lookup4",
          "ranges": [{ "startOffset": 477, "endOffset": 578, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lookup6",
          "ranges": [{ "startOffset": 581, "endOffset": 676, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "newHandle",
          "ranges": [{ "startOffset": 678, "endOffset": 1322, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_createSocketHandle",
          "ranges": [{ "startOffset": 1325, "endOffset": 1773, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "436",
      "url": "node:diagnostics_channel",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 9747, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 713, "endOffset": 1122, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "#finalizers",
          "ranges": [{ "startOffset": 793, "endOffset": 829, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 835, "endOffset": 952, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [
            { "startOffset": 956, "endOffset": 1004, "count": 1 },
            { "startOffset": 992, "endOffset": 997, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "incRef",
          "ranges": [{ "startOffset": 1008, "endOffset": 1062, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "decRef",
          "ranges": [{ "startOffset": 1066, "endOffset": 1120, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "markActive",
          "ranges": [{ "startOffset": 1124, "endOffset": 1329, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "maybeMarkInactive",
          "ranges": [{ "startOffset": 1331, "endOffset": 1699, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "defaultTransform",
          "ranges": [{ "startOffset": 1701, "endOffset": 1751, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "wrapStoreRun",
          "ranges": [{ "startOffset": 1753, "endOffset": 2081, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "subscribe",
          "ranges": [{ "startOffset": 2163, "endOffset": 2333, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unsubscribe",
          "ranges": [{ "startOffset": 2337, "endOffset": 2614, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "bindStore",
          "ranges": [{ "startOffset": 2618, "endOffset": 2786, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unbindStore",
          "ranges": [{ "startOffset": 2790, "endOffset": 2989, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get hasSubscribers",
          "ranges": [{ "startOffset": 2993, "endOffset": 3036, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "publish",
          "ranges": [{ "startOffset": 3040, "endOffset": 3341, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "runStores",
          "ranges": [{ "startOffset": 3345, "endOffset": 3684, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Channel",
          "ranges": [{ "startOffset": 3706, "endOffset": 3847, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3858, "endOffset": 4043, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "subscribe",
          "ranges": [{ "startOffset": 4047, "endOffset": 4132, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unsubscribe",
          "ranges": [{ "startOffset": 4136, "endOffset": 4173, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "bindStore",
          "ranges": [{ "startOffset": 4177, "endOffset": 4270, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unbindStore",
          "ranges": [{ "startOffset": 4274, "endOffset": 4311, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get hasSubscribers",
          "ranges": [{ "startOffset": 4315, "endOffset": 4359, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "publish",
          "ranges": [{ "startOffset": 4363, "endOffset": 4375, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "runStores",
          "ranges": [{ "startOffset": 4379, "endOffset": 4466, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "channel",
          "ranges": [
            { "startOffset": 4506, "endOffset": 4772, "count": 1 },
            { "startOffset": 4584, "endOffset": 4599, "count": 0 },
            { "startOffset": 4632, "endOffset": 4659, "count": 0 },
            { "startOffset": 4661, "endOffset": 4741, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "subscribe",
          "ranges": [{ "startOffset": 4774, "endOffset": 4864, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unsubscribe",
          "ranges": [{ "startOffset": 4866, "endOffset": 4960, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "hasSubscribers",
          "ranges": [{ "startOffset": 4962, "endOffset": 5097, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "assertChannel",
          "ranges": [{ "startOffset": 5186, "endOffset": 5328, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "TracingChannel",
          "ranges": [{ "startOffset": 5355, "endOffset": 6502, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "subscribe",
          "ranges": [{ "startOffset": 6506, "endOffset": 6658, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unsubscribe",
          "ranges": [{ "startOffset": 6662, "endOffset": 6895, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "traceSync",
          "ranges": [{ "startOffset": 6899, "endOffset": 7325, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "tracePromise",
          "ranges": [{ "startOffset": 7329, "endOffset": 8430, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "traceCallback",
          "ranges": [{ "startOffset": 8434, "endOffset": 9545, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "tracingChannel",
          "ranges": [{ "startOffset": 9549, "endOffset": 9637, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "437",
      "url": "node:internal/socket_list",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2709, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "SocketListSend",
          "ranges": [{ "startOffset": 235, "endOffset": 376, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_request",
          "ranges": [{ "startOffset": 380, "endOffset": 1035, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "close",
          "ranges": [{ "startOffset": 1039, "endOffset": 1190, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getConnections",
          "ranges": [{ "startOffset": 1194, "endOffset": 1430, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "SocketListReceive",
          "ranges": [{ "startOffset": 1544, "endOffset": 2404, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "add",
          "ranges": [{ "startOffset": 2408, "endOffset": 2649, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "438",
      "url": "node:v8",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 12873, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeHeapSnapshot",
          "ranges": [{ "startOffset": 2159, "endOffset": 2361, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHeapSnapshot",
          "ranges": [{ "startOffset": 2497, "endOffset": 2631, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setFlagsFromString",
          "ranges": [{ "startOffset": 3971, "endOffset": 4073, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHeapStatistics",
          "ranges": [{ "startOffset": 4523, "endOffset": 5476, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHeapSpaceStatistics",
          "ranges": [{ "startOffset": 5706, "endOffset": 6272, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHeapCodeStatistics",
          "ranges": [{ "startOffset": 6511, "endOffset": 6929, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setHeapSnapshotNearHeapLimit",
          "ranges": [{ "startOffset": 6983, "endOffset": 7286, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "readRawBytes",
          "ranges": [{ "startOffset": 7557, "endOffset": 7873, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "arrayBufferViewTypeToIndex",
          "ranges": [{ "startOffset": 7876, "endOffset": 8608, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "arrayBufferViewIndexToType",
          "ranges": [{ "startOffset": 8610, "endOffset": 9190, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "DefaultSerializer",
          "ranges": [{ "startOffset": 9239, "endOffset": 9327, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_writeHostObject",
          "ranges": [{ "startOffset": 9497, "endOffset": 10531, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_readHostObject",
          "ranges": [{ "startOffset": 10722, "endOffset": 11541, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "serialize",
          "ranges": [{ "startOffset": 11665, "endOffset": 11809, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "deserialize",
          "ranges": [{ "startOffset": 11985, "endOffset": 12110, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 12112, "endOffset": 12430, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "439",
      "url": "node:internal/heap_utils",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 828, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "HeapSnapshotStream",
          "ranges": [{ "startOffset": 323, "endOffset": 477, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_read",
          "ranges": [{ "startOffset": 481, "endOffset": 550, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_destroy",
          "ranges": [{ "startOffset": 554, "endOffset": 734, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 738, "endOffset": 780, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "440",
      "url": "node:internal/promise_hooks",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3074, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "initAll",
          "ranges": [{ "startOffset": 476, "endOffset": 974, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "makeRunHook",
          "ranges": [{ "startOffset": 976, "endOffset": 1512, "count": 3 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1014, "endOffset": 1509, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "maybeFastPath",
          "ranges": [
            { "startOffset": 1650, "endOffset": 1735, "count": 24 },
            { "startOffset": 1714, "endOffset": 1722, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "update",
          "ranges": [{ "startOffset": 1737, "endOffset": 2029, "count": 6 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "stop",
          "ranges": [{ "startOffset": 2031, "endOffset": 2191, "count": 3 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "makeUseHook",
          "ranges": [{ "startOffset": 2193, "endOffset": 2433, "count": 4 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2259, "endOffset": 2430, "count": 3 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "createHook",
          "ranges": [
            { "startOffset": 2592, "endOffset": 2990, "count": 1 },
            { "startOffset": 2867, "endOffset": 2913, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 2924, "endOffset": 2987, "count": 1 },
            { "startOffset": 2962, "endOffset": 2983, "count": 3 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "441",
      "url": "node:readline",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 12835, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Interface",
          "ranges": [{ "startOffset": 2578, "endOffset": 3323, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Interface.question",
          "ranges": [{ "startOffset": 3696, "endOffset": 4484, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "question",
          "ranges": [{ "startOffset": 4535, "endOffset": 5299, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createInterface",
          "ranges": [{ "startOffset": 5833, "endOffset": 5957, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6150, "endOffset": 6194, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6241, "endOffset": 6281, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6335, "endOffset": 6382, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6433, "endOffset": 6477, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6529, "endOffset": 6574, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6626, "endOffset": 6671, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6724, "endOffset": 6770, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6822, "endOffset": 6867, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 6916, "endOffset": 6958, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7008, "endOffset": 7051, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7102, "endOffset": 7146, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7198, "endOffset": 7243, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7298, "endOffset": 7346, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7402, "endOffset": 7451, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7506, "endOffset": 7554, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7610, "endOffset": 7659, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7704, "endOffset": 7742, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7794, "endOffset": 7839, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7891, "endOffset": 7936, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7990, "endOffset": 8037, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 8088, "endOffset": 8132, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 8181, "endOffset": 8223, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 8362, "endOffset": 8404, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 8410, "endOffset": 8458, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 8508, "endOffset": 8554, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 8560, "endOffset": 8612, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 8660, "endOffset": 8704, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 8710, "endOffset": 8760, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 8810, "endOffset": 8856, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 8862, "endOffset": 8914, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 8959, "endOffset": 9000, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 9006, "endOffset": 9053, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 9108, "endOffset": 9159, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 9165, "endOffset": 9222, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 9272, "endOffset": 9318, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 9324, "endOffset": 9376, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 9426, "endOffset": 9472, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 9478, "endOffset": 9530, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Interface._tabComplete",
          "ranges": [{ "startOffset": 10126, "endOffset": 10607, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_ttyWriteDumb",
          "ranges": [{ "startOffset": 11673, "endOffset": 12687, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "442",
      "url": "node:internal/readline/callbacks",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2754, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "cursorTo",
          "ranges": [{ "startOffset": 460, "endOffset": 1146, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "moveCursor",
          "ranges": [{ "startOffset": 1210, "endOffset": 1722, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearLine",
          "ranges": [{ "startOffset": 1869, "endOffset": 2272, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearScreenDown",
          "ranges": [{ "startOffset": 2349, "endOffset": 2672, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "443",
      "url": "node:internal/readline/utils",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 12396, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "CSI",
          "ranges": [
            { "startOffset": 385, "endOffset": 579, "count": 4 },
            { "startOffset": 544, "endOffset": 559, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "charLengthLeft",
          "ranges": [{ "startOffset": 958, "endOffset": 1220, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "charLengthAt",
          "ranges": [{ "startOffset": 1222, "endOffset": 1484, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitKeys",
          "ranges": [{ "startOffset": 2213, "endOffset": 11840, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "commonPrefix",
          "ranges": [{ "startOffset": 11870, "endOffset": 12283, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "444",
      "url": "node:internal/readline/emitKeypressEvents",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2663, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitKeypressEvents",
          "ranges": [{ "startOffset": 644, "endOffset": 2624, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "445",
      "url": "node:internal/readline/interface",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 39788, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "InterfaceConstructor",
          "ranges": [{ "startOffset": 3779, "endOffset": 9423, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Interface",
          "ranges": [{ "startOffset": 9664, "endOffset": 9764, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get columns",
          "ranges": [{ "startOffset": 9767, "endOffset": 9879, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setPrompt",
          "ranges": [{ "startOffset": 9988, "endOffset": 10039, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getPrompt",
          "ranges": [{ "startOffset": 10133, "endOffset": 10176, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 10180, "endOffset": 10371, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "prompt",
          "ranges": [{ "startOffset": 10510, "endOffset": 10764, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "question",
          "ranges": [{ "startOffset": 10768, "endOffset": 11072, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 11076, "endOffset": 11318, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 11322, "endOffset": 11409, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 11413, "endOffset": 11581, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 11585, "endOffset": 11782, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 11786, "endOffset": 12964, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 12968, "endOffset": 13973, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "close",
          "ranges": [{ "startOffset": 14057, "endOffset": 14228, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pause",
          "ranges": [{ "startOffset": 14309, "endOffset": 14440, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resume",
          "ranges": [{ "startOffset": 14532, "endOffset": 14668, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "write",
          "ranges": [{ "startOffset": 14939, "endOffset": 15098, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 15102, "endOffset": 16836, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 16840, "endOffset": 17509, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 17513, "endOffset": 17912, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 17916, "endOffset": 20124, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 20128, "endOffset": 20589, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 20593, "endOffset": 20851, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 20855, "endOffset": 21337, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 21341, "endOffset": 21822, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 21826, "endOffset": 22586, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 22590, "endOffset": 23017, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 23021, "endOffset": 23299, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 23303, "endOffset": 23561, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 23565, "endOffset": 23825, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 23829, "endOffset": 23984, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 23988, "endOffset": 24663, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearLine",
          "ranges": [{ "startOffset": 24667, "endOffset": 24816, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 24820, "endOffset": 24974, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 24978, "endOffset": 25165, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 25169, "endOffset": 25477, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 25481, "endOffset": 25789, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 26224, "endOffset": 26858, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 26862, "endOffset": 27570, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 27645, "endOffset": 28585, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getCursorPos",
          "ranges": [{ "startOffset": 28762, "endOffset": 28931, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 29050, "endOffset": 29607, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 29644, "endOffset": 37894, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 38202, "endOffset": 39220, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "446",
      "url": "node:readline/promises",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1620, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Interface",
          "ranges": [{ "startOffset": 518, "endOffset": 618, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "question",
          "ranges": [{ "startOffset": 621, "endOffset": 1424, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createInterface",
          "ranges": [{ "startOffset": 1428, "endOffset": 1552, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "447",
      "url": "node:internal/readline/promises",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3509, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 452, "endOffset": 3473, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "448",
      "url": "node:internal/error_serdes",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 5722, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "TryGetAllProperties",
          "ranges": [{ "startOffset": 1039, "endOffset": 2142, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "GetConstructors",
          "ranges": [{ "startOffset": 2144, "endOffset": 2587, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "GetName",
          "ranges": [{ "startOffset": 2589, "endOffset": 2709, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "inspect",
          "ranges": [{ "startOffset": 2736, "endOffset": 2906, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "serializeError",
          "ranges": [{ "startOffset": 2923, "endOffset": 4218, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fromBuffer",
          "ranges": [{ "startOffset": 4220, "endOffset": 4441, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "deserializeError",
          "ranges": [{ "startOffset": 4460, "endOffset": 5665, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "449",
      "url": "node:internal/watch_mode/files_watcher",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 4719, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 615, "endOffset": 4682, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "450",
      "url": "file:///Users/markus/Code/pixoo-daemon/lib/mqtt-service.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 8819, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "MqttService",
          "ranges": [
            { "startOffset": 1380, "endOffset": 1797, "count": 12 },
            { "startOffset": 1457, "endOffset": 1479, "count": 0 },
            { "startOffset": 1535, "endOffset": 1561, "count": 11 },
            { "startOffset": 1659, "endOffset": 1664, "count": 11 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "connect",
          "ranges": [{ "startOffset": 1871, "endOffset": 3205, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "disconnect",
          "ranges": [{ "startOffset": 3284, "endOffset": 3592, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "subscribe",
          "ranges": [{ "startOffset": 3837, "endOffset": 4623, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unsubscribe",
          "ranges": [{ "startOffset": 4804, "endOffset": 5421, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "publish",
          "ranges": [{ "startOffset": 5750, "endOffset": 6525, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "registerHandler",
          "ranges": [
            { "startOffset": 6841, "endOffset": 7167, "count": 10 },
            { "startOffset": 6916, "endOffset": 7041, "count": 1 },
            { "startOffset": 7041, "endOffset": 7166, "count": 9 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "unregisterHandler",
          "ranges": [{ "startOffset": 7262, "endOffset": 7412, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_handleMessage",
          "ranges": [
            { "startOffset": 7588, "endOffset": 8443, "count": 3 },
            { "startOffset": 7873, "endOffset": 7880, "count": 1 },
            { "startOffset": 7959, "endOffset": 8018, "count": 2 },
            { "startOffset": 8018, "endOffset": 8133, "count": 0 },
            { "startOffset": 8133, "endOffset": 8271, "count": 2 },
            { "startOffset": 8271, "endOffset": 8439, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isConnected",
          "ranges": [{ "startOffset": 8540, "endOffset": 8586, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "getHandlers",
          "ranges": [{ "startOffset": 8714, "endOffset": 8785, "count": 2 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "451",
      "url": "node:internal/modules/esm/resolve",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 47236, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitTrailingSlashPatternDeprecation",
          "ranges": [{ "startOffset": 2719, "endOffset": 3305, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitInvalidSegmentDeprecation",
          "ranges": [{ "startOffset": 3818, "endOffset": 4552, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitLegacyIndexDeprecation",
          "ranges": [{ "startOffset": 4989, "endOffset": 6122, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fileExists",
          "ranges": [{ "startOffset": 6221, "endOffset": 6324, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "legacyMainResolve",
          "ranges": [{ "startOffset": 6712, "endOffset": 8529, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resolveExtensionsWithTryExactName",
          "ranges": [{ "startOffset": 8592, "endOffset": 8727, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resolveExtensions",
          "ranges": [{ "startOffset": 8845, "endOffset": 9106, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resolveDirectoryEntry",
          "ranges": [{ "startOffset": 9169, "endOffset": 9676, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "finalizeResolution",
          "ranges": [{ "startOffset": 10460, "endOffset": 12656, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "importNotDefined",
          "ranges": [{ "startOffset": 13070, "endOffset": 13281, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "exportsNotFound",
          "ranges": [{ "startOffset": 13677, "endOffset": 13872, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "throwInvalidSubpath",
          "ranges": [{ "startOffset": 14510, "endOffset": 14893, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "invalidPackageTarget",
          "ranges": [{ "startOffset": 15349, "endOffset": 15727, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resolvePackageTargetString",
          "ranges": [
            { "startOffset": 17083, "endOffset": 19836, "count": 8 },
            { "startOffset": 17252, "endOffset": 17263, "count": 0 },
            { "startOffset": 17264, "endOffset": 17300, "count": 0 },
            { "startOffset": 17302, "endOffset": 17386, "count": 0 },
            { "startOffset": 17436, "endOffset": 17993, "count": 0 },
            { "startOffset": 18085, "endOffset": 18695, "count": 0 },
            { "startOffset": 18914, "endOffset": 18998, "count": 0 },
            { "startOffset": 19042, "endOffset": 19835, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 17768, "endOffset": 17781, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 18294, "endOffset": 18307, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 18440, "endOffset": 18453, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 19177, "endOffset": 19190, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 19417, "endOffset": 19430, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 19770, "endOffset": 19783, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isArrayIndex",
          "ranges": [
            { "startOffset": 20028, "endOffset": 20172, "count": 19 },
            { "startOffset": 20124, "endOffset": 20169, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "resolvePackageTarget",
          "ranges": [
            { "startOffset": 20967, "endOffset": 23217, "count": 19 },
            { "startOffset": 21160, "endOffset": 21314, "count": 8 },
            { "startOffset": 21314, "endOffset": 23100, "count": 11 },
            { "startOffset": 21346, "endOffset": 22192, "count": 4 },
            { "startOffset": 21377, "endOffset": 21403, "count": 0 },
            { "startOffset": 21723, "endOffset": 21871, "count": 0 },
            { "startOffset": 21911, "endOffset": 21938, "count": 0 },
            { "startOffset": 21973, "endOffset": 22030, "count": 0 },
            { "startOffset": 22064, "endOffset": 22126, "count": 0 },
            { "startOffset": 22128, "endOffset": 22192, "count": 0 },
            { "startOffset": 22192, "endOffset": 23100, "count": 7 },
            { "startOffset": 22345, "endOffset": 22573, "count": 19 },
            { "startOffset": 22403, "endOffset": 22567, "count": 0 },
            { "startOffset": 22616, "endOffset": 23025, "count": 11 },
            { "startOffset": 22673, "endOffset": 22695, "count": 9 },
            { "startOffset": 22697, "endOffset": 23019, "count": 7 },
            { "startOffset": 22968, "endOffset": 22981, "count": 0 },
            { "startOffset": 23025, "endOffset": 23100, "count": 0 },
            { "startOffset": 23100, "endOffset": 23216, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isConditionalExportsMainSugar",
          "ranges": [
            { "startOffset": 23501, "endOffset": 24444, "count": 8 },
            { "startOffset": 23633, "endOffset": 23649, "count": 0 },
            { "startOffset": 23705, "endOffset": 23722, "count": 0 },
            { "startOffset": 23862, "endOffset": 24413, "count": 1234 },
            { "startOffset": 23972, "endOffset": 24029, "count": 8 },
            { "startOffset": 24029, "endOffset": 24409, "count": 1226 },
            { "startOffset": 24085, "endOffset": 24409, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "packageExportsResolve",
          "ranges": [
            { "startOffset": 24941, "endOffset": 27516, "count": 8 },
            { "startOffset": 25149, "endOffset": 25186, "count": 0 },
            { "startOffset": 25588, "endOffset": 25662, "count": 0 },
            { "startOffset": 25693, "endOffset": 27515, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "patternKeyCompare",
          "ranges": [{ "startOffset": 27890, "endOffset": 28445, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "packageImportsResolve",
          "ranges": [{ "startOffset": 28932, "endOffset": 31389, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getPackageType",
          "ranges": [{ "startOffset": 31503, "endOffset": 31616, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "parsePackageName",
          "ranges": [{ "startOffset": 31781, "endOffset": 32839, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "packageResolve",
          "ranges": [{ "startOffset": 33163, "endOffset": 35235, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isBareSpecifier",
          "ranges": [{ "startOffset": 35346, "endOffset": 35456, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isRelativeSpecifier",
          "ranges": [{ "startOffset": 35575, "endOffset": 35854, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "shouldBeTreatedAsRelativeOrAbsolutePath",
          "ranges": [{ "startOffset": 36003, "endOffset": 36194, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "moduleResolve",
          "ranges": [{ "startOffset": 36557, "endOffset": 37348, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resolveAsCommonJS",
          "ranges": [{ "startOffset": 37510, "endOffset": 38967, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "checkIfDisallowedImport",
          "ranges": [{ "startOffset": 39347, "endOffset": 40719, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "throwIfInvalidParentURL",
          "ranges": [{ "startOffset": 40859, "endOffset": 41132, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "defaultResolve",
          "ranges": [{ "startOffset": 41756, "endOffset": 45697, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "decorateErrorWithCommonJSHints",
          "ranges": [{ "startOffset": 45960, "endOffset": 46436, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "defaultResolve",
          "ranges": [{ "startOffset": 46841, "endOffset": 47232, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "452",
      "url": "node:internal/modules/esm/package_config",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2215, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getPackageScopeConfig",
          "ranges": [{ "startOffset": 1072, "endOffset": 2165, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "453",
      "url": "node:internal/modules/esm/get_format",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 5818, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "node:",
          "ranges": [{ "startOffset": 1228, "endOffset": 1259, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getDataProtocolModuleFormat",
          "ranges": [{ "startOffset": 1324, "endOffset": 1540, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "extname",
          "ranges": [{ "startOffset": 1815, "endOffset": 2174, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "underNodeModules",
          "ranges": [{ "startOffset": 2404, "endOffset": 2625, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getFileProtocolModuleFormat",
          "ranges": [{ "startOffset": 2749, "endOffset": 4479, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHttpProtocolModuleFormat",
          "ranges": [{ "startOffset": 4615, "endOffset": 4960, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "defaultGetFormatWithoutErrors",
          "ranges": [{ "startOffset": 5105, "endOffset": 5340, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "defaultGetFormat",
          "ranges": [{ "startOffset": 5485, "endOffset": 5708, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "454",
      "url": "node:internal/modules/esm/formats",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2205, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "mimeToFormat",
          "ranges": [{ "startOffset": 745, "endOffset": 1083, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getLegacyExtensionFormat",
          "ranges": [{ "startOffset": 1085, "endOffset": 1167, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getFormatOfExtensionlessFile",
          "ranges": [{ "startOffset": 1537, "endOffset": 2055, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "455",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 1784, "count": 1 },
            { "startOffset": 407, "endOffset": 488, "count": 0 },
            { "startOffset": 664, "endOffset": 706, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 88, "endOffset": 405, "count": 14 },
            { "startOffset": 232, "endOffset": 247, "count": 7 },
            { "startOffset": 248, "endOffset": 284, "count": 7 },
            { "startOffset": 264, "endOffset": 284, "count": 0 },
            { "startOffset": 287, "endOffset": 363, "count": 7 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 327, "endOffset": 354, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 410, "endOffset": 487, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 571, "endOffset": 662, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "__setModuleDefault",
          "ranges": [{ "startOffset": 666, "endOffset": 706, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 760, "endOffset": 1368, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "ownKeys",
          "ranges": [{ "startOffset": 792, "endOffset": 1056, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "__importStar",
          "ranges": [
            { "startOffset": 1069, "endOffset": 1365, "count": 1 },
            { "startOffset": 1132, "endOffset": 1364, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "__exportStar",
          "ranges": [
            { "startOffset": 1423, "endOffset": 1574, "count": 1 },
            { "startOffset": 1467, "endOffset": 1572, "count": 14 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "456",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/mqtt.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 3208, "count": 1 },
            { "startOffset": 407, "endOffset": 488, "count": 0 },
            { "startOffset": 664, "endOffset": 706, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 88, "endOffset": 405, "count": 5 },
            { "startOffset": 232, "endOffset": 247, "count": 0 },
            { "startOffset": 264, "endOffset": 284, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 327, "endOffset": 354, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 410, "endOffset": 487, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 571, "endOffset": 662, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "__setModuleDefault",
          "ranges": [{ "startOffset": 666, "endOffset": 706, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 760, "endOffset": 1368, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "ownKeys",
          "ranges": [{ "startOffset": 792, "endOffset": 1056, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "__importStar",
          "ranges": [
            { "startOffset": 1069, "endOffset": 1365, "count": 1 },
            { "startOffset": 1132, "endOffset": 1364, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "__exportStar",
          "ranges": [
            { "startOffset": 1423, "endOffset": 1574, "count": 2 },
            { "startOffset": 1467, "endOffset": 1572, "count": 6 },
            { "startOffset": 1487, "endOffset": 1539, "count": 5 },
            { "startOffset": 1541, "endOffset": 1572, "count": 5 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "__importDefault",
          "ranges": [
            { "startOffset": 1632, "endOffset": 1713, "count": 5 },
            { "startOffset": 1690, "endOffset": 1710, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 2700, "endOffset": 2746, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 3130, "endOffset": 3171, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "457",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/client.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 48937, "count": 1 },
            { "startOffset": 407, "endOffset": 488, "count": 0 },
            { "startOffset": 664, "endOffset": 706, "count": 0 },
            { "startOffset": 2415, "endOffset": 2565, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 88, "endOffset": 405, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 410, "endOffset": 487, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 571, "endOffset": 662, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "__setModuleDefault",
          "ranges": [{ "startOffset": 666, "endOffset": 706, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 760, "endOffset": 1368, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "ownKeys",
          "ranges": [{ "startOffset": 792, "endOffset": 1056, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "__importStar",
          "ranges": [
            { "startOffset": 1069, "endOffset": 1365, "count": 2 },
            { "startOffset": 1132, "endOffset": 1364, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "__importDefault",
          "ranges": [
            { "startOffset": 1429, "endOffset": 1510, "count": 8 },
            { "startOffset": 1481, "endOffset": 1486, "count": 5 },
            { "startOffset": 1487, "endOffset": 1507, "count": 3 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setImmediate",
          "ranges": [{ "startOffset": 2423, "endOffset": 2564, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 2872, "endOffset": 48872, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<static_initializer>",
          "ranges": [{ "startOffset": 2936, "endOffset": 2976, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "458",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt-packet/mqtt.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 136, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "459",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt-packet/parser.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 24468, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Parser",
          "ranges": [{ "startOffset": 236, "endOffset": 310, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "parser",
          "ranges": [{ "startOffset": 321, "endOffset": 593, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_resetState",
          "ranges": [{ "startOffset": 597, "endOffset": 795, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "parse",
          "ranges": [{ "startOffset": 799, "endOffset": 1530, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseHeader",
          "ranges": [{ "startOffset": 1534, "endOffset": 2694, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseLength",
          "ranges": [{ "startOffset": 2698, "endOffset": 2979, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parsePayload",
          "ranges": [{ "startOffset": 2983, "endOffset": 4403, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseConnect",
          "ranges": [{ "startOffset": 4407, "endOffset": 8897, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseConnack",
          "ranges": [{ "startOffset": 8901, "endOffset": 9984, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parsePublish",
          "ranges": [{ "startOffset": 9988, "endOffset": 10655, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseSubscribe",
          "ranges": [{ "startOffset": 10659, "endOffset": 13049, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseSuback",
          "ranges": [{ "startOffset": 13053, "endOffset": 14058, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseUnsubscribe",
          "ranges": [{ "startOffset": 14062, "endOffset": 14946, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseUnsuback",
          "ranges": [{ "startOffset": 14950, "endOffset": 16018, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseConfirmation",
          "ranges": [{ "startOffset": 16078, "endOffset": 17318, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseDisconnect",
          "ranges": [{ "startOffset": 17351, "endOffset": 18038, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseAuth",
          "ranges": [{ "startOffset": 18065, "endOffset": 18706, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseMessageId",
          "ranges": [{ "startOffset": 18710, "endOffset": 19013, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseString",
          "ranges": [{ "startOffset": 19017, "endOffset": 19363, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseStringPair",
          "ranges": [{ "startOffset": 19367, "endOffset": 19507, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseBuffer",
          "ranges": [{ "startOffset": 19511, "endOffset": 19836, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseNum",
          "ranges": [{ "startOffset": 19840, "endOffset": 20046, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parse4ByteNum",
          "ranges": [{ "startOffset": 20050, "endOffset": 20266, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseVarByteNum",
          "ranges": [{ "startOffset": 20270, "endOffset": 21306, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseByte",
          "ranges": [{ "startOffset": 21310, "endOffset": 21518, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseByType",
          "ranges": [{ "startOffset": 21522, "endOffset": 22141, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_parseProperties",
          "ranges": [{ "startOffset": 22145, "endOffset": 23914, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_newPacket",
          "ranges": [{ "startOffset": 23918, "endOffset": 24336, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_emitError",
          "ranges": [{ "startOffset": 24340, "endOffset": 24440, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "460",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/bl/bl.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2043, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "BufferListStream",
          "ranges": [{ "startOffset": 150, "endOffset": 774, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_new",
          "ranges": [{ "startOffset": 916, "endOffset": 984, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_write",
          "ranges": [{ "startOffset": 1022, "endOffset": 1153, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_read",
          "ranges": [{ "startOffset": 1190, "endOffset": 1360, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "end",
          "ranges": [{ "startOffset": 1395, "endOffset": 1560, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_destroy",
          "ranges": [{ "startOffset": 1600, "endOffset": 1683, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_isBufferList",
          "ranges": [{ "startOffset": 1728, "endOffset": 1860, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "461",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/ours/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 2435, "count": 1 },
            { "startOffset": 104, "endOffset": 1082, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 1000, "endOffset": 1035, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 2278, "endOffset": 2313, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "462",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/stream.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 4771, "count": 1 },
            { "startOffset": 2404, "endOffset": 2939, "count": 7 },
            { "startOffset": 2997, "endOffset": 3511, "count": 6 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "fn",
          "ranges": [{ "startOffset": 2451, "endOffset": 2605, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fn",
          "ranges": [{ "startOffset": 3045, "endOffset": 3177, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 4178, "endOffset": 4209, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 4304, "endOffset": 4344, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 4434, "endOffset": 4474, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isUint8Array",
          "ranges": [{ "startOffset": 4561, "endOffset": 4630, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_uint8ArrayToBuffer",
          "ranges": [{ "startOffset": 4660, "endOffset": 4770, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "463",
      "url": "node:internal/blob",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 9579, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyURL",
          "ranges": [{ "startOffset": 1754, "endOffset": 1839, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyReadableStream",
          "ranges": [{ "startOffset": 1841, "endOffset": 2053, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isBlob",
          "ranges": [{ "startOffset": 2103, "endOffset": 2172, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getSource",
          "ranges": [{ "startOffset": 2174, "endOffset": 2853, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Blob",
          "ranges": [{ "startOffset": 3105, "endOffset": 4217, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4221, "endOffset": 4491, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4495, "endOffset": 4718, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4722, "endOffset": 4848, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get type",
          "ranges": [{ "startOffset": 4899, "endOffset": 5004, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get size",
          "ranges": [{ "startOffset": 5055, "endOffset": 5162, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "slice",
          "ranges": [{ "startOffset": 5290, "endOffset": 6072, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "arrayBuffer",
          "ranges": [{ "startOffset": 6125, "endOffset": 7243, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "text",
          "ranges": [{ "startOffset": 7291, "endOffset": 7456, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "stream",
          "ranges": [{ "startOffset": 7503, "endOffset": 8159, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ClonedBlob",
          "ranges": [{ "startOffset": 8163, "endOffset": 8258, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ClonedBlob.<computed>",
          "ranges": [{ "startOffset": 8296, "endOffset": 8304, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createBlob",
          "ranges": [{ "startOffset": 8307, "endOffset": 8510, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resolveObjectURL",
          "ranges": [{ "startOffset": 8863, "endOffset": 9478, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "464",
      "url": "node:internal/encoding",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 16816, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyBuffer",
          "ranges": [{ "startOffset": 1199, "endOffset": 1308, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateEncoder",
          "ranges": [{ "startOffset": 1310, "endOffset": 1435, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateDecoder",
          "ranges": [{ "startOffset": 1437, "endOffset": 1562, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "trimAsciiWhitespace",
          "ranges": [{ "startOffset": 8308, "endOffset": 8806, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getEncodingFromLabel",
          "ranges": [{ "startOffset": 8808, "endOffset": 8987, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "TextEncoder",
          "ranges": [{ "startOffset": 9058, "endOffset": 9104, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get encoding",
          "ranges": [{ "startOffset": 9108, "endOffset": 9175, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "encode",
          "ranges": [{ "startOffset": 9179, "endOffset": 9271, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "encodeInto",
          "ranges": [{ "startOffset": 9275, "endOffset": 9585, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 9589, "endOffset": 9985, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "makeTextDecoderICU",
          "ranges": [{ "startOffset": 10357, "endOffset": 12323, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "TextDecoder",
          "ranges": [{ "startOffset": 10495, "endOffset": 11432, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "#prepareConverter",
          "ranges": [{ "startOffset": 11438, "endOffset": 11703, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "decode",
          "ranges": [{ "startOffset": 11709, "endOffset": 12294, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "makeTextDecoderJS",
          "ranges": [{ "startOffset": 12325, "endOffset": 15178, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get encoding",
          "ranges": [{ "startOffset": 15275, "endOffset": 15350, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get fatal",
          "ranges": [{ "startOffset": 15355, "endOffset": 15476, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get ignoreBOM",
          "ranges": [{ "startOffset": 15481, "endOffset": 15630, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ObjectGetOwnPropertyDescriptors",
          "ranges": [{ "startOffset": 15635, "endOffset": 16217, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "465",
      "url": "node:internal/file",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1873, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 451, "endOffset": 1635, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "466",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/ours/primordials.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 3323, "count": 1 },
            { "startOffset": 3114, "endOffset": 3141, "count": 0 },
            { "startOffset": 3185, "endOffset": 3217, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "AggregateError",
          "ranges": [{ "startOffset": 401, "endOffset": 741, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ArrayIsArray",
          "ranges": [{ "startOffset": 783, "endOffset": 838, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ArrayPrototypeIncludes",
          "ranges": [{ "startOffset": 842, "endOffset": 909, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ArrayPrototypeIndexOf",
          "ranges": [{ "startOffset": 913, "endOffset": 978, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ArrayPrototypeJoin",
          "ranges": [{ "startOffset": 982, "endOffset": 1043, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ArrayPrototypeMap",
          "ranges": [{ "startOffset": 1047, "endOffset": 1104, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ArrayPrototypePop",
          "ranges": [{ "startOffset": 1108, "endOffset": 1165, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ArrayPrototypePush",
          "ranges": [{ "startOffset": 1169, "endOffset": 1228, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ArrayPrototypeSlice",
          "ranges": [{ "startOffset": 1232, "endOffset": 1309, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "FunctionPrototypeCall",
          "ranges": [{ "startOffset": 1322, "endOffset": 1410, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "FunctionPrototypeSymbolHasInstance",
          "ranges": [{ "startOffset": 1414, "endOffset": 1541, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ObjectDefineProperties",
          "ranges": [{ "startOffset": 1783, "endOffset": 1872, "count": 5 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "ObjectDefineProperty",
          "ranges": [{ "startOffset": 1876, "endOffset": 1971, "count": 44 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "ObjectGetOwnPropertyDescriptor",
          "ranges": [{ "startOffset": 1975, "endOffset": 2078, "count": 9 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "ObjectKeys",
          "ranges": [{ "startOffset": 2082, "endOffset": 2131, "count": 3 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "ObjectSetPrototypeOf",
          "ranges": [{ "startOffset": 2135, "endOffset": 2224, "count": 12 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "PromisePrototypeCatch",
          "ranges": [{ "startOffset": 2239, "endOffset": 2302, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromisePrototypeThen",
          "ranges": [{ "startOffset": 2306, "endOffset": 2393, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseReject",
          "ranges": [{ "startOffset": 2397, "endOffset": 2452, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "PromiseResolve",
          "ranges": [{ "startOffset": 2456, "endOffset": 2513, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "RegExpPrototypeTest",
          "ranges": [{ "startOffset": 2548, "endOffset": 2614, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "StringPrototypeSlice",
          "ranges": [{ "startOffset": 2644, "endOffset": 2722, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "StringPrototypeToLowerCase",
          "ranges": [{ "startOffset": 2726, "endOffset": 2794, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "StringPrototypeToUpperCase",
          "ranges": [{ "startOffset": 2798, "endOffset": 2866, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "StringPrototypeTrim",
          "ranges": [{ "startOffset": 2870, "endOffset": 2924, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "TypedArrayPrototypeSet",
          "ranges": [{ "startOffset": 3221, "endOffset": 3295, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "467",
      "url": "node:internal/process/esm_loader",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1190, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get esmLoader",
          "ranges": [{ "startOffset": 386, "endOffset": 458, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "loadESM",
          "ranges": [{ "startOffset": 462, "endOffset": 1185, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "468",
      "url": "node:internal/modules/esm/loader",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 21355, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "newResolveCache",
          "ranges": [{ "startOffset": 890, "endOffset": 1020, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "newLoadCache",
          "ranges": [{ "startOffset": 1176, "endOffset": 1297, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "getTranslators",
          "ranges": [{ "startOffset": 1459, "endOffset": 1581, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 2316, "endOffset": 14669, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ModuleLoader",
          "ranges": [
            { "startOffset": 3583, "endOffset": 4138, "count": 1 },
            { "startOffset": 3671, "endOffset": 3728, "count": 0 },
            { "startOffset": 3859, "endOffset": 4090, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setCustomizations",
          "ranges": [
            { "startOffset": 5678, "endOffset": 5922, "count": 1 },
            { "startOffset": 5781, "endOffset": 5863, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "eval",
          "ranges": [{ "startOffset": 5926, "endOffset": 6906, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getModuleJob",
          "ranges": [{ "startOffset": 7641, "endOffset": 7876, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getJobFromResolveResult",
          "ranges": [{ "startOffset": 7880, "endOffset": 8452, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "#createModuleJob",
          "ranges": [{ "startOffset": 9090, "endOffset": 10149, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "import",
          "ranges": [{ "startOffset": 10611, "endOffset": 10836, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "register",
          "ranges": [{ "startOffset": 10902, "endOffset": 11425, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resolve",
          "ranges": [{ "startOffset": 11884, "endOffset": 12470, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resolveSync",
          "ranges": [{ "startOffset": 12628, "endOffset": 12906, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "defaultResolve",
          "ranges": [{ "startOffset": 13118, "endOffset": 13458, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "load",
          "ranges": [{ "startOffset": 13742, "endOffset": 14046, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateLoadResult",
          "ranges": [{ "startOffset": 14050, "endOffset": 14201, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "importMetaInitialize",
          "ranges": [{ "startOffset": 14205, "endOffset": 14540, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "forceLoadHooks",
          "ranges": [{ "startOffset": 14601, "endOffset": 14667, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 14723, "endOffset": 17130, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createModuleLoader",
          "ranges": [
            { "startOffset": 17626, "endOffset": 19308, "count": 1 },
            { "startOffset": 18091, "endOffset": 19258, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "readableURIEncode",
          "ranges": [{ "startOffset": 18166, "endOffset": 18661, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 18981, "endOffset": 19069, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHooksProxy",
          "ranges": [{ "startOffset": 19421, "endOffset": 19597, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "register",
          "ranges": [{ "startOffset": 20881, "endOffset": 21280, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "469",
      "url": "node:internal/modules/esm/module_map",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3892, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 297, "endOffset": 322, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ResolveCache",
          "ranges": [{ "startOffset": 866, "endOffset": 894, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "serializeKey",
          "ranges": [{ "startOffset": 1240, "endOffset": 1852, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "#getModuleCachedImports",
          "ranges": [{ "startOffset": 1856, "endOffset": 2072, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 2247, "endOffset": 2349, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 2489, "endOffset": 2618, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "has",
          "ranges": [{ "startOffset": 2622, "endOffset": 2726, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "LoadCache",
          "ranges": [{ "startOffset": 2860, "endOffset": 2888, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 2937, "endOffset": 3080, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 3083, "endOffset": 3677, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "has",
          "ranges": [{ "startOffset": 3680, "endOffset": 3837, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "470",
      "url": "node:internal/modules/esm/assert",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3876, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1326, "endOffset": 1364, "count": 5 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "validateAttributes",
          "ranges": [{ "startOffset": 1785, "endOffset": 3160, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "handleInvalidType",
          "ranges": [{ "startOffset": 3392, "endOffset": 3806, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "471",
      "url": "node:internal/modules/esm/translators",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 12874, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyTypes",
          "ranges": [{ "startOffset": 521, "endOffset": 637, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1034, "endOffset": 1059, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "initCJSParse",
          "ranges": [{ "startOffset": 1821, "endOffset": 2219, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "assertBufferSource",
          "ranges": [{ "startOffset": 2833, "endOffset": 3254, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "stringify",
          "ranges": [{ "startOffset": 3478, "endOffset": 3745, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "errPath",
          "ranges": [{ "startOffset": 3865, "endOffset": 4010, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "importModuleDynamically",
          "ranges": [{ "startOffset": 4486, "endOffset": 4624, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "moduleStrategy",
          "ranges": [{ "startOffset": 4706, "endOffset": 5231, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "enrichCJSError",
          "ranges": [{ "startOffset": 5456, "endOffset": 5995, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "commonjsStrategy",
          "ranges": [{ "startOffset": 6126, "endOffset": 7482, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "cjsPreparseModuleExports",
          "ranges": [{ "startOffset": 7610, "endOffset": 9148, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "builtinStrategy",
          "ranges": [{ "startOffset": 9272, "endOffset": 9655, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "jsonStrategy",
          "ranges": [{ "startOffset": 9719, "endOffset": 11861, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 11927, "endOffset": 12871, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "472",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/ours/util.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 3992, "count": 1 },
            { "startOffset": 307, "endOffset": 349, "count": 0 },
            { "startOffset": 401, "endOffset": 447, "count": 0 },
            { "startOffset": 555, "endOffset": 575, "count": 0 },
            { "startOffset": 764, "endOffset": 815, "count": 0 },
            { "startOffset": 2301, "endOffset": 3227, "count": 0 },
            { "startOffset": 3267, "endOffset": 3912, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 492, "endOffset": 512, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isBlob",
          "ranges": [{ "startOffset": 655, "endOffset": 759, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isBlob",
          "ranges": [{ "startOffset": 766, "endOffset": 815, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateAbortSignal",
          "ranges": [{ "startOffset": 872, "endOffset": 1068, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateFunction",
          "ranges": [{ "startOffset": 1094, "endOffset": 1215, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "once",
          "ranges": [{ "startOffset": 1290, "endOffset": 1467, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createDeferredPromise",
          "ranges": [{ "startOffset": 1494, "endOffset": 1751, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "promisify",
          "ranges": [{ "startOffset": 1755, "endOffset": 1955, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "debuglog",
          "ranges": [{ "startOffset": 1959, "endOffset": 2001, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1983, "endOffset": 1997, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isAsyncFunction",
          "ranges": [{ "startOffset": 2039, "endOffset": 2107, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isArrayBufferView",
          "ranges": [{ "startOffset": 2113, "endOffset": 2180, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "deprecate",
          "ranges": [{ "startOffset": 2198, "endOffset": 2240, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "addAbortListener",
          "ranges": [{ "startOffset": 2308, "endOffset": 3227, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "AbortSignalAny",
          "ranges": [{ "startOffset": 3274, "endOffset": 3912, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "473",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/ours/util/inspect.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1723, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "format",
          "ranges": [{ "startOffset": 310, "endOffset": 938, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "inspect",
          "ranges": [{ "startOffset": 942, "endOffset": 1720, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "474",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/ours/errors.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 10135, "count": 1 },
            { "startOffset": 493, "endOffset": 516, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "assert",
          "ranges": [{ "startOffset": 876, "endOffset": 983, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "addNumericalSeparator",
          "ranges": [{ "startOffset": 1064, "endOffset": 1295, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getMessage",
          "ranges": [{ "startOffset": 1296, "endOffset": 1919, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "E",
          "ranges": [
            { "startOffset": 1920, "endOffset": 2632, "count": 17 },
            { "startOffset": 1967, "endOffset": 1989, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "NodeError",
          "ranges": [{ "startOffset": 2027, "endOffset": 2100, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toString",
          "ranges": [{ "startOffset": 2105, "endOffset": 2178, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "value",
          "ranges": [{ "startOffset": 2369, "endOffset": 2443, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "hideStackFrames",
          "ranges": [{ "startOffset": 2633, "endOffset": 2885, "count": 13 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "aggregateTwoErrors",
          "ranges": [{ "startOffset": 2886, "endOffset": 3341, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "AbortError",
          "ranges": [{ "startOffset": 3377, "endOffset": 3682, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3748, "endOffset": 7125, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 7173, "endOffset": 7473, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 7524, "endOffset": 7960, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 8003, "endOffset": 8579, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 8622, "endOffset": 9221, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "475",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/operators.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 12858, "count": 1 },
            { "startOffset": 65, "endOffset": 111, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "compose",
          "ranges": [{ "startOffset": 1038, "endOffset": 1690, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "map",
          "ranges": [{ "startOffset": 1691, "endOffset": 4939, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "asIndexedPairs",
          "ranges": [{ "startOffset": 4940, "endOffset": 5679, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "some",
          "ranges": [{ "startOffset": 5680, "endOffset": 5826, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "every",
          "ranges": [{ "startOffset": 5827, "endOffset": 6165, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "find",
          "ranges": [{ "startOffset": 6166, "endOffset": 6306, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "forEach",
          "ranges": [{ "startOffset": 6307, "endOffset": 6667, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "filter",
          "ranges": [{ "startOffset": 6668, "endOffset": 6984, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReduceAwareErrMissingArgs",
          "ranges": [{ "startOffset": 7200, "endOffset": 7312, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reduce",
          "ranges": [{ "startOffset": 7315, "endOffset": 9255, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toArray",
          "ranges": [{ "startOffset": 9256, "endOffset": 9937, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "flatMap",
          "ranges": [{ "startOffset": 9938, "endOffset": 10129, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toIntegerOrInfinity",
          "ranges": [{ "startOffset": 10130, "endOffset": 10448, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "drop",
          "ranges": [{ "startOffset": 10449, "endOffset": 11436, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "take",
          "ranges": [{ "startOffset": 11437, "endOffset": 12545, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "476",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/validators.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 14450, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "isInt32",
          "ranges": [{ "startOffset": 781, "endOffset": 839, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isUint32",
          "ranges": [{ "startOffset": 891, "endOffset": 950, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "parseFileMode",
          "ranges": [{ "startOffset": 1568, "endOffset": 1915, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2158, "endOffset": 2510, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2748, "endOffset": 3186, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3421, "endOffset": 3845, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateString",
          "ranges": [{ "startOffset": 3997, "endOffset": 4124, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateNumber",
          "ranges": [{ "startOffset": 4325, "endOffset": 4801, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4987, "endOffset": 5314, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateBoolean",
          "ranges": [{ "startOffset": 5469, "endOffset": 5599, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getOwnPropertyValueOrDefault",
          "ranges": [{ "startOffset": 5711, "endOffset": 5883, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6145, "endOffset": 6662, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 7213, "endOffset": 7384, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 7602, "endOffset": 7877, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateStringArray",
          "ranges": [{ "startOffset": 8041, "endOffset": 8208, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateBooleanArray",
          "ranges": [{ "startOffset": 8374, "endOffset": 8543, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateAbortSignalArray",
          "ranges": [{ "startOffset": 8721, "endOffset": 9065, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateSignalName",
          "ranges": [{ "startOffset": 9177, "endOffset": 9510, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 9722, "endOffset": 9881, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateEncoding",
          "ranges": [{ "startOffset": 9944, "endOffset": 10238, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validatePort",
          "ranges": [{ "startOffset": 10500, "endOffset": 10875, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 11043, "endOffset": 11239, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 11438, "endOffset": 11549, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 11763, "endOffset": 11900, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 12103, "endOffset": 12207, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateUnion",
          "ranges": [{ "startOffset": 12299, "endOffset": 12485, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateLinkHeaderFormat",
          "ranges": [{ "startOffset": 12912, "endOffset": 13204, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateLinkHeaderValue",
          "ranges": [{ "startOffset": 13256, "endOffset": 13922, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "477",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/end-of-stream.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 8682, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "isRequest",
          "ranges": [{ "startOffset": 938, "endOffset": 1032, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "nop",
          "ranges": [{ "startOffset": 1045, "endOffset": 1053, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eos",
          "ranges": [{ "startOffset": 1054, "endOffset": 7191, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eosWeb",
          "ranges": [{ "startOffset": 7192, "endOffset": 8113, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "finished",
          "ranges": [{ "startOffset": 8114, "endOffset": 8625, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "478",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/process/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 96, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "479",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/utils.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 11386, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "isReadableNodeStream",
          "ranges": [{ "startOffset": 778, "endOffset": 1365, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isWritableNodeStream",
          "ranges": [{ "startOffset": 1366, "endOffset": 1764, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isDuplexNodeStream",
          "ranges": [{ "startOffset": 1765, "endOffset": 1965, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isNodeStream",
          "ranges": [{ "startOffset": 1966, "endOffset": 2224, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isReadableStream",
          "ranges": [{ "startOffset": 2225, "endOffset": 2438, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isWritableStream",
          "ranges": [{ "startOffset": 2439, "endOffset": 2586, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isTransformStream",
          "ranges": [{ "startOffset": 2587, "endOffset": 2733, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isWebStream",
          "ranges": [{ "startOffset": 2734, "endOffset": 2845, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isIterable",
          "ranges": [{ "startOffset": 2846, "endOffset": 3168, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isDestroyed",
          "ranges": [{ "startOffset": 3169, "endOffset": 3469, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isWritableEnded",
          "ranges": [{ "startOffset": 3493, "endOffset": 3875, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isWritableFinished",
          "ranges": [{ "startOffset": 3903, "endOffset": 4379, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isReadableEnded",
          "ranges": [{ "startOffset": 4408, "endOffset": 4758, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isReadableFinished",
          "ranges": [{ "startOffset": 4783, "endOffset": 5211, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isReadable",
          "ranges": [{ "startOffset": 5212, "endOffset": 5555, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isWritable",
          "ranges": [{ "startOffset": 5556, "endOffset": 5896, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isFinished",
          "ranges": [{ "startOffset": 5897, "endOffset": 6304, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isWritableErrored",
          "ranges": [{ "startOffset": 6305, "endOffset": 6797, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isReadableErrored",
          "ranges": [{ "startOffset": 6798, "endOffset": 7290, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isClosed",
          "ranges": [{ "startOffset": 7291, "endOffset": 8024, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isOutgoingMessage",
          "ranges": [{ "startOffset": 8025, "endOffset": 8276, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isServerResponse",
          "ranges": [{ "startOffset": 8277, "endOffset": 8389, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isServerRequest",
          "ranges": [{ "startOffset": 8390, "endOffset": 8682, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "willEmitClose",
          "ranges": [{ "startOffset": 8683, "endOffset": 9004, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isDisturbed",
          "ranges": [{ "startOffset": 9005, "endOffset": 9280, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isErrored",
          "ranges": [{ "startOffset": 9281, "endOffset": 10788, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "480",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/compose.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 5159, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "compose",
          "ranges": [{ "startOffset": 449, "endOffset": 5158, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "481",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/pipeline.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 12920, "count": 1 },
            { "startOffset": 1005, "endOffset": 1051, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "destroyer",
          "ranges": [{ "startOffset": 1102, "endOffset": 1555, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "popCallback",
          "ranges": [{ "startOffset": 1556, "endOffset": 1882, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "makeAsyncIterable",
          "ranges": [{ "startOffset": 1883, "endOffset": 2161, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fromReadable",
          "ranges": [{ "startOffset": 2162, "endOffset": 2318, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pumpToNode",
          "ranges": [{ "startOffset": 2319, "endOffset": 3387, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pumpToWeb",
          "ranges": [{ "startOffset": 3388, "endOffset": 3973, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pipeline",
          "ranges": [{ "startOffset": 3974, "endOffset": 4066, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pipelineImpl",
          "ranges": [{ "startOffset": 4067, "endOffset": 10968, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pipe",
          "ranges": [{ "startOffset": 10969, "endOffset": 12871, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "482",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/destroy.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 7165, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "checkError",
          "ranges": [{ "startOffset": 426, "endOffset": 734, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "destroy",
          "ranges": [{ "startOffset": 844, "endOffset": 1683, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_destroy",
          "ranges": [{ "startOffset": 1684, "endOffset": 2279, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitErrorCloseNT",
          "ranges": [{ "startOffset": 2280, "endOffset": 2365, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitCloseNT",
          "ranges": [{ "startOffset": 2366, "endOffset": 2675, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitErrorNT",
          "ranges": [{ "startOffset": 2676, "endOffset": 3010, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "undestroy",
          "ranges": [{ "startOffset": 3011, "endOffset": 3677, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "errorOrDestroy",
          "ranges": [{ "startOffset": 3678, "endOffset": 4722, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "construct",
          "ranges": [{ "startOffset": 4723, "endOffset": 5116, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "constructNT",
          "ranges": [{ "startOffset": 5117, "endOffset": 5879, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitConstructNT",
          "ranges": [{ "startOffset": 5880, "endOffset": 5942, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isRequest",
          "ranges": [{ "startOffset": 5943, "endOffset": 6093, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitCloseLegacy",
          "ranges": [{ "startOffset": 6094, "endOffset": 6153, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitErrorCloseLegacy",
          "ranges": [{ "startOffset": 6154, "endOffset": 6272, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "destroyer",
          "ranges": [{ "startOffset": 6307, "endOffset": 7076, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "483",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/duplex.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 4847, "count": 1 },
            { "startOffset": 1842, "endOffset": 1963, "count": 11 },
            { "startOffset": 1906, "endOffset": 1959, "count": 7 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Duplex",
          "ranges": [{ "startOffset": 1966, "endOffset": 2613, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 3813, "endOffset": 4015, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 4021, "endOffset": 4280, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyWebStreams",
          "ranges": [{ "startOffset": 4349, "endOffset": 4470, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Duplex.fromWeb",
          "ranges": [{ "startOffset": 4488, "endOffset": 4597, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Duplex.toWeb",
          "ranges": [{ "startOffset": 4613, "endOffset": 4702, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Duplex.from",
          "ranges": [{ "startOffset": 4731, "endOffset": 4846, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "484",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/readable.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 42847, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1855, "endOffset": 1879, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "nop",
          "ranges": [{ "startOffset": 2561, "endOffset": 2569, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "makeBitMapDescriptor",
          "ranges": [{ "startOffset": 3227, "endOffset": 3448, "count": 19 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 3302, "endOffset": 3353, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 3359, "endOffset": 3442, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReadableState",
          "ranges": [{ "startOffset": 5321, "endOffset": 7909, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable",
          "ranges": [{ "startOffset": 7910, "endOffset": 8759, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable._destroy",
          "ranges": [{ "startOffset": 8893, "endOffset": 8925, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.<computed>",
          "ranges": [{ "startOffset": 8974, "endOffset": 9012, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.<computed>",
          "ranges": [{ "startOffset": 9054, "endOffset": 9307, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.push",
          "ranges": [{ "startOffset": 9535, "endOffset": 9621, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.unshift",
          "ranges": [{ "startOffset": 9716, "endOffset": 9801, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "readableAddChunk",
          "ranges": [{ "startOffset": 9802, "endOffset": 12116, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "addChunk",
          "ranges": [{ "startOffset": 12117, "endOffset": 12847, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.isPaused",
          "ranges": [{ "startOffset": 12878, "endOffset": 12989, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.setEncoding",
          "ranges": [{ "startOffset": 13052, "endOffset": 13599, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "computeNewHighWaterMark",
          "ranges": [{ "startOffset": 13658, "endOffset": 14000, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "howMuchToRead",
          "ranges": [{ "startOffset": 14113, "endOffset": 14500, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.read",
          "ranges": [{ "startOffset": 14597, "endOffset": 18970, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onEofChunk",
          "ranges": [{ "startOffset": 18971, "endOffset": 19780, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitReadable",
          "ranges": [{ "startOffset": 19981, "endOffset": 20302, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emitReadable_",
          "ranges": [{ "startOffset": 20303, "endOffset": 20939, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "maybeReadMore",
          "ranges": [{ "startOffset": 21288, "endOffset": 21463, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "maybeReadMore_",
          "ranges": [{ "startOffset": 21464, "endOffset": 23248, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable._read",
          "ranges": [{ "startOffset": 23519, "endOffset": 23585, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.pipe",
          "ranges": [{ "startOffset": 23612, "endOffset": 27915, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pipeOnDrain",
          "ranges": [{ "startOffset": 27916, "endOffset": 28547, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.unpipe",
          "ranges": [{ "startOffset": 28576, "endOffset": 29267, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.on",
          "ranges": [{ "startOffset": 29392, "endOffset": 30281, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.removeListener",
          "ranges": [{ "startOffset": 30373, "endOffset": 30883, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.removeAllListeners",
          "ranges": [{ "startOffset": 30983, "endOffset": 31517, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "updateReadableListening",
          "ranges": [{ "startOffset": 31518, "endOffset": 32022, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "nReadingNextTick",
          "ranges": [{ "startOffset": 32023, "endOffset": 32109, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.resume",
          "ranges": [{ "startOffset": 32263, "endOffset": 32583, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resume",
          "ranges": [{ "startOffset": 32584, "endOffset": 32732, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resume_",
          "ranges": [{ "startOffset": 32733, "endOffset": 32973, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.pause",
          "ranges": [{ "startOffset": 33001, "endOffset": 33263, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "flow",
          "ranges": [{ "startOffset": 33264, "endOffset": 33409, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.wrap",
          "ranges": [{ "startOffset": 33593, "endOffset": 34590, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.<computed>",
          "ranges": [{ "startOffset": 34633, "endOffset": 34685, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.iterator",
          "ranges": [{ "startOffset": 34716, "endOffset": 34858, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "streamToAsyncIterator",
          "ranges": [{ "startOffset": 34859, "endOffset": 35113, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createAsyncIterator",
          "ranges": [{ "startOffset": 35114, "endOffset": 36257, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 36476, "endOffset": 36855, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 36861, "endOffset": 36990, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 37070, "endOffset": 37134, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 37214, "endOffset": 37422, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 37508, "endOffset": 37574, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 37653, "endOffset": 37735, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 37815, "endOffset": 37875, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 37886, "endOffset": 37995, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 38069, "endOffset": 38122, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 38200, "endOffset": 38287, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 38363, "endOffset": 38447, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 38514, "endOffset": 38597, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 38640, "endOffset": 38723, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 38792, "endOffset": 38878, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 38884, "endOffset": 39171, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 39244, "endOffset": 39331, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 39467, "endOffset": 39511, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 39589, "endOffset": 39639, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 39645, "endOffset": 39693, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fromList",
          "ranges": [{ "startOffset": 39995, "endOffset": 40520, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "endReadable",
          "ranges": [{ "startOffset": 40521, "endOffset": 40737, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "endReadableNT",
          "ranges": [{ "startOffset": 40738, "endOffset": 41649, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "endWritableNT",
          "ranges": [{ "startOffset": 41650, "endOffset": 41804, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.from",
          "ranges": [{ "startOffset": 41821, "endOffset": 41890, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyWebStreams",
          "ranges": [{ "startOffset": 41952, "endOffset": 42073, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.fromWeb",
          "ranges": [{ "startOffset": 42093, "endOffset": 42218, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.toWeb",
          "ranges": [{ "startOffset": 42236, "endOffset": 42361, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Readable.wrap",
          "ranges": [{ "startOffset": 42378, "endOffset": 42846, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "485",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/legacy.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2893, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Stream",
          "ranges": [{ "startOffset": 142, "endOffset": 189, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Stream.pipe",
          "ranges": [{ "startOffset": 300, "endOffset": 2055, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "prependListener",
          "ranges": [{ "startOffset": 2056, "endOffset": 2843, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "486",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1768, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "validateAbortSignal",
          "ranges": [{ "startOffset": 526, "endOffset": 677, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "addAbortSignal",
          "ranges": [{ "startOffset": 710, "endOffset": 1018, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "module.exports.addAbortSignalNoValidate",
          "ranges": [{ "startOffset": 1061, "endOffset": 1767, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "487",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/buffer_list.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3862, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "BufferList",
          "ranges": [{ "startOffset": 255, "endOffset": 336, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "push",
          "ranges": [{ "startOffset": 339, "endOffset": 525, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unshift",
          "ranges": [{ "startOffset": 528, "endOffset": 692, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "shift",
          "ranges": [{ "startOffset": 695, "endOffset": 898, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clear",
          "ranges": [{ "startOffset": 901, "endOffset": 967, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "join",
          "ranges": [{ "startOffset": 970, "endOffset": 1135, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "concat",
          "ranges": [{ "startOffset": 1138, "endOffset": 1407, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "consume",
          "ranges": [{ "startOffset": 1491, "endOffset": 1939, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "first",
          "ranges": [{ "startOffset": 1942, "endOffset": 1981, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "module.exports",
          "ranges": [{ "startOffset": 1984, "endOffset": 2079, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_getString",
          "ranges": [{ "startOffset": 2154, "endOffset": 2750, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_getBuffer",
          "ranges": [{ "startOffset": 2820, "endOffset": 3558, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "module.exports",
          "ranges": [{ "startOffset": 3639, "endOffset": 3859, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "488",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/state.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1316, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "highWaterMarkFrom",
          "ranges": [{ "startOffset": 291, "endOffset": 453, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getDefaultHighWaterMark",
          "ranges": [{ "startOffset": 454, "endOffset": 583, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setDefaultHighWaterMark",
          "ranges": [{ "startOffset": 584, "endOffset": 792, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHighWaterMark",
          "ranges": [{ "startOffset": 793, "endOffset": 1221, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "489",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/string_decoder/lib/string_decoder.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 9465, "count": 1 },
            { "startOffset": 1267, "endOffset": 1574, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isEncoding",
          "ranges": [{ "startOffset": 1270, "endOffset": 1574, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_normalizeEncoding",
          "ranges": [{ "startOffset": 1577, "endOffset": 2140, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "normalizeEncoding",
          "ranges": [{ "startOffset": 2275, "endOffset": 2505, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "StringDecoder",
          "ranges": [{ "startOffset": 2711, "endOffset": 3294, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "StringDecoder.write",
          "ranges": [{ "startOffset": 3328, "endOffset": 3652, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "StringDecoder.fillLast",
          "ranges": [{ "startOffset": 3900, "endOffset": 4212, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "utf8CheckByte",
          "ranges": [{ "startOffset": 4362, "endOffset": 4577, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "utf8CheckIncomplete",
          "ranges": [{ "startOffset": 4803, "endOffset": 5348, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "utf8CheckExtraBytes",
          "ranges": [{ "startOffset": 5909, "endOffset": 6327, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "utf8FillLast",
          "ranges": [{ "startOffset": 6409, "endOffset": 6795, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "utf8Text",
          "ranges": [{ "startOffset": 6986, "endOffset": 7268, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "utf8End",
          "ranges": [{ "startOffset": 7356, "endOffset": 7487, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "utf16Text",
          "ranges": [{ "startOffset": 7763, "endOffset": 8316, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "utf16End",
          "ranges": [{ "startOffset": 8460, "endOffset": 8681, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "base64Text",
          "ranges": [{ "startOffset": 8683, "endOffset": 9058, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "base64End",
          "ranges": [{ "startOffset": 9060, "endOffset": 9239, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "simpleWrite",
          "ranges": [{ "startOffset": 9318, "endOffset": 9385, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "simpleEnd",
          "ranges": [{ "startOffset": 9387, "endOffset": 9465, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "490",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/safe-buffer/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 1670, "count": 1 },
            { "startOffset": 438, "endOffset": 550, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "copyProps",
          "ranges": [
            { "startOffset": 241, "endOffset": 327, "count": 1 },
            { "startOffset": 296, "endOffset": 325, "count": 12 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "SafeBuffer",
          "ranges": [{ "startOffset": 552, "endOffset": 654, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "SafeBuffer.from",
          "ranges": [{ "startOffset": 796, "endOffset": 981, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "SafeBuffer.alloc",
          "ranges": [{ "startOffset": 1002, "endOffset": 1336, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "SafeBuffer.allocUnsafe",
          "ranges": [{ "startOffset": 1363, "endOffset": 1495, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "SafeBuffer.allocUnsafeSlow",
          "ranges": [{ "startOffset": 1526, "endOffset": 1669, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "491",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/from.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2605, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "from",
          "ranges": [{ "startOffset": 332, "endOffset": 2582, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "492",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/writable.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 25917, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "nop",
          "ranges": [{ "startOffset": 2425, "endOffset": 2442, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "WritableState",
          "ranges": [{ "startOffset": 2485, "endOffset": 6964, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "resetBuffer",
          "ranges": [{ "startOffset": 6965, "endOffset": 7093, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getBuffer",
          "ranges": [{ "startOffset": 7130, "endOffset": 7218, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 7312, "endOffset": 7376, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable",
          "ranges": [{ "startOffset": 7380, "endOffset": 8846, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "value",
          "ranges": [{ "startOffset": 8927, "endOffset": 9128, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.pipe",
          "ranges": [{ "startOffset": 9227, "endOffset": 9295, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_write",
          "ranges": [{ "startOffset": 9296, "endOffset": 10588, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.write",
          "ranges": [{ "startOffset": 10616, "endOffset": 10702, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.cork",
          "ranges": [{ "startOffset": 10729, "endOffset": 10775, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.uncork",
          "ranges": [{ "startOffset": 10804, "endOffset": 10949, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setDefaultEncoding",
          "ranges": [{ "startOffset": 10990, "endOffset": 11303, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeOrBuffer",
          "ranges": [{ "startOffset": 11492, "endOffset": 12507, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "doWrite",
          "ranges": [{ "startOffset": 12508, "endOffset": 12866, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onwriteError",
          "ranges": [{ "startOffset": 12867, "endOffset": 13247, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onwrite",
          "ranges": [{ "startOffset": 13248, "endOffset": 14901, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "afterWriteTick",
          "ranges": [{ "startOffset": 14902, "endOffset": 15039, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "afterWrite",
          "ranges": [{ "startOffset": 15040, "endOffset": 15401, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "errorBuffer",
          "ranges": [{ "startOffset": 15473, "endOffset": 16277, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearBuffer",
          "ranges": [{ "startOffset": 16343, "endOffset": 17810, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable._write",
          "ranges": [{ "startOffset": 17839, "endOffset": 18069, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.end",
          "ranges": [{ "startOffset": 18129, "endOffset": 19441, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "needFinish",
          "ranges": [{ "startOffset": 19442, "endOffset": 19735, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "callFinal",
          "ranges": [{ "startOffset": 19736, "endOffset": 20695, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "prefinish",
          "ranges": [{ "startOffset": 20696, "endOffset": 20997, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "finishMaybe",
          "ranges": [{ "startOffset": 20998, "endOffset": 21542, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "finish",
          "ranges": [{ "startOffset": 21543, "endOffset": 22264, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 22347, "endOffset": 22430, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 22476, "endOffset": 22562, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 22568, "endOffset": 22749, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 22794, "endOffset": 23176, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 23182, "endOffset": 23315, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 23368, "endOffset": 23453, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 23508, "endOffset": 23595, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 23646, "endOffset": 23727, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 23777, "endOffset": 23860, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 23914, "endOffset": 24069, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 24127, "endOffset": 24210, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 24261, "endOffset": 24340, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 24391, "endOffset": 24467, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 24534, "endOffset": 24617, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 24697, "endOffset": 24903, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.destroy",
          "ranges": [{ "startOffset": 24976, "endOffset": 25259, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable._destroy",
          "ranges": [{ "startOffset": 25344, "endOffset": 25376, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.<computed>",
          "ranges": [{ "startOffset": 25425, "endOffset": 25463, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lazyWebStreams",
          "ranges": [{ "startOffset": 25525, "endOffset": 25646, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.fromWeb",
          "ranges": [{ "startOffset": 25666, "endOffset": 25791, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Writable.toWeb",
          "ranges": [{ "startOffset": 25809, "endOffset": 25916, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "493",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/stream/promises.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1008, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "pipeline",
          "ranges": [{ "startOffset": 337, "endOffset": 963, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "494",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/transform.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 7098, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Transform",
          "ranges": [{ "startOffset": 3894, "endOffset": 5691, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "final",
          "ranges": [{ "startOffset": 5692, "endOffset": 6126, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "prefinish",
          "ranges": [{ "startOffset": 6127, "endOffset": 6207, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Transform._transform",
          "ranges": [{ "startOffset": 6276, "endOffset": 6371, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Transform._write",
          "ranges": [{ "startOffset": 6401, "endOffset": 6945, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Transform._read",
          "ranges": [{ "startOffset": 6974, "endOffset": 7097, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "495",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/readable-stream/lib/internal/streams/passthrough.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1748, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "PassThrough",
          "ranges": [{ "startOffset": 1524, "endOffset": 1659, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "PassThrough._transform",
          "ranges": [{ "startOffset": 1695, "endOffset": 1747, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "496",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/inherits/inherits.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 250, "count": 1 },
            { "startOffset": 108, "endOffset": 117, "count": 0 },
            { "startOffset": 154, "endOffset": 249, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "497",
      "url": "node:internal/util/parse_args/parse_args",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 12919, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getMainArgs",
          "ranges": [{ "startOffset": 1135, "endOffset": 1729, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "checkOptionLikeValue",
          "ranges": [{ "startOffset": 1874, "endOffset": 2478, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "checkOptionUsage",
          "ranges": [{ "startOffset": 2658, "endOffset": 3449, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "storeOption",
          "ranges": [{ "startOffset": 3772, "endOffset": 4596, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "storeDefaultOption",
          "ranges": [{ "startOffset": 4921, "endOffset": 5090, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "argsToTokens",
          "ranges": [{ "startOffset": 5365, "endOffset": 9345, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "parseArgs",
          "ranges": [{ "startOffset": 9365, "endOffset": 12881, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "498",
      "url": "node:internal/util/parse_args/utils",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 6225, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "objectGetOwn",
          "ranges": [{ "startOffset": 693, "endOffset": 782, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "optionsGetOwn",
          "ranges": [{ "startOffset": 865, "endOffset": 1011, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isOptionValue",
          "ranges": [{ "startOffset": 1277, "endOffset": 1502, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isOptionLikeValue",
          "ranges": [{ "startOffset": 1719, "endOffset": 1862, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isLoneShortOption",
          "ranges": [{ "startOffset": 1936, "endOffset": 2088, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isLoneLongOption",
          "ranges": [{ "startOffset": 2336, "endOffset": 2484, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isLongOptionAndValue",
          "ranges": [{ "startOffset": 2681, "endOffset": 2832, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isShortOptionGroup",
          "ranges": [{ "startOffset": 3724, "endOffset": 4109, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isShortOptionAndValue",
          "ranges": [{ "startOffset": 4418, "endOffset": 4847, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "findLongOptionForShort",
          "ranges": [{ "startOffset": 5170, "endOffset": 5472, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "useDefaultValueOption",
          "ranges": [{ "startOffset": 5797, "endOffset": 5967, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "499",
      "url": "node:internal/mime",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 10569, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toASCIILower",
          "ranges": [{ "startOffset": 587, "endOffset": 820, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "parseTypeAndSubtype",
          "ranges": [{ "startOffset": 866, "endOffset": 2524, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "removeBackslashes",
          "ranges": [{ "startOffset": 2641, "endOffset": 3056, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "escapeQuoteOrSolidus",
          "ranges": [{ "startOffset": 3059, "endOffset": 3271, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "encode",
          "ranges": [{ "startOffset": 3288, "endOffset": 3527, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 3530, "endOffset": 8526, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 8986, "endOffset": 10365, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "500",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/bl/BufferList.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 10354, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "BufferList",
          "ranges": [{ "startOffset": 92, "endOffset": 231, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_init",
          "ranges": [{ "startOffset": 252, "endOffset": 407, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_new",
          "ranges": [{ "startOffset": 437, "endOffset": 489, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_offset",
          "ranges": [{ "startOffset": 522, "endOffset": 809, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "BufferList._reverseOffset",
          "ranges": [{ "startOffset": 849, "endOffset": 1026, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getBuffers",
          "ranges": [{ "startOffset": 1062, "endOffset": 1108, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 1137, "endOffset": 1309, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "slice",
          "ranges": [{ "startOffset": 1340, "endOffset": 1561, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "copy",
          "ranges": [{ "startOffset": 1591, "endOffset": 3412, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "shallowSlice",
          "ranges": [{ "startOffset": 3450, "endOffset": 4117, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toString",
          "ranges": [{ "startOffset": 4151, "endOffset": 4246, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "consume",
          "ranges": [{ "startOffset": 4279, "endOffset": 4804, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "duplicate",
          "ranges": [{ "startOffset": 4839, "endOffset": 4990, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "append",
          "ranges": [{ "startOffset": 5022, "endOffset": 5110, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "prepend",
          "ranges": [{ "startOffset": 5143, "endOffset": 5239, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_attach",
          "ranges": [{ "startOffset": 5272, "endOffset": 6304, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "appendBuffer",
          "ranges": [{ "startOffset": 6343, "endOffset": 6425, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "prependBuffer",
          "ranges": [{ "startOffset": 6465, "endOffset": 6551, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "BufferList.indexOf",
          "ranges": [{ "startOffset": 6584, "endOffset": 8581, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "BufferList._match",
          "ranges": [{ "startOffset": 8613, "endOffset": 8898, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 8902, "endOffset": 9803, "count": 1 },
            { "startOffset": 9428, "endOffset": 9801, "count": 22 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 9435, "endOffset": 9793, "count": 22 },
            { "startOffset": 9481, "endOffset": 9641, "count": 4 },
            { "startOffset": 9641, "endOffset": 9787, "count": 18 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "BufferList.<computed>",
          "ranges": [{ "startOffset": 9517, "endOffset": 9633, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "BufferList.<computed>",
          "ranges": [{ "startOffset": 9683, "endOffset": 9779, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_isBufferList",
          "ranges": [{ "startOffset": 10142, "endOffset": 10235, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isBufferList",
          "ranges": [{ "startOffset": 10263, "endOffset": 10324, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "501",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt-packet/packet.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 214, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Packet",
          "ranges": [{ "startOffset": 17, "endOffset": 186, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "502",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt-packet/constants.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 7853, "count": 1 },
            { "startOffset": 850, "endOffset": 1037, "count": 14 },
            { "startOffset": 1122, "endOffset": 1179, "count": 16 },
            { "startOffset": 2818, "endOffset": 2898, "count": 27 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "genHeader",
          "ranges": [{ "startOffset": 3780, "endOffset": 4160, "count": 8 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3831, "endOffset": 4157, "count": 24 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3862, "endOffset": 4152, "count": 48 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 3895, "endOffset": 4145, "count": 96 },
            { "startOffset": 4037, "endOffset": 4056, "count": 48 },
            { "startOffset": 4057, "endOffset": 4060, "count": 48 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 5378, "endOffset": 5416, "count": 3 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "503",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/debug/src/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 314, "count": 1 },
            { "startOffset": 218, "endOffset": 264, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "504",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/debug/src/node.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 4728, "count": 1 },
            { "startOffset": 846, "endOffset": 1451, "count": 0 },
            { "startOffset": 1454, "endOffset": 1555, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 334, "endOffset": 342, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1779, "endOffset": 1819, "count": 66 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1828, "endOffset": 2286, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "useColors",
          "ranges": [
            { "startOffset": 2362, "endOffset": 2501, "count": 5 },
            { "startOffset": 2425, "endOffset": 2464, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "formatArgs",
          "ranges": [{ "startOffset": 2574, "endOffset": 3008, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getDate",
          "ranges": [{ "startOffset": 3010, "endOffset": 3125, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "log",
          "ranges": [{ "startOffset": 3225, "endOffset": 3341, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "save",
          "ranges": [
            { "startOffset": 3422, "endOffset": 3679, "count": 1 },
            { "startOffset": 3467, "endOffset": 3505, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "load",
          "ranges": [{ "startOffset": 3796, "endOffset": 3842, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "init",
          "ranges": [
            { "startOffset": 4007, "endOffset": 4210, "count": 5 },
            { "startOffset": 4143, "endOffset": 4208, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "formatters.o",
          "ranges": [{ "startOffset": 4375, "endOffset": 4531, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "formatters.O",
          "ranges": [{ "startOffset": 4624, "endOffset": 4726, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "505",
      "url": "node:tty",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 5058, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isatty",
          "ranges": [{ "startOffset": 1535, "endOffset": 1641, "count": 7 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "ReadStream",
          "ranges": [{ "startOffset": 1643, "endOffset": 2112, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReadStream.setRawMode",
          "ranges": [{ "startOffset": 2261, "endOffset": 2478, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "WriteStream",
          "ranges": [{ "startOffset": 2481, "endOffset": 3453, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "WriteStream._refreshSize",
          "ranges": [{ "startOffset": 3744, "endOffset": 4180, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "WriteStream.cursorTo",
          "ranges": [{ "startOffset": 4236, "endOffset": 4376, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "WriteStream.moveCursor",
          "ranges": [{ "startOffset": 4413, "endOffset": 4559, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "WriteStream.clearLine",
          "ranges": [{ "startOffset": 4595, "endOffset": 4734, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "WriteStream.clearScreenDown",
          "ranges": [{ "startOffset": 4776, "endOffset": 4911, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "WriteStream.getWindowSize",
          "ranges": [{ "startOffset": 4951, "endOffset": 5001, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "506",
      "url": "node:internal/tty",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 6485, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "warnOnDeactivatedColors",
          "ranges": [{ "startOffset": 2549, "endOffset": 3002, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getColorDepth",
          "ranges": [
            { "startOffset": 3160, "endOffset": 6156, "count": 1 },
            { "startOffset": 3403, "endOffset": 3411, "count": 0 },
            { "startOffset": 3418, "endOffset": 3427, "count": 0 },
            { "startOffset": 3434, "endOffset": 3510, "count": 0 },
            { "startOffset": 3517, "endOffset": 3591, "count": 0 },
            { "startOffset": 3598, "endOffset": 3672, "count": 0 },
            { "startOffset": 3722, "endOffset": 3838, "count": 0 },
            { "startOffset": 3839, "endOffset": 4061, "count": 0 },
            { "startOffset": 4063, "endOffset": 5412, "count": 0 },
            { "startOffset": 5417, "endOffset": 5434, "count": 0 },
            { "startOffset": 5439, "endOffset": 5479, "count": 0 },
            { "startOffset": 5484, "endOffset": 5531, "count": 0 },
            { "startOffset": 5535, "endOffset": 5601, "count": 0 },
            { "startOffset": 5603, "endOffset": 6155, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4899, "endOffset": 4920, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 5948, "endOffset": 6001, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "hasColors",
          "ranges": [{ "startOffset": 6158, "endOffset": 6431, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "507",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/supports-color/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 2748, "count": 1 },
            { "startOffset": 250, "endOffset": 270, "count": 0 },
            { "startOffset": 374, "endOffset": 394, "count": 0 },
            { "startOffset": 457, "endOffset": 479, "count": 0 },
            { "startOffset": 518, "endOffset": 540, "count": 0 },
            { "startOffset": 592, "endOffset": 595, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "translateLevel",
          "ranges": [
            { "startOffset": 648, "endOffset": 806, "count": 2 },
            { "startOffset": 719, "endOffset": 805, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "supportsColor",
          "ranges": [
            { "startOffset": 808, "endOffset": 2439, "count": 2 },
            { "startOffset": 897, "endOffset": 951, "count": 0 },
            { "startOffset": 952, "endOffset": 983, "count": 0 },
            { "startOffset": 985, "endOffset": 1079, "count": 0 },
            { "startOffset": 1080, "endOffset": 1107, "count": 0 },
            { "startOffset": 1109, "endOffset": 1155, "count": 0 },
            { "startOffset": 1184, "endOffset": 2438, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1706, "endOffset": 1725, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getSupportLevel",
          "ranges": [{ "startOffset": 2441, "endOffset": 2570, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "508",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/has-flag/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 330, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [
            { "startOffset": 32, "endOffset": 328, "count": 8 },
            { "startOffset": 102, "endOffset": 106, "count": 0 },
            { "startOffset": 128, "endOffset": 133, "count": 0 },
            { "startOffset": 262, "endOffset": 325, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "509",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/debug/src/common.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 6915, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "setup",
          "ranges": [{ "startOffset": 108, "endOffset": 6889, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 422, "endOffset": 464, "count": 9 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "selectColor",
          "ranges": [
            { "startOffset": 1012, "endOffset": 1290, "count": 5 },
            { "startOffset": 1108, "endOffset": 1213, "count": 93 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "createDebug",
          "ranges": [{ "startOffset": 1460, "endOffset": 3626, "count": 5 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "debug",
          "ranges": [{ "startOffset": 1585, "endOffset": 2796, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 3149, "endOffset": 3415, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 3425, "endOffset": 3460, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "extend",
          "ranges": [{ "startOffset": 3629, "endOffset": 3832, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "enable",
          "ranges": [
            { "startOffset": 3993, "endOffset": 4436, "count": 1 },
            { "startOffset": 4196, "endOffset": 4208, "count": 0 },
            { "startOffset": 4314, "endOffset": 4433, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "matchesTemplate",
          "ranges": [{ "startOffset": 4629, "endOffset": 5656, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "disable",
          "ranges": [{ "startOffset": 5742, "endOffset": 5933, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "enabled",
          "ranges": [{ "startOffset": 6076, "endOffset": 6330, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "coerce",
          "ranges": [{ "startOffset": 6419, "endOffset": 6528, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "destroy",
          "ranges": [{ "startOffset": 6647, "endOffset": 6823, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "510",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/ms/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3024, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports",
          "ranges": [{ "startOffset": 422, "endOffset": 792, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "parse",
          "ranges": [{ "startOffset": 916, "endOffset": 1999, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fmtShort",
          "ranges": [{ "startOffset": 2097, "endOffset": 2414, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fmtLong",
          "ranges": [{ "startOffset": 2511, "endOffset": 2847, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "plural",
          "ranges": [{ "startOffset": 2883, "endOffset": 3023, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "511",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt-packet/generate.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1237, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "generate",
          "ranges": [{ "startOffset": 130, "endOffset": 264, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Accumulator",
          "ranges": [{ "startOffset": 309, "endOffset": 389, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "write",
          "ranges": [{ "startOffset": 393, "endOffset": 463, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "concat",
          "ranges": [{ "startOffset": 467, "endOffset": 1147, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "destroy",
          "ranges": [{ "startOffset": 1151, "endOffset": 1207, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "512",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt-packet/writeToStream.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 31319, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "generate",
          "ranges": [{ "startOffset": 598, "endOffset": 1760, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 1931, "endOffset": 1988, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 1992, "endOffset": 2226, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "uncork",
          "ranges": [{ "startOffset": 2231, "endOffset": 2277, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "connect",
          "ranges": [{ "startOffset": 2279, "endOffset": 7613, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "connack",
          "ranges": [{ "startOffset": 7615, "endOffset": 8525, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "publish",
          "ranges": [{ "startOffset": 8527, "endOffset": 10180, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "confirmation",
          "ranges": [{ "startOffset": 10223, "endOffset": 12080, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "subscribe",
          "ranges": [{ "startOffset": 12082, "endOffset": 15029, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "suback",
          "ranges": [{ "startOffset": 15031, "endOffset": 16315, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unsubscribe",
          "ranges": [{ "startOffset": 16317, "endOffset": 17786, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unsuback",
          "ranges": [{ "startOffset": 17788, "endOffset": 19252, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "emptyPacket",
          "ranges": [{ "startOffset": 19254, "endOffset": 19351, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "disconnect",
          "ranges": [{ "startOffset": 19353, "endOffset": 20167, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "auth",
          "ranges": [{ "startOffset": 20169, "endOffset": 20974, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeVarByteInt",
          "ranges": [{ "startOffset": 21268, "endOffset": 21679, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeString",
          "ranges": [{ "startOffset": 21923, "endOffset": 22111, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeStringPair",
          "ranges": [{ "startOffset": 22384, "endOffset": 22491, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeNumberCached",
          "ranges": [{ "startOffset": 22738, "endOffset": 22925, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeNumberGenerated",
          "ranges": [{ "startOffset": 22926, "endOffset": 23117, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "write4ByteNumber",
          "ranges": [{ "startOffset": 23118, "endOffset": 23321, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeStringOrBuffer",
          "ranges": [{ "startOffset": 23572, "endOffset": 23814, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getProperties",
          "ranges": [{ "startOffset": 23816, "endOffset": 27903, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getPropertiesByMaximumPacketSize",
          "ranges": [{ "startOffset": 27905, "endOffset": 28631, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeProperty",
          "ranges": [{ "startOffset": 28633, "endOffset": 30418, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "writeProperties",
          "ranges": [{ "startOffset": 30420, "endOffset": 31009, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "byteLength",
          "ranges": [{ "startOffset": 31011, "endOffset": 31190, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isStringOrBuffer",
          "ranges": [{ "startOffset": 31192, "endOffset": 31291, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "513",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt-packet/numbers.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1317, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateBuffer",
          "ranges": [{ "startOffset": 375, "endOffset": 532, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "generateCache",
          "ranges": [{ "startOffset": 534, "endOffset": 634, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "genBufVariableByteInt",
          "ranges": [{ "startOffset": 636, "endOffset": 1061, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "generate4ByteBuffer",
          "ranges": [{ "startOffset": 1063, "endOffset": 1187, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "514",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/process-nextick-args/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 1083, "count": 1 },
            { "startOffset": 162, "endOffset": 203, "count": 0 },
            { "startOffset": 205, "endOffset": 251, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "nextTick",
          "ranges": [{ "startOffset": 289, "endOffset": 1081, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "515",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/rfdc/default.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 55, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "516",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/rfdc/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 5847, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "copyBuffer",
          "ranges": [{ "startOffset": 36, "endOffset": 206, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rfdc",
          "ranges": [
            { "startOffset": 208, "endOffset": 2782, "count": 1 },
            { "startOffset": 271, "endOffset": 295, "count": 0 },
            { "startOffset": 585, "endOffset": 704, "count": 0 },
            { "startOffset": 748, "endOffset": 760, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 369, "endOffset": 387, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 420, "endOffset": 469, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 502, "endOffset": 551, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "cloneArray",
          "ranges": [{ "startOffset": 772, "endOffset": 1318, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clone",
          "ranges": [{ "startOffset": 1322, "endOffset": 2068, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "cloneProto",
          "ranges": [{ "startOffset": 2072, "endOffset": 2780, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rfdcCircles",
          "ranges": [{ "startOffset": 2784, "endOffset": 5846, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "517",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/validations.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 853, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "validateTopic",
          "ranges": [{ "startOffset": 157, "endOffset": 555, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateTopics",
          "ranges": [{ "startOffset": 556, "endOffset": 813, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "518",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/store.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2140, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 223, "endOffset": 2081, "count": 0 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "519",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2324, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "__importDefault",
          "ranges": [
            { "startOffset": 70, "endOffset": 151, "count": 5 },
            { "startOffset": 128, "endOffset": 148, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "handle",
          "ranges": [{ "startOffset": 500, "endOffset": 2263, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "520",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/publish.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 4311, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "handlePublish",
          "ranges": [{ "startOffset": 168, "endOffset": 4241, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "521",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/auth.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1071, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "handleAuth",
          "ranges": [{ "startOffset": 167, "endOffset": 1007, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "522",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/shared.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 1868, "count": 1 },
            { "startOffset": 1712, "endOffset": 1768, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 224, "endOffset": 500, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 552, "endOffset": 842, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "applyMixin",
          "ranges": [
            { "startOffset": 898, "endOffset": 1625, "count": 1 },
            { "startOffset": 1147, "endOffset": 1202, "count": 0 },
            { "startOffset": 1367, "endOffset": 1617, "count": 19 },
            { "startOffset": 1431, "endOffset": 1607, "count": 18 },
            { "startOffset": 1549, "endOffset": 1591, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "exports.nextTick",
          "ranges": [{ "startOffset": 1714, "endOffset": 1768, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "523",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/ack.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 4690, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "handleAck",
          "ranges": [{ "startOffset": 1617, "endOffset": 4628, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "524",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/connack.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1998, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "__importDefault",
          "ranges": [
            { "startOffset": 70, "endOffset": 151, "count": 1 },
            { "startOffset": 128, "endOffset": 148, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "handleConnack",
          "ranges": [{ "startOffset": 385, "endOffset": 1928, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "525",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/topic-alias-send.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1731, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 175, "endOffset": 1652, "count": 0 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "526",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/lru-cache/dist/commonjs/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 55020, "count": 1 },
            { "startOffset": 263, "endOffset": 269, "count": 0 },
            { "startOffset": 387, "endOffset": 391, "count": 0 },
            { "startOffset": 740, "endOffset": 2309, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "emitWarning",
          "ranges": [{ "startOffset": 436, "endOffset": 615, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 768, "endOffset": 954, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 982, "endOffset": 1491, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "warnACPolyfill",
          "ranges": [{ "startOffset": 1603, "endOffset": 2306, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "shouldWarn",
          "ranges": [{ "startOffset": 2350, "endOffset": 2377, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isPosInt",
          "ranges": [{ "startOffset": 2425, "endOffset": 2480, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getUintArray",
          "ranges": [{ "startOffset": 2995, "endOffset": 3312, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ZeroArray",
          "ranges": [{ "startOffset": 3371, "endOffset": 3439, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 3442, "endOffset": 4192, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<static_initializer>",
          "ranges": [{ "startOffset": 3509, "endOffset": 3537, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 4826, "endOffset": 54957, "count": 0 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "527",
      "url": "node:perf_hooks",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1065, "count": 1 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "528",
      "url": "node:internal/perf/resource_timing",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 4831, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "InternalPerformanceResourceTiming",
          "ranges": [{ "startOffset": 735, "endOffset": 1195, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1199, "endOffset": 1270, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get name",
          "ranges": [{ "startOffset": 1274, "endOffset": 1322, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get startTime",
          "ranges": [{ "startOffset": 1326, "endOffset": 1387, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get duration",
          "ranges": [{ "startOffset": 1391, "endOffset": 1479, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get initiatorType",
          "ranges": [{ "startOffset": 1483, "endOffset": 1541, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get workerStart",
          "ranges": [{ "startOffset": 1545, "endOffset": 1626, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get redirectStart",
          "ranges": [{ "startOffset": 1630, "endOffset": 1703, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get redirectEnd",
          "ranges": [{ "startOffset": 1707, "endOffset": 1776, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get fetchStart",
          "ranges": [{ "startOffset": 1780, "endOffset": 1854, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get domainLookupStart",
          "ranges": [{ "startOffset": 1858, "endOffset": 1966, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get domainLookupEnd",
          "ranges": [{ "startOffset": 1970, "endOffset": 2074, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get connectStart",
          "ranges": [{ "startOffset": 2078, "endOffset": 2179, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get connectEnd",
          "ranges": [{ "startOffset": 2183, "endOffset": 2280, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get secureConnectionStart",
          "ranges": [{ "startOffset": 2284, "endOffset": 2407, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get nextHopProtocol",
          "ranges": [{ "startOffset": 2411, "endOffset": 2525, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get requestStart",
          "ranges": [{ "startOffset": 2529, "endOffset": 2612, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get responseStart",
          "ranges": [{ "startOffset": 2616, "endOffset": 2701, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get responseEnd",
          "ranges": [{ "startOffset": 2705, "endOffset": 2766, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get encodedBodySize",
          "ranges": [{ "startOffset": 2770, "endOffset": 2843, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get decodedBodySize",
          "ranges": [{ "startOffset": 2847, "endOffset": 2920, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get transferSize",
          "ranges": [{ "startOffset": 2924, "endOffset": 3103, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toJSON",
          "ranges": [{ "startOffset": 3107, "endOffset": 3970, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "PerformanceResourceTiming",
          "ranges": [{ "startOffset": 4052, "endOffset": 4112, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "markResourceTiming",
          "ranges": [{ "startOffset": 4183, "endOffset": 4756, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "529",
      "url": "node:internal/perf/usertiming",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 4934, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getMark",
          "ranges": [{ "startOffset": 983, "endOffset": 1435, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "PerformanceMark",
          "ranges": [{ "startOffset": 1496, "endOffset": 2093, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2097, "endOffset": 2158, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "PerformanceMeasure",
          "ranges": [{ "startOffset": 2224, "endOffset": 2325, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2329, "endOffset": 2393, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "mark",
          "ranges": [{ "startOffset": 2397, "endOffset": 2553, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "calculateStartDuration",
          "ranges": [{ "startOffset": 2555, "endOffset": 4138, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "measure",
          "ranges": [{ "startOffset": 4140, "endOffset": 4573, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearMarkTimings",
          "ranges": [{ "startOffset": 4575, "endOffset": 4830, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "530",
      "url": "node:internal/perf/nodetiming",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3516, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "PerformanceNodeTiming",
          "ranges": [{ "startOffset": 729, "endOffset": 2742, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 1394, "endOffset": 1490, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 1606, "endOffset": 1700, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 1820, "endOffset": 1917, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 2035, "endOffset": 2131, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 2248, "endOffset": 2343, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 2469, "endOffset": 2586, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2746, "endOffset": 2987, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toJSON",
          "ranges": [{ "startOffset": 2991, "endOffset": 3377, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "531",
      "url": "node:internal/structured_clone",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 661, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "structuredClone",
          "ranges": [{ "startOffset": 186, "endOffset": 618, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "532",
      "url": "node:internal/worker/io",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 15478, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "MessagePort.hasRef",
          "ranges": [{ "startOffset": 3683, "endOffset": 3766, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "validateMessagePort",
          "ranges": [{ "startOffset": 3769, "endOffset": 3907, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isMessageEvent",
          "ranges": [{ "startOffset": 3909, "endOffset": 3985, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "MessageEvent",
          "ranges": [{ "startOffset": 4024, "endOffset": 4540, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 4628, "endOffset": 4752, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 4862, "endOffset": 4988, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 5103, "endOffset": 5234, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 5344, "endOffset": 5470, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 5579, "endOffset": 5704, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "value",
          "ranges": [{ "startOffset": 5946, "endOffset": 6264, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "oninit",
          "ranges": [{ "startOffset": 6403, "endOffset": 6546, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "MessagePortCloseEvent",
          "ranges": [{ "startOffset": 6848, "endOffset": 6887, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onclose",
          "ranges": [{ "startOffset": 6960, "endOffset": 7033, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "MessagePort.close",
          "ranges": [{ "startOffset": 7214, "endOffset": 7349, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "inspect",
          "ranges": [{ "startOffset": 7482, "endOffset": 8109, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setupPortReferencing",
          "ranges": [{ "startOffset": 8116, "endOffset": 9479, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ReadableWorkerStdio",
          "ranges": [{ "startOffset": 9529, "endOffset": 9878, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_read",
          "ranges": [{ "startOffset": 9882, "endOffset": 10188, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "WritableWorkerStdio",
          "ranges": [{ "startOffset": 10239, "endOffset": 10388, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_writev",
          "ranges": [{ "startOffset": 10392, "endOffset": 10768, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_final",
          "ranges": [{ "startOffset": 10772, "endOffset": 10952, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 10956, "endOffset": 11203, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createWorkerStdio",
          "ranges": [{ "startOffset": 11207, "endOffset": 11477, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "receiveMessageOnPort",
          "ranges": [{ "startOffset": 11479, "endOffset": 11659, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "onMessageEvent",
          "ranges": [{ "startOffset": 11661, "endOffset": 11756, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isBroadcastChannel",
          "ranges": [{ "startOffset": 11758, "endOffset": 11844, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "BroadcastChannel",
          "ranges": [{ "startOffset": 11931, "endOffset": 12445, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 12449, "endOffset": 12862, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get name",
          "ranges": [{ "startOffset": 12898, "endOffset": 13027, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "close",
          "ranges": [{ "startOffset": 13064, "endOffset": 13462, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "postMessage",
          "ranges": [{ "startOffset": 13530, "endOffset": 13940, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ref",
          "ranges": [{ "startOffset": 14223, "endOffset": 14390, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unref",
          "ranges": [{ "startOffset": 14675, "endOffset": 14846, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "533",
      "url": "node:internal/perf/performance",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 5348, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Performance",
          "ranges": [{ "startOffset": 1086, "endOffset": 1146, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1150, "endOffset": 1445, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toJSON",
          "ranges": [{ "startOffset": 1449, "endOffset": 1607, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearMarks",
          "ranges": [{ "startOffset": 1609, "endOffset": 1758, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearMeasures",
          "ranges": [{ "startOffset": 1760, "endOffset": 1889, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearResourceTimings",
          "ranges": [{ "startOffset": 1891, "endOffset": 2028, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getEntries",
          "ranges": [{ "startOffset": 2030, "endOffset": 2096, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getEntriesByName",
          "ranges": [{ "startOffset": 2098, "endOffset": 2285, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getEntriesByType",
          "ranges": [{ "startOffset": 2287, "endOffset": 2474, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 4615, "endOffset": 4810, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 4816, "endOffset": 4950, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "dispatchBufferFull",
          "ranges": [{ "startOffset": 5113, "endOffset": 5251, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "534",
      "url": "node:internal/perf/event_loop_utilization",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 876, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eventLoopUtilization",
          "ranges": [{ "startOffset": 121, "endOffset": 835, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "535",
      "url": "node:internal/perf/timerify",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2280, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "processComplete",
          "ranges": [{ "startOffset": 608, "endOffset": 985, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "timerify",
          "ranges": [{ "startOffset": 987, "endOffset": 2251, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "536",
      "url": "node:internal/histogram",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 8273, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isHistogram",
          "ranges": [{ "startOffset": 913, "endOffset": 987, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Histogram",
          "ranges": [{ "startOffset": 1009, "endOffset": 1069, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1073, "endOffset": 1485, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get count",
          "ranges": [{ "startOffset": 1536, "endOffset": 1663, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get countBigInt",
          "ranges": [{ "startOffset": 1714, "endOffset": 1853, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get min",
          "ranges": [{ "startOffset": 1904, "endOffset": 2027, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get minBigInt",
          "ranges": [{ "startOffset": 2078, "endOffset": 2213, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get max",
          "ranges": [{ "startOffset": 2264, "endOffset": 2387, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get maxBigInt",
          "ranges": [{ "startOffset": 2438, "endOffset": 2573, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get mean",
          "ranges": [{ "startOffset": 2624, "endOffset": 2749, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get exceeds",
          "ranges": [{ "startOffset": 2800, "endOffset": 2931, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get exceedsBigInt",
          "ranges": [{ "startOffset": 2982, "endOffset": 3125, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get stddev",
          "ranges": [{ "startOffset": 3176, "endOffset": 3305, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "percentile",
          "ranges": [{ "startOffset": 3376, "endOffset": 3725, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "percentileBigInt",
          "ranges": [{ "startOffset": 3796, "endOffset": 4157, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get percentiles",
          "ranges": [{ "startOffset": 4220, "endOffset": 4409, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get percentilesBigInt",
          "ranges": [{ "startOffset": 4472, "endOffset": 4673, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reset",
          "ranges": [{ "startOffset": 4710, "endOffset": 4826, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4830, "endOffset": 4987, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4991, "endOffset": 5051, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toJSON",
          "ranges": [{ "startOffset": 5055, "endOffset": 5312, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "RecordableHistogram",
          "ranges": [{ "startOffset": 5364, "endOffset": 5424, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "record",
          "ranges": [{ "startOffset": 5493, "endOffset": 5964, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "recordDelta",
          "ranges": [{ "startOffset": 6001, "endOffset": 6152, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "add",
          "ranges": [{ "startOffset": 6208, "endOffset": 6481, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6485, "endOffset": 6652, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 6656, "endOffset": 6716, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "internalHistogram",
          "ranges": [{ "startOffset": 6720, "endOffset": 6907, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "internalHistogram.<computed>",
          "ranges": [{ "startOffset": 6952, "endOffset": 6960, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "internalRecordableHistogram",
          "ranges": [{ "startOffset": 6963, "endOffset": 7202, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "internalRecordableHistogram.<computed>",
          "ranges": [{ "startOffset": 7257, "endOffset": 7265, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createHistogram",
          "ranges": [{ "startOffset": 7409, "endOffset": 8096, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "537",
      "url": "node:internal/perf/event_loop_delay",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1724, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ELDHistogram",
          "ranges": [{ "startOffset": 625, "endOffset": 686, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "enable",
          "ranges": [{ "startOffset": 726, "endOffset": 937, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "disable",
          "ranges": [{ "startOffset": 977, "endOffset": 1190, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "monitorEventLoopDelay",
          "ranges": [{ "startOffset": 1283, "endOffset": 1682, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "538",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/number-allocator/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 186, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "539",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/number-allocator/lib/number-allocator.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 6827, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Interval",
          "ranges": [{ "startOffset": 428, "endOffset": 497, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Interval.equals",
          "ranges": [{ "startOffset": 527, "endOffset": 607, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Interval.compare",
          "ranges": [{ "startOffset": 638, "endOffset": 794, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "NumberAllocator",
          "ranges": [{ "startOffset": 1099, "endOffset": 1396, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "NumberAllocator.firstVacant",
          "ranges": [{ "startOffset": 1716, "endOffset": 1800, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "NumberAllocator.alloc",
          "ranges": [{ "startOffset": 2029, "endOffset": 2430, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "NumberAllocator.use",
          "ranges": [{ "startOffset": 2805, "endOffset": 3806, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "NumberAllocator.free",
          "ranges": [{ "startOffset": 4170, "endOffset": 5949, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "NumberAllocator.clear",
          "ranges": [{ "startOffset": 6093, "endOffset": 6201, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "NumberAllocator.intervalCount",
          "ranges": [{ "startOffset": 6439, "endOffset": 6478, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "NumberAllocator.dump",
          "ranges": [{ "startOffset": 6671, "endOffset": 6792, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "540",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2426, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 147, "endOffset": 196, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 277, "endOffset": 328, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 409, "endOffset": 460, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 542, "endOffset": 594, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 678, "endOffset": 732, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 816, "endOffset": 870, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 957, "endOffset": 1014, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 1093, "endOffset": 1142, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 1221, "endOffset": 1270, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get",
          "ranges": [{ "startOffset": 1350, "endOffset": 1400, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_interopRequireDefault",
          "ranges": [
            { "startOffset": 2299, "endOffset": 2391, "count": 10 },
            { "startOffset": 2360, "endOffset": 2388, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "541",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/OtherContainer/Stack.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 749, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Stack",
          "ranges": [{ "startOffset": 198, "endOffset": 356, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clear",
          "ranges": [{ "startOffset": 361, "endOffset": 417, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "push",
          "ranges": [{ "startOffset": 422, "endOffset": 505, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pop",
          "ranges": [{ "startOffset": 510, "endOffset": 607, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "top",
          "ranges": [{ "startOffset": 612, "endOffset": 660, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "542",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/ContainerBase/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 659, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "ContainerIterator",
          "ranges": [{ "startOffset": 176, "endOffset": 233, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "equals",
          "ranges": [{ "startOffset": 238, "endOffset": 286, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Base",
          "ranges": [{ "startOffset": 355, "endOffset": 396, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get length",
          "ranges": [{ "startOffset": 401, "endOffset": 444, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "size",
          "ranges": [{ "startOffset": 449, "endOffset": 486, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "empty",
          "ranges": [{ "startOffset": 491, "endOffset": 535, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "543",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/OtherContainer/Queue.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1126, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "Queue",
          "ranges": [{ "startOffset": 198, "endOffset": 376, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clear",
          "ranges": [{ "startOffset": 381, "endOffset": 446, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "push",
          "ranges": [{ "startOffset": 451, "endOffset": 825, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pop",
          "ranges": [{ "startOffset": 830, "endOffset": 952, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "front",
          "ranges": [{ "startOffset": 957, "endOffset": 1037, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "544",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/OtherContainer/PriorityQueue.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2680, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "PriorityQueue",
          "ranges": [{ "startOffset": 206, "endOffset": 771, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "m",
          "ranges": [{ "startOffset": 776, "endOffset": 1029, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "k",
          "ranges": [{ "startOffset": 1034, "endOffset": 1441, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clear",
          "ranges": [{ "startOffset": 1446, "endOffset": 1508, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "push",
          "ranges": [{ "startOffset": 1513, "endOffset": 1597, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pop",
          "ranges": [{ "startOffset": 1602, "endOffset": 1844, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "top",
          "ranges": [{ "startOffset": 1849, "endOffset": 1888, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "find",
          "ranges": [{ "startOffset": 1893, "endOffset": 1947, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "remove",
          "ranges": [{ "startOffset": 1952, "endOffset": 2355, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "updateItem",
          "ranges": [{ "startOffset": 2360, "endOffset": 2523, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "toArray",
          "ranges": [{ "startOffset": 2528, "endOffset": 2575, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "545",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/Vector.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3485, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_interopRequireDefault",
          "ranges": [
            { "startOffset": 214, "endOffset": 306, "count": 1 },
            { "startOffset": 275, "endOffset": 303, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "VectorIterator",
          "ranges": [{ "startOffset": 374, "endOffset": 451, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "copy",
          "ranges": [{ "startOffset": 456, "endOffset": 548, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Vector",
          "ranges": [{ "startOffset": 593, "endOffset": 914, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clear",
          "ranges": [{ "startOffset": 919, "endOffset": 981, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "begin",
          "ranges": [{ "startOffset": 986, "endOffset": 1045, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "end",
          "ranges": [{ "startOffset": 1050, "endOffset": 1112, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rBegin",
          "ranges": [{ "startOffset": 1117, "endOffset": 1189, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rEnd",
          "ranges": [{ "startOffset": 1194, "endOffset": 1256, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "front",
          "ranges": [{ "startOffset": 1261, "endOffset": 1302, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "back",
          "ranges": [{ "startOffset": 1307, "endOffset": 1356, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getElementByPos",
          "ranges": [{ "startOffset": 1361, "endOffset": 1496, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByPos",
          "ranges": [{ "startOffset": 1501, "endOffset": 1685, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByValue",
          "ranges": [{ "startOffset": 1690, "endOffset": 1941, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByIterator",
          "ranges": [{ "startOffset": 1946, "endOffset": 2077, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pushBack",
          "ranges": [{ "startOffset": 2082, "endOffset": 2169, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "popBack",
          "ranges": [{ "startOffset": 2174, "endOffset": 2275, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setElementByPos",
          "ranges": [{ "startOffset": 2280, "endOffset": 2415, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "insert",
          "ranges": [{ "startOffset": 2420, "endOffset": 2624, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "find",
          "ranges": [{ "startOffset": 2629, "endOffset": 2825, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reverse",
          "ranges": [{ "startOffset": 2830, "endOffset": 2873, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unique",
          "ranges": [{ "startOffset": 2878, "endOffset": 3127, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "sort",
          "ranges": [{ "startOffset": 3132, "endOffset": 3171, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "forEach",
          "ranges": [{ "startOffset": 3176, "endOffset": 3282, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3287, "endOffset": 3394, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "546",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/Base/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 317, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "547",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/Base/RandomIterator.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1622, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "RandomIterator",
          "ranges": [{ "startOffset": 287, "endOffset": 1375, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get pointer",
          "ranges": [{ "startOffset": 1380, "endOffset": 1456, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set pointer",
          "ranges": [{ "startOffset": 1461, "endOffset": 1534, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "548",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/utils/throwError.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 268, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "throwIteratorAccessError",
          "ranges": [{ "startOffset": 136, "endOffset": 228, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "549",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/LinkList.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 7618, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_interopRequireDefault",
          "ranges": [
            { "startOffset": 262, "endOffset": 354, "count": 1 },
            { "startOffset": 323, "endOffset": 351, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "LinkListIterator",
          "ranges": [{ "startOffset": 426, "endOffset": 1571, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get pointer",
          "ranges": [{ "startOffset": 1576, "endOffset": 1722, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "set pointer",
          "ranges": [{ "startOffset": 1727, "endOffset": 1871, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "copy",
          "ranges": [{ "startOffset": 1876, "endOffset": 1978, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "LinkList",
          "ranges": [{ "startOffset": 2025, "endOffset": 2243, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "V",
          "ranges": [{ "startOffset": 2248, "endOffset": 2471, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "G",
          "ranges": [{ "startOffset": 2476, "endOffset": 2777, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clear",
          "ranges": [{ "startOffset": 2782, "endOffset": 2873, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "begin",
          "ranges": [{ "startOffset": 2878, "endOffset": 2952, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "end",
          "ranges": [{ "startOffset": 2957, "endOffset": 3029, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rBegin",
          "ranges": [{ "startOffset": 3034, "endOffset": 3112, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rEnd",
          "ranges": [{ "startOffset": 3117, "endOffset": 3193, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "front",
          "ranges": [{ "startOffset": 3198, "endOffset": 3238, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "back",
          "ranges": [{ "startOffset": 3243, "endOffset": 3282, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getElementByPos",
          "ranges": [{ "startOffset": 3287, "endOffset": 3493, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByPos",
          "ranges": [{ "startOffset": 3498, "endOffset": 3728, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByValue",
          "ranges": [{ "startOffset": 3733, "endOffset": 3942, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByIterator",
          "ranges": [{ "startOffset": 3947, "endOffset": 4157, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pushBack",
          "ranges": [{ "startOffset": 4162, "endOffset": 4231, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "popBack",
          "ranges": [{ "startOffset": 4236, "endOffset": 4357, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pushFront",
          "ranges": [{ "startOffset": 4362, "endOffset": 4432, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "popFront",
          "ranges": [{ "startOffset": 4437, "endOffset": 4559, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setElementByPos",
          "ranges": [{ "startOffset": 4564, "endOffset": 4770, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "insert",
          "ranges": [{ "startOffset": 4775, "endOffset": 5498, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "find",
          "ranges": [{ "startOffset": 5503, "endOffset": 5736, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reverse",
          "ranges": [{ "startOffset": 5741, "endOffset": 6035, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unique",
          "ranges": [{ "startOffset": 6040, "endOffset": 6420, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "sort",
          "ranges": [{ "startOffset": 6425, "endOffset": 6698, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "merge",
          "ranges": [{ "startOffset": 6703, "endOffset": 7112, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "forEach",
          "ranges": [{ "startOffset": 7117, "endOffset": 7271, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 7276, "endOffset": 7523, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "550",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/Deque.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 9181, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_interopRequireDefault",
          "ranges": [
            { "startOffset": 214, "endOffset": 306, "count": 1 },
            { "startOffset": 275, "endOffset": 303, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "DequeIterator",
          "ranges": [{ "startOffset": 373, "endOffset": 450, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "copy",
          "ranges": [{ "startOffset": 455, "endOffset": 546, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Deque",
          "ranges": [{ "startOffset": 590, "endOffset": 1489, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "T",
          "ranges": [{ "startOffset": 1494, "endOffset": 2078, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "O",
          "ranges": [{ "startOffset": 2083, "endOffset": 2405, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clear",
          "ranges": [{ "startOffset": 2410, "endOffset": 2562, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "begin",
          "ranges": [{ "startOffset": 2567, "endOffset": 2625, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "end",
          "ranges": [{ "startOffset": 2630, "endOffset": 2691, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rBegin",
          "ranges": [{ "startOffset": 2696, "endOffset": 2767, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rEnd",
          "ranges": [{ "startOffset": 2772, "endOffset": 2833, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "front",
          "ranges": [{ "startOffset": 2838, "endOffset": 2926, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "back",
          "ranges": [{ "startOffset": 2931, "endOffset": 3018, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pushBack",
          "ranges": [{ "startOffset": 3023, "endOffset": 3482, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "popBack",
          "ranges": [{ "startOffset": 3487, "endOffset": 3928, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "pushFront",
          "ranges": [{ "startOffset": 3933, "endOffset": 4402, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "popFront",
          "ranges": [{ "startOffset": 4407, "endOffset": 4840, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getElementByPos",
          "ranges": [{ "startOffset": 4845, "endOffset": 5058, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setElementByPos",
          "ranges": [{ "startOffset": 5063, "endOffset": 5276, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "insert",
          "ranges": [{ "startOffset": 5281, "endOffset": 5871, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "cut",
          "ranges": [{ "startOffset": 5876, "endOffset": 6131, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByPos",
          "ranges": [{ "startOffset": 6136, "endOffset": 6674, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByValue",
          "ranges": [{ "startOffset": 6679, "endOffset": 7030, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByIterator",
          "ranges": [{ "startOffset": 7035, "endOffset": 7166, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "find",
          "ranges": [{ "startOffset": 7171, "endOffset": 7380, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reverse",
          "ranges": [{ "startOffset": 7385, "endOffset": 7672, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "unique",
          "ranges": [{ "startOffset": 7677, "endOffset": 8093, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "sort",
          "ranges": [{ "startOffset": 8098, "endOffset": 8324, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "shrinkToFit",
          "ranges": [{ "startOffset": 8329, "endOffset": 8774, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "forEach",
          "ranges": [{ "startOffset": 8779, "endOffset": 8899, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 8904, "endOffset": 9092, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "551",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/OrderedSet.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2576, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_interopRequireDefault",
          "ranges": [
            { "startOffset": 288, "endOffset": 380, "count": 2 },
            { "startOffset": 349, "endOffset": 377, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "OrderedSetIterator",
          "ranges": [{ "startOffset": 443, "endOffset": 526, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get pointer",
          "ranges": [{ "startOffset": 531, "endOffset": 677, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "copy",
          "ranges": [{ "startOffset": 682, "endOffset": 786, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "OrderedSet",
          "ranges": [{ "startOffset": 835, "endOffset": 984, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "K",
          "ranges": [{ "startOffset": 989, "endOffset": 1115, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "begin",
          "ranges": [{ "startOffset": 1120, "endOffset": 1208, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "end",
          "ranges": [{ "startOffset": 1213, "endOffset": 1287, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rBegin",
          "ranges": [{ "startOffset": 1292, "endOffset": 1384, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rEnd",
          "ranges": [{ "startOffset": 1389, "endOffset": 1467, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "front",
          "ranges": [{ "startOffset": 1472, "endOffset": 1537, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "back",
          "ranges": [{ "startOffset": 1542, "endOffset": 1606, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "insert",
          "ranges": [{ "startOffset": 1611, "endOffset": 1671, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "find",
          "ranges": [{ "startOffset": 1676, "endOffset": 1784, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lowerBound",
          "ranges": [{ "startOffset": 1789, "endOffset": 1903, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "upperBound",
          "ranges": [{ "startOffset": 1908, "endOffset": 2022, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reverseLowerBound",
          "ranges": [{ "startOffset": 2027, "endOffset": 2148, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reverseUpperBound",
          "ranges": [{ "startOffset": 2153, "endOffset": 2275, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "union",
          "ranges": [{ "startOffset": 2280, "endOffset": 2414, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2419, "endOffset": 2477, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "552",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/Base/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 14572, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "TreeContainer",
          "ranges": [{ "startOffset": 311, "endOffset": 1690, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "X",
          "ranges": [{ "startOffset": 1695, "endOffset": 1979, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Z",
          "ranges": [{ "startOffset": 1984, "endOffset": 2243, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "$",
          "ranges": [{ "startOffset": 2248, "endOffset": 2532, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rr",
          "ranges": [{ "startOffset": 2537, "endOffset": 2796, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ue",
          "ranges": [{ "startOffset": 2801, "endOffset": 4811, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fe",
          "ranges": [{ "startOffset": 4816, "endOffset": 5547, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "oe",
          "ranges": [{ "startOffset": 5552, "endOffset": 5737, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "he",
          "ranges": [{ "startOffset": 5742, "endOffset": 8652, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ne",
          "ranges": [{ "startOffset": 8657, "endOffset": 11707, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "I",
          "ranges": [{ "startOffset": 11712, "endOffset": 11959, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clear",
          "ranges": [{ "startOffset": 11964, "endOffset": 12099, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "updateKeyByIterator",
          "ranges": [{ "startOffset": 12104, "endOffset": 12873, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByPos",
          "ranges": [{ "startOffset": 12878, "endOffset": 13247, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByKey",
          "ranges": [{ "startOffset": 13252, "endOffset": 13437, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByIterator",
          "ranges": [{ "startOffset": 13442, "endOffset": 13831, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "forEach",
          "ranges": [{ "startOffset": 13836, "endOffset": 13920, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getElementByPos",
          "ranges": [{ "startOffset": 13925, "endOffset": 14235, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getHeight",
          "ranges": [{ "startOffset": 14240, "endOffset": 14475, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "553",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/Base/TreeNode.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2394, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "TreeNode",
          "ranges": [{ "startOffset": 153, "endOffset": 380, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "L",
          "ranges": [{ "startOffset": 385, "endOffset": 779, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "B",
          "ranges": [{ "startOffset": 784, "endOffset": 1176, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "te",
          "ranges": [{ "startOffset": 1181, "endOffset": 1477, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "se",
          "ranges": [{ "startOffset": 1482, "endOffset": 1778, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "TreeNodeEnableIndex",
          "ranges": [{ "startOffset": 1861, "endOffset": 1932, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "te",
          "ranges": [{ "startOffset": 1937, "endOffset": 2032, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "se",
          "ranges": [{ "startOffset": 2037, "endOffset": 2132, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ie",
          "ranges": [{ "startOffset": 2137, "endOffset": 2302, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "554",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/Base/TreeIterator.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2027, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "TreeIterator",
          "ranges": [{ "startOffset": 278, "endOffset": 1400, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get index",
          "ranges": [{ "startOffset": 1405, "endOffset": 1924, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "555",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/OrderedMap.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3148, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_interopRequireDefault",
          "ranges": [
            { "startOffset": 288, "endOffset": 380, "count": 2 },
            { "startOffset": 349, "endOffset": 377, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "OrderedMapIterator",
          "ranges": [{ "startOffset": 443, "endOffset": 526, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get pointer",
          "ranges": [{ "startOffset": 531, "endOffset": 1045, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "copy",
          "ranges": [{ "startOffset": 1050, "endOffset": 1154, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "OrderedMap",
          "ranges": [{ "startOffset": 1203, "endOffset": 1365, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "K",
          "ranges": [{ "startOffset": 1370, "endOffset": 1505, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "begin",
          "ranges": [{ "startOffset": 1510, "endOffset": 1598, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "end",
          "ranges": [{ "startOffset": 1603, "endOffset": 1677, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rBegin",
          "ranges": [{ "startOffset": 1682, "endOffset": 1774, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rEnd",
          "ranges": [{ "startOffset": 1779, "endOffset": 1857, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "front",
          "ranges": [{ "startOffset": 1862, "endOffset": 1968, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "back",
          "ranges": [{ "startOffset": 1973, "endOffset": 2078, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "lowerBound",
          "ranges": [{ "startOffset": 2083, "endOffset": 2197, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "upperBound",
          "ranges": [{ "startOffset": 2202, "endOffset": 2316, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reverseLowerBound",
          "ranges": [{ "startOffset": 2321, "endOffset": 2442, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "reverseUpperBound",
          "ranges": [{ "startOffset": 2447, "endOffset": 2569, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setElement",
          "ranges": [{ "startOffset": 2574, "endOffset": 2633, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "find",
          "ranges": [{ "startOffset": 2638, "endOffset": 2746, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getElementByKey",
          "ranges": [{ "startOffset": 2751, "endOffset": 2834, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "union",
          "ranges": [{ "startOffset": 2839, "endOffset": 2986, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2991, "endOffset": 3049, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "556",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/HashContainer/HashSet.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2037, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "HashSetIterator",
          "ranges": [{ "startOffset": 251, "endOffset": 334, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get pointer",
          "ranges": [{ "startOffset": 339, "endOffset": 485, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "copy",
          "ranges": [{ "startOffset": 490, "endOffset": 591, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "HashSet",
          "ranges": [{ "startOffset": 643, "endOffset": 782, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "begin",
          "ranges": [{ "startOffset": 787, "endOffset": 860, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "end",
          "ranges": [{ "startOffset": 865, "endOffset": 936, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rBegin",
          "ranges": [{ "startOffset": 941, "endOffset": 1018, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rEnd",
          "ranges": [{ "startOffset": 1023, "endOffset": 1098, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "front",
          "ranges": [{ "startOffset": 1103, "endOffset": 1143, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "back",
          "ranges": [{ "startOffset": 1148, "endOffset": 1187, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "insert",
          "ranges": [{ "startOffset": 1192, "endOffset": 1252, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getElementByPos",
          "ranges": [{ "startOffset": 1257, "endOffset": 1463, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "find",
          "ranges": [{ "startOffset": 1468, "endOffset": 1571, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "forEach",
          "ranges": [{ "startOffset": 1576, "endOffset": 1730, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1735, "endOffset": 1944, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "557",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/HashContainer/Base/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 4863, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_interopRequireDefault",
          "ranges": [
            { "startOffset": 333, "endOffset": 425, "count": 1 },
            { "startOffset": 394, "endOffset": 422, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "HashContainerIterator",
          "ranges": [{ "startOffset": 502, "endOffset": 1616, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "HashContainer",
          "ranges": [{ "startOffset": 1735, "endOffset": 1983, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "V",
          "ranges": [{ "startOffset": 1988, "endOffset": 2211, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "M",
          "ranges": [{ "startOffset": 2216, "endOffset": 3289, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "I",
          "ranges": [{ "startOffset": 3294, "endOffset": 3574, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clear",
          "ranges": [{ "startOffset": 3579, "endOffset": 3868, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByKey",
          "ranges": [{ "startOffset": 3873, "endOffset": 4351, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByIterator",
          "ranges": [{ "startOffset": 4356, "endOffset": 4551, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "eraseElementByPos",
          "ranges": [{ "startOffset": 4556, "endOffset": 4786, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "558",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/utils/checkObject.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 259, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "checkObject",
          "ranges": [{ "startOffset": 106, "endOffset": 218, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "559",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/HashContainer/HashMap.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3005, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_interopRequireDefault",
          "ranges": [
            { "startOffset": 267, "endOffset": 359, "count": 1 },
            { "startOffset": 328, "endOffset": 356, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "HashMapIterator",
          "ranges": [{ "startOffset": 425, "endOffset": 508, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "get pointer",
          "ranges": [{ "startOffset": 513, "endOffset": 1027, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "copy",
          "ranges": [{ "startOffset": 1032, "endOffset": 1133, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "HashMap",
          "ranges": [{ "startOffset": 1185, "endOffset": 1337, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "begin",
          "ranges": [{ "startOffset": 1342, "endOffset": 1415, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "end",
          "ranges": [{ "startOffset": 1420, "endOffset": 1491, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rBegin",
          "ranges": [{ "startOffset": 1496, "endOffset": 1573, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "rEnd",
          "ranges": [{ "startOffset": 1578, "endOffset": 1653, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "front",
          "ranges": [{ "startOffset": 1658, "endOffset": 1746, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "back",
          "ranges": [{ "startOffset": 1751, "endOffset": 1838, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setElement",
          "ranges": [{ "startOffset": 1843, "endOffset": 1902, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getElementByKey",
          "ranges": [{ "startOffset": 1907, "endOffset": 2193, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getElementByPos",
          "ranges": [{ "startOffset": 2198, "endOffset": 2413, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "find",
          "ranges": [{ "startOffset": 2418, "endOffset": 2521, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "forEach",
          "ranges": [{ "startOffset": 2526, "endOffset": 2689, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2694, "endOffset": 2912, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "560",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/pubrel.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 892, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "handlePubrel",
          "ranges": [{ "startOffset": 98, "endOffset": 824, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "561",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/default-message-id-provider.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 661, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 77, "endOffset": 561, "count": 0 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "562",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/topic-alias-recv.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 669, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 77, "endOffset": 590, "count": 0 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "563",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/TypedEmitter.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 521, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "__importDefault",
          "ranges": [
            { "startOffset": 70, "endOffset": 151, "count": 1 },
            { "startOffset": 122, "endOffset": 127, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "564",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/KeepaliveManager.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2392, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "__importDefault",
          "ranges": [
            { "startOffset": 70, "endOffset": 151, "count": 1 },
            { "startOffset": 128, "endOffset": 148, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 277, "endOffset": 2311, "count": 0 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "565",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/get-timer.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 2255, "count": 1 },
            { "startOffset": 407, "endOffset": 488, "count": 0 },
            { "startOffset": 664, "endOffset": 706, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 88, "endOffset": 405, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 410, "endOffset": 487, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 571, "endOffset": 662, "count": 0 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "__setModuleDefault",
          "ranges": [{ "startOffset": 666, "endOffset": 706, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 760, "endOffset": 1368, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "ownKeys",
          "ranges": [{ "startOffset": 792, "endOffset": 1056, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "__importStar",
          "ranges": [
            { "startOffset": 1069, "endOffset": 1365, "count": 1 },
            { "startOffset": 1132, "endOffset": 1364, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "set",
          "ranges": [{ "startOffset": 1682, "endOffset": 1721, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clear",
          "ranges": [{ "startOffset": 1734, "endOffset": 1769, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "getTimer",
          "ranges": [{ "startOffset": 1791, "endOffset": 2188, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "566",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/worker-timers/build/es5/bundle.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 16769, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 1, "endOffset": 396, "count": 1 },
            { "startOffset": 147, "endOffset": 393, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 405, "endOffset": 16765, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "createLoadOrReturnBroker",
          "ranges": [{ "startOffset": 496, "endOffset": 1063, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 590, "endOffset": 1056, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearInterval",
          "ranges": [{ "startOffset": 15991, "endOffset": 16088, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearTimeout",
          "ranges": [{ "startOffset": 16113, "endOffset": 16208, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setInterval",
          "ranges": [{ "startOffset": 16232, "endOffset": 16402, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setTimeout",
          "ranges": [{ "startOffset": 16427, "endOffset": 16598, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "567",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/worker-timers-broker/build/es5/bundle.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 4830, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 1, "endOffset": 557, "count": 1 },
            { "startOffset": 215, "endOffset": 554, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 566, "endOffset": 4826, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "clearInterval",
          "ranges": [{ "startOffset": 997, "endOffset": 1460, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "clearTimeout",
          "ranges": [{ "startOffset": 1482, "endOffset": 1942, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setInterval",
          "ranges": [{ "startOffset": 1963, "endOffset": 3413, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setTimeout",
          "ranges": [{ "startOffset": 3433, "endOffset": 4658, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "load",
          "ranges": [{ "startOffset": 4682, "endOffset": 4771, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "568",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/typeof.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 534, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_typeof",
          "ranges": [
            { "startOffset": 0, "endOffset": 430, "count": 8 },
            { "startOffset": 196, "endOffset": 337, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports._typeof",
          "ranges": [{ "startOffset": 156, "endOffset": 195, "count": 8 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "module.exports._typeof",
          "ranges": [{ "startOffset": 198, "endOffset": 337, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "569",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/broker-factory/build/es5/bundle.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 8198, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 1, "endOffset": 839, "count": 1 },
            { "startOffset": 336, "endOffset": 836, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 848, "endOffset": 8194, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "isMessagePort",
          "ranges": [{ "startOffset": 1000, "endOffset": 1087, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ownKeys$1",
          "ranges": [{ "startOffset": 1129, "endOffset": 1386, "count": 2 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1276, "endOffset": 1349, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_objectSpread$1",
          "ranges": [
            { "startOffset": 1391, "endOffset": 1838, "count": 2 },
            { "startOffset": 1464, "endOffset": 1826, "count": 3 },
            { "startOffset": 1510, "endOffset": 1514, "count": 0 },
            { "startOffset": 1522, "endOffset": 1605, "count": 2 },
            { "startOffset": 1606, "endOffset": 1823, "count": 1 },
            { "startOffset": 1707, "endOffset": 1823, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1559, "endOffset": 1604, "count": 4 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 1738, "endOffset": 1822, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "extendBrokerImplementation",
          "ranges": [{ "startOffset": 1876, "endOffset": 4362, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "connect",
          "ranges": [{ "startOffset": 2045, "endOffset": 3013, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "disconnect",
          "ranges": [{ "startOffset": 3035, "endOffset": 4167, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isSupported",
          "ranges": [{ "startOffset": 4190, "endOffset": 4346, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "ownKeys",
          "ranges": [{ "startOffset": 4369, "endOffset": 4624, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_objectSpread",
          "ranges": [{ "startOffset": 4629, "endOffset": 5070, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createOrGetOngoingRequests",
          "ranges": [{ "startOffset": 5150, "endOffset": 5498, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "createBroker",
          "ranges": [{ "startOffset": 5523, "endOffset": 8148, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 5669, "endOffset": 8141, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "570",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/defineProperty.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 362, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_defineProperty",
          "ranges": [
            { "startOffset": 51, "endOffset": 250, "count": 4 },
            { "startOffset": 124, "endOffset": 233, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "571",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/toPropertyKey.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 317, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "toPropertyKey",
          "ranges": [
            { "startOffset": 96, "endOffset": 207, "count": 4 },
            { "startOffset": 192, "endOffset": 195, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "572",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/toPrimitive.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 494, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "toPrimitive",
          "ranges": [
            { "startOffset": 49, "endOffset": 386, "count": 4 },
            { "startOffset": 107, "endOffset": 112, "count": 0 },
            { "startOffset": 123, "endOffset": 370, "count": 0 },
            { "startOffset": 371, "endOffset": 379, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "573",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/slicedToArray.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 509, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_slicedToArray",
          "ranges": [{ "startOffset": 250, "endOffset": 398, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "574",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/arrayWithHoles.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 177, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_arrayWithHoles",
          "ranges": [{ "startOffset": 0, "endOffset": 65, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "575",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/iterableToArrayLimit.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 790, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_iterableToArrayLimit",
          "ranges": [{ "startOffset": 0, "endOffset": 672, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "576",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 573, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_unsupportedIterableToArray",
          "ranges": [{ "startOffset": 57, "endOffset": 449, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "577",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/arrayLikeToArray.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 268, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_arrayLikeToArray",
          "ranges": [{ "startOffset": 0, "endOffset": 154, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "578",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/nonIterableRest.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 308, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_nonIterableRest",
          "ranges": [{ "startOffset": 0, "endOffset": 195, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "579",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/fast-unique-numbers/build/node/module.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 693, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "580",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/fast-unique-numbers/build/node/factories/add-unique-number.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 342, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "createAddUniqueNumber",
          "ranges": [{ "startOffset": 150, "endOffset": 286, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 185, "endOffset": 283, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "581",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/fast-unique-numbers/build/node/factories/cache.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 308, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "createCache",
          "ranges": [{ "startOffset": 130, "endOffset": 272, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 162, "endOffset": 269, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "582",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/fast-unique-numbers/build/node/factories/generate-unique-number.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 2339, "count": 1 },
            { "startOffset": 294, "endOffset": 312, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "createGenerateUniqueNumber",
          "ranges": [{ "startOffset": 498, "endOffset": 2273, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 539, "endOffset": 2270, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "583",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/asyncToGenerator.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 701, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "asyncGeneratorStep",
          "ranges": [{ "startOffset": 0, "endOffset": 191, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_asyncToGenerator",
          "ranges": [{ "startOffset": 192, "endOffset": 587, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "584",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/regenerator/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 448, "count": 1 },
            { "startOffset": 261, "endOffset": 447, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "585",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/regeneratorRuntime.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 2520, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_regeneratorRuntime",
          "ranges": [
            { "startOffset": 405, "endOffset": 2404, "count": 1 },
            { "startOffset": 572, "endOffset": 585, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "n",
          "ranges": [{ "startOffset": 602, "endOffset": 756, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "a",
          "ranges": [{ "startOffset": 843, "endOffset": 1739, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_regeneratorRuntime",
          "ranges": [{ "startOffset": 1789, "endOffset": 2320, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "wrap",
          "ranges": [{ "startOffset": 1847, "endOffset": 1932, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "awrap",
          "ranges": [{ "startOffset": 1994, "endOffset": 2064, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "async",
          "ranges": [{ "startOffset": 2126, "endOffset": 2247, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "586",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/OverloadYield.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 170, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_OverloadYield",
          "ranges": [{ "startOffset": 0, "endOffset": 59, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "587",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/regenerator.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 3822, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_regenerator",
          "ranges": [
            { "startOffset": 59, "endOffset": 3713, "count": 1 },
            { "startOffset": 311, "endOffset": 315, "count": 0 },
            { "startOffset": 336, "endOffset": 351, "count": 0 },
            { "startOffset": 375, "endOffset": 393, "count": 0 },
            { "startOffset": 2579, "endOffset": 2654, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "i",
          "ranges": [{ "startOffset": 397, "endOffset": 2400, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Generator",
          "ranges": [{ "startOffset": 2417, "endOffset": 2440, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "GeneratorFunction",
          "ranges": [{ "startOffset": 2443, "endOffset": 2474, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "GeneratorFunctionPrototype",
          "ranges": [{ "startOffset": 2477, "endOffset": 2517, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2611, "endOffset": 2649, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "f",
          "ranges": [
            { "startOffset": 2745, "endOffset": 2979, "count": 1 },
            { "startOffset": 2849, "endOffset": 2939, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3401, "endOffset": 3435, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 3471, "endOffset": 3521, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_regenerator",
          "ranges": [{ "startOffset": 3557, "endOffset": 3629, "count": 1 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "588",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/regeneratorDefine.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 738, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_regeneratorDefine",
          "ranges": [
            { "startOffset": 0, "endOffset": 623, "count": 7 },
            { "startOffset": 106, "endOffset": 132, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "regeneratorDefine",
          "ranges": [
            { "startOffset": 173, "endOffset": 510, "count": 10 },
            { "startOffset": 343, "endOffset": 457, "count": 9 },
            { "startOffset": 447, "endOffset": 457, "count": 0 },
            { "startOffset": 458, "endOffset": 505, "count": 1 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "o",
          "ranges": [{ "startOffset": 218, "endOffset": 336, "count": 3 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 268, "endOffset": 328, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "589",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/regeneratorAsync.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 352, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_regeneratorAsync",
          "ranges": [{ "startOffset": 63, "endOffset": 238, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "590",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/regeneratorAsyncGen.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 367, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_regeneratorAsyncGen",
          "ranges": [{ "startOffset": 120, "endOffset": 250, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "591",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/regeneratorAsyncIterator.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1095, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "AsyncIterator",
          "ranges": [{ "startOffset": 110, "endOffset": 985, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "592",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/regeneratorKeys.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 349, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_regeneratorKeys",
          "ranges": [{ "startOffset": 0, "endOffset": 236, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "593",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/@babel/runtime/helpers/regeneratorValues.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 638, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "_regeneratorValues",
          "ranges": [{ "startOffset": 49, "endOffset": 523, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "594",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/is-browser.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1163, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "isStandardBrowserEnv",
          "ranges": [
            { "startOffset": 167, "endOffset": 654, "count": 1 },
            { "startOffset": 214, "endOffset": 634, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isWebWorkerEnv",
          "ranges": [
            { "startOffset": 679, "endOffset": 815, "count": 2 },
            { "startOffset": 718, "endOffset": 779, "count": 0 },
            { "startOffset": 780, "endOffset": 814, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isReactNativeEnv",
          "ranges": [
            { "startOffset": 842, "endOffset": 919, "count": 2 },
            { "startOffset": 881, "endOffset": 919, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "595",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/unique-message-id-provider.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 788, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [{ "startOffset": 133, "endOffset": 690, "count": 0 }],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "596",
      "url": "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/connect/index.js",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 0, "endOffset": 7197, "count": 1 },
            { "startOffset": 516, "endOffset": 556, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "__importDefault",
          "ranges": [
            { "startOffset": 70, "endOffset": 151, "count": 4 },
            { "startOffset": 122, "endOffset": 127, "count": 2 },
            { "startOffset": 128, "endOffset": 148, "count": 2 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "parseAuthOptions",
          "ranges": [{ "startOffset": 625, "endOffset": 979, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "connect",
          "ranges": [{ "startOffset": 980, "endOffset": 5894, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "connectAsync",
          "ranges": [{ "startOffset": 5895, "endOffset": 7136, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "597",
      "url": "node:internal/test_runner/reporter/v8-serializer",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 1458, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "v8Reporter",
          "ranges": [
            { "startOffset": 235, "endOffset": 1456, "count": 1 },
            { "startOffset": 463, "endOffset": 1454, "count": 82 },
            { "startOffset": 508, "endOffset": 515, "count": 17 },
            { "startOffset": 540, "endOffset": 776, "count": 0 },
            { "startOffset": 1005, "endOffset": 1059, "count": 0 }
          ],
          "isBlockCoverage": true
        }
      ]
    },
    {
      "scriptId": "598",
      "url": "node:internal/streams/duplexify",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 7977, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "Duplexify",
          "ranges": [
            { "startOffset": 975, "endOffset": 1460, "count": 1 },
            { "startOffset": 1106, "endOffset": 1242, "count": 0 },
            { "startOffset": 1281, "endOffset": 1456, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "duplexify",
          "ranges": [
            { "startOffset": 1481, "endOffset": 4640, "count": 1 },
            { "startOffset": 1546, "endOffset": 1568, "count": 0 },
            { "startOffset": 1604, "endOffset": 1652, "count": 0 },
            { "startOffset": 1688, "endOffset": 1736, "count": 0 },
            { "startOffset": 1764, "endOffset": 1830, "count": 0 },
            { "startOffset": 1862, "endOffset": 1928, "count": 0 },
            { "startOffset": 1960, "endOffset": 2026, "count": 0 },
            { "startOffset": 2325, "endOffset": 2355, "count": 0 },
            { "startOffset": 2393, "endOffset": 3492, "count": 0 },
            { "startOffset": 3494, "endOffset": 3533, "count": 0 },
            { "startOffset": 3538, "endOffset": 3613, "count": 0 },
            { "startOffset": 3627, "endOffset": 3668, "count": 0 },
            { "startOffset": 3673, "endOffset": 4058, "count": 0 },
            { "startOffset": 4094, "endOffset": 4639, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2491, "endOffset": 2622, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 2632, "endOffset": 2681, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "final",
          "ranges": [{ "startOffset": 2840, "endOffset": 3077, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4165, "endOffset": 4265, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "",
          "ranges": [{ "startOffset": 4273, "endOffset": 4318, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "read",
          "ranges": [{ "startOffset": 4412, "endOffset": 4421, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "fromAsyncGen",
          "ranges": [{ "startOffset": 4643, "endOffset": 5540, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            { "startOffset": 4808, "endOffset": 5180, "count": 1 },
            { "startOffset": 4845, "endOffset": 5176, "count": 83 },
            { "startOffset": 4995, "endOffset": 5002, "count": 1 },
            { "startOffset": 5002, "endOffset": 5037, "count": 82 },
            { "startOffset": 5037, "endOffset": 5095, "count": 0 },
            { "startOffset": 5095, "endOffset": 5176, "count": 82 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "write",
          "ranges": [{ "startOffset": 5224, "endOffset": 5356, "count": 82 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "final",
          "ranges": [{ "startOffset": 5362, "endOffset": 5469, "count": 1 }],
          "isBlockCoverage": true
        },
        {
          "functionName": "destroy",
          "ranges": [{ "startOffset": 5475, "endOffset": 5532, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "_duplexify",
          "ranges": [{ "startOffset": 5542, "endOffset": 7976, "count": 0 }],
          "isBlockCoverage": false
        }
      ]
    },
    {
      "scriptId": "599",
      "url": "node:internal/util/comparisons",
      "functions": [
        {
          "functionName": "",
          "ranges": [{ "startOffset": 0, "endOffset": 17643, "count": 1 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "areSimilarRegExps",
          "ranges": [{ "startOffset": 1239, "endOffset": 1379, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "areSimilarFloatArrays",
          "ranges": [{ "startOffset": 1381, "endOffset": 1620, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "areSimilarTypedArrays",
          "ranges": [{ "startOffset": 1622, "endOffset": 1872, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "areEqualArrayBuffers",
          "ranges": [{ "startOffset": 1874, "endOffset": 2030, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isEqualBoxedPrimitive",
          "ranges": [{ "startOffset": 2032, "endOffset": 2891, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "innerDeepEqual",
          "ranges": [
            { "startOffset": 3467, "endOffset": 7708, "count": 4 },
            { "startOffset": 3605, "endOffset": 3698, "count": 2 },
            { "startOffset": 3645, "endOffset": 3686, "count": 0 },
            { "startOffset": 3687, "endOffset": 3693, "count": 0 },
            { "startOffset": 3698, "endOffset": 4093, "count": 2 },
            { "startOffset": 3802, "endOffset": 3898, "count": 0 },
            { "startOffset": 3967, "endOffset": 3994, "count": 0 },
            { "startOffset": 4062, "endOffset": 4089, "count": 0 },
            { "startOffset": 4093, "endOffset": 4441, "count": 0 },
            { "startOffset": 4441, "endOffset": 4568, "count": 2 },
            { "startOffset": 4568, "endOffset": 4591, "count": 0 },
            { "startOffset": 4591, "endOffset": 4619, "count": 2 },
            { "startOffset": 4619, "endOffset": 5091, "count": 0 },
            { "startOffset": 5091, "endOffset": 7647, "count": 2 },
            { "startOffset": 5198, "endOffset": 7647, "count": 0 },
            { "startOffset": 7647, "endOffset": 7707, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getEnumerables",
          "ranges": [{ "startOffset": 7710, "endOffset": 7850, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "keyCheck",
          "ranges": [
            { "startOffset": 7852, "endOffset": 10759, "count": 2 },
            { "startOffset": 8546, "endOffset": 8573, "count": 0 },
            { "startOffset": 8708, "endOffset": 8735, "count": 0 },
            { "startOffset": 8876, "endOffset": 9536, "count": 0 },
            { "startOffset": 9640, "endOffset": 9699, "count": 0 },
            { "startOffset": 9701, "endOffset": 9732, "count": 0 },
            { "startOffset": 9769, "endOffset": 9897, "count": 0 },
            { "startOffset": 9899, "endOffset": 9921, "count": 0 },
            { "startOffset": 10082, "endOffset": 10528, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setHasEqualElement",
          "ranges": [{ "startOffset": 10761, "endOffset": 11062, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "findLooseMatchingPrimitives",
          "ranges": [{ "startOffset": 11411, "endOffset": 11916, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setMightHaveLoosePrim",
          "ranges": [{ "startOffset": 11918, "endOffset": 12110, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "mapMightHaveLoosePrim",
          "ranges": [{ "startOffset": 12112, "endOffset": 12499, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "setEquiv",
          "ranges": [{ "startOffset": 12501, "endOffset": 14177, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "mapHasEqualEntry",
          "ranges": [{ "startOffset": 14179, "endOffset": 14637, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "mapEquiv",
          "ranges": [{ "startOffset": 14639, "endOffset": 15965, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "objEquiv",
          "ranges": [
            { "startOffset": 15967, "endOffset": 17410, "count": 2 },
            { "startOffset": 16165, "endOffset": 16238, "count": 0 },
            { "startOffset": 16274, "endOffset": 16347, "count": 0 },
            { "startOffset": 16385, "endOffset": 17135, "count": 0 },
            { "startOffset": 17362, "endOffset": 17389, "count": 0 }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isDeepEqual",
          "ranges": [{ "startOffset": 17412, "endOffset": 17493, "count": 0 }],
          "isBlockCoverage": false
        },
        {
          "functionName": "isDeepStrictEqual",
          "ranges": [{ "startOffset": 17495, "endOffset": 17583, "count": 2 }],
          "isBlockCoverage": true
        }
      ]
    }
  ],
  "timestamp": 186265.87836,
  "source-map-cache": {
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/index.js": {
      "lineLengths": [
        13, 97, 33, 53, 88, 68, 5, 39, 29, 33, 17, 4, 96, 72, 21, 21, 3, 64, 31,
        62, 24, 95, 22, 10, 26, 6, 27, 46, 24, 137, 40, 22, 6, 5, 72, 126, 2,
        62, 45, 23, 41, 33
      ],
      "data": {
        "version": 3,
        "file": "index.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/index.ts"
        ],
        "names": [],
        "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAA8B;AAE9B,kBAAe,IAAI,CAAA;AACnB,yCAAsB"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/mqtt.js": {
      "lineLengths": [
        13, 97, 33, 53, 88, 68, 5, 39, 29, 33, 17, 4, 96, 72, 21, 21, 3, 64, 31,
        62, 24, 95, 22, 10, 26, 6, 27, 46, 24, 137, 40, 22, 6, 5, 72, 126, 2,
        72, 62, 2, 62, 220, 58, 38, 100, 73, 98, 71, 56, 32, 57, 36, 122, 78,
        54, 34, 47, 47, 42, 116, 32
      ],
      "data": {
        "version": 3,
        "file": "mqtt.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/mqtt.ts"
        ],
        "names": [],
        "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,0DAAqC;AAWpC,qBAXM,gBAAU,CAWN;AAVX,oGAAwE;AAYvE,mCAZM,qCAAwB,CAYN;AAXzB,kGAAsE;AAYrE,kCAZM,oCAAuB,CAYN;AAXxB,wDAA2C;AAS1C,gBATM,eAAK,CASN;AARN,yDAAqD;AAKpD,kBALM,iBAAO,CAKN;AACP,6FANiB,sBAAY,OAMjB;AALb,8EAAqD;AAWpD,2BAXM,0BAAgB,CAWN;AATJ,QAAA,MAAM,GAAG,gBAAU,CAAA;AAWhC,+CAA4B;AAC5B,+CAA4B;AAC5B,0CAAgD;AAAvC,kGAAA,WAAW,OAAA"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/client.js": {
      "lineLengths": [
        13, 97, 33, 53, 88, 68, 5, 39, 29, 33, 17, 4, 96, 72, 21, 21, 3, 64, 31,
        62, 24, 95, 22, 10, 26, 6, 27, 46, 24, 137, 40, 22, 6, 5, 72, 62, 2, 62,
        62, 53, 59, 50, 59, 52, 58, 96, 74, 37, 49, 74, 59, 47, 19, 38, 38, 30,
        11, 7, 31, 18, 26, 23, 23, 26, 30, 16, 22, 29, 21, 25, 2, 59, 45, 14,
        18, 17, 17, 18, 18, 12, 17, 20, 8, 22, 13, 21, 9, 21, 11, 10, 18, 23,
        17, 19, 21, 36, 26, 21, 19, 19, 23, 18, 24, 67, 5, 41, 16, 37, 48, 57,
        59, 13, 18, 45, 13, 9, 77, 42, 63, 39, 63, 9, 14, 93, 9, 69, 83, 69, 71,
        83, 89, 89, 50, 25, 31, 48, 34, 41, 66, 39, 69, 42, 32, 37, 18, 39, 69,
        9, 43, 32, 65, 61, 49, 76, 76, 27, 77, 37, 35, 37, 31, 35, 34, 24, 33,
        35, 38, 50, 40, 27, 37, 77, 64, 95, 13, 18, 107, 13, 9, 34, 35, 35, 44,
        55, 34, 29, 40, 27, 17, 38, 71, 32, 65, 77, 37, 21, 17, 27, 55, 39, 42,
        25, 34, 23, 17, 22, 118, 30, 17, 14, 58, 22, 11, 32, 58, 35, 55, 44, 44,
        38, 44, 13, 57, 35, 11, 42, 56, 27, 9, 5, 34, 19, 5, 37, 19, 5, 15, 49,
        5, 24, 57, 5, 15, 58, 66, 33, 27, 65, 31, 54, 85, 85, 39, 38, 9, 87, 47,
        41, 67, 33, 11, 28, 61, 43, 25, 61, 68, 13, 18, 56, 43, 37, 60, 25, 27,
        13, 10, 36, 33, 45, 13, 18, 43, 37, 23, 13, 10, 47, 33, 58, 30, 19, 10,
        47, 67, 29, 65, 42, 13, 18, 33, 13, 10, 62, 35, 52, 39, 70, 34, 57, 31,
        11, 54, 31, 27, 48, 58, 38, 44, 46, 44, 44, 48, 10, 32, 34, 37, 52, 14,
        9, 34, 44, 46, 13, 38, 60, 44, 13, 9, 41, 58, 38, 64, 61, 101, 28, 13,
        63, 42, 62, 36, 32, 34, 47, 18, 46, 13, 9, 42, 40, 46, 82, 61, 32, 40,
        20, 5, 45, 74, 33, 41, 28, 24, 9, 26, 29, 19, 26, 23, 10, 43, 66, 49,
        24, 9, 35, 30, 41, 43, 41, 50, 33, 17, 13, 28, 31, 22, 33, 20, 23, 26,
        20, 14, 48, 47, 13, 44, 26, 23, 23, 55, 40, 50, 22, 79, 68, 26, 24, 79,
        67, 26, 13, 24, 10, 36, 52, 29, 45, 36, 44, 25, 15, 9, 20, 5, 40, 49,
        65, 26, 32, 17, 22, 36, 17, 15, 11, 5, 44, 53, 41, 28, 9, 41, 32, 28,
        46, 40, 37, 9, 46, 37, 9, 51, 50, 43, 50, 9, 68, 36, 79, 24, 9, 49, 54,
        24, 9, 29, 19, 10, 28, 35, 36, 31, 9, 43, 36, 24, 49, 46, 88, 70, 30,
        37, 26, 40, 18, 36, 51, 53, 51, 56, 17, 120, 39, 13, 10, 41, 44, 61, 32,
        15, 9, 14, 57, 86, 52, 15, 9, 27, 31, 24, 9, 66, 28, 33, 43, 26, 14, 29,
        47, 13, 43, 58, 34, 46, 59, 55, 44, 55, 57, 51, 62, 25, 67, 47, 21, 19,
        65, 13, 62, 51, 35, 38, 35, 56, 94, 78, 29, 25, 35, 45, 25, 30, 93, 25,
        22, 18, 15, 54, 37, 27, 10, 37, 77, 41, 62, 65, 49, 41, 50, 33, 17, 85,
        13, 42, 36, 53, 14, 33, 48, 15, 24, 10, 36, 52, 31, 45, 38, 25, 15, 9,
        20, 5, 39, 49, 65, 26, 32, 17, 22, 37, 17, 15, 11, 5, 40, 40, 28, 9, 41,
        28, 9, 41, 63, 36, 79, 24, 9, 49, 24, 9, 39, 45, 37, 46, 29, 13, 28, 35,
        26, 36, 14, 44, 49, 13, 44, 47, 13, 43, 60, 59, 19, 13, 62, 52, 13, 47,
        31, 29, 14, 54, 37, 24, 10, 36, 52, 33, 45, 40, 25, 15, 9, 20, 5, 35,
        49, 60, 26, 32, 17, 22, 36, 17, 15, 11, 5, 26, 55, 58, 28, 25, 26, 9,
        39, 28, 24, 9, 40, 46, 27, 9, 35, 81, 37, 46, 50, 65, 37, 29, 45, 84,
        32, 21, 19, 15, 42, 42, 13, 58, 45, 43, 13, 10, 30, 110, 40, 85, 52, 21,
        10, 33, 17, 24, 9, 31, 34, 62, 108, 74, 9, 14, 89, 21, 9, 20, 5, 27, 49,
        44, 26, 32, 17, 22, 30, 17, 15, 11, 5, 38, 39, 52, 66, 49, 15, 9, 20, 5,
        21, 37, 25, 23, 64, 64, 13, 18, 50, 50, 13, 85, 85, 39, 38, 43, 30, 10,
        55, 40, 9, 14, 16, 9, 20, 5, 22, 28, 130, 63, 56, 72, 80, 52, 17, 15, 9,
        5, 14, 28, 66, 63, 72, 80, 52, 17, 15, 9, 5, 50, 18, 32, 49, 9, 44, 93,
        33, 47, 61, 13, 63, 47, 61, 13, 33, 9, 20, 48, 9, 5, 35, 33, 53, 60, 13,
        18, 70, 13, 9, 34, 5, 18, 61, 31, 29, 28, 31, 15, 71, 9, 14, 52, 27, 9,
        5, 23, 34, 35, 47, 37, 68, 37, 76, 41, 13, 106, 53, 67, 34, 45, 9, 14,
        60, 9, 5, 23, 63, 34, 47, 39, 9, 5, 39, 19, 79, 42, 9, 51, 21, 75, 30,
        13, 85, 34, 9, 14, 58, 107, 44, 89, 36, 43, 96, 23, 19, 15, 9, 56, 109,
        35, 35, 9, 40, 38, 116, 54, 19, 9, 5, 43, 90, 33, 16, 44, 57, 73, 22,
        37, 13, 9, 55, 23, 38, 13, 25, 42, 11, 5, 30, 49, 43, 26, 40, 57, 17,
        54, 42, 32, 49, 104, 73, 119, 85, 29, 25, 21, 50, 64, 79, 40, 50, 53,
        57, 54, 34, 116, 29, 34, 74, 70, 53, 57, 54, 34, 111, 29, 25, 66, 79,
        40, 50, 53, 57, 54, 34, 108, 29, 25, 21, 17, 33, 107, 73, 17, 13, 9, 5,
        16, 33, 5, 30, 55, 58, 40, 54, 94, 68, 48, 88, 42, 9, 22, 52, 17, 9, 5,
        50, 73, 45, 29, 50, 18, 20, 19, 9, 30, 40, 46, 23, 13, 85, 54, 19, 9,
        22, 42, 19, 9, 29, 27, 22, 26, 59, 23, 20, 46, 23, 9, 29, 19, 19, 59,
        22, 19, 20, 46, 22, 9, 71, 5, 42, 55, 49, 45, 33, 44, 57, 79, 22, 37,
        13, 9, 41, 80, 57, 9, 27, 53, 57, 23, 58, 26, 41, 17, 29, 15, 9, 22, 53,
        9, 5, 30, 93, 63, 100, 9, 5, 32, 36, 81, 44, 41, 9, 5, 35, 36, 37, 54,
        35, 9, 5, 23, 57, 43, 5, 16, 49, 45, 5, 26, 59, 75, 28, 5, 20, 33, 76,
        37, 34, 53, 59, 48, 43, 57, 64, 92, 52, 74, 84, 60, 58, 88, 44, 27, 21,
        17, 22, 63, 60, 17, 13, 18, 45, 13, 9, 38, 5, 24, 32, 41, 19, 9, 36, 39,
        38, 30, 42, 61, 34, 35, 32, 50, 39, 14, 48, 46, 58, 14, 39, 43, 39, 50,
        53, 40, 15, 40, 32, 27, 17, 49, 23, 31, 60, 27, 17, 45, 78, 35, 27, 17,
        66, 57, 61, 31, 56, 40, 41, 37, 48, 29, 43, 26, 22, 77, 29, 77, 78, 21,
        26, 87, 21, 17, 44, 39, 17, 14, 38, 40, 72, 68, 45, 30, 21, 17, 53, 35,
        43, 58, 49, 17, 22, 41, 17, 15, 27, 10, 29, 5, 35, 78, 52, 34, 51, 28,
        13, 9, 21, 5, 38, 52, 9, 5, 34, 53, 29, 61, 27, 59, 9, 45, 5, 51, 40,
        64, 28, 57, 47, 11, 5, 1, 29, 34
      ],
      "data": {
        "version": 3,
        "file": "client.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/client.ts"
        ],
        "names": [],
        "mappings": "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"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/validations.js": {
      "lineLengths": [
        13, 62, 38, 40, 31, 35, 44, 31, 21, 9, 31, 42, 9, 75, 25, 9, 5, 16, 1,
        33, 30, 34, 5, 45, 40, 29, 9, 5, 16, 1, 39
      ],
      "data": {
        "version": 3,
        "file": "validations.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/validations.ts"
        ],
        "names": [],
        "mappings": ";;AASA,sCAmBC;AAOD,wCAUC;AApCD,SAAgB,aAAa,CAAC,KAAa;IAC1C,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAE9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACvC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YACtB,SAAQ;QACT,CAAC;QAED,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YAEtB,OAAO,CAAC,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA;QAC9B,CAAC;QAED,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YAClE,OAAO,KAAK,CAAA;QACb,CAAC;IACF,CAAC;IAED,OAAO,IAAI,CAAA;AACZ,CAAC;AAOD,SAAgB,cAAc,CAAC,MAAgB;IAC9C,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACzB,OAAO,kBAAkB,CAAA;IAC1B,CAAC;IACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACxC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAC/B,OAAO,MAAM,CAAC,CAAC,CAAC,CAAA;QACjB,CAAC;IACF,CAAC;IACD,OAAO,IAAI,CAAA;AACZ,CAAC"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/store.js": {
      "lineLengths": [
        13, 62, 53, 41, 29, 16, 2, 13, 12, 15, 26, 37, 62, 36, 5, 21, 54, 17,
        17, 9, 20, 5, 20, 67, 26, 30, 18, 49, 31, 11, 30, 50, 41, 13, 18, 34,
        13, 10, 35, 28, 23, 13, 29, 30, 37, 18, 26, 10, 22, 5, 21, 63, 23, 53,
        31, 9, 22, 44, 9, 20, 5, 21, 67, 27, 35, 9, 22, 44, 9, 20, 5, 15, 33,
        35, 9, 17, 17, 9, 5, 1, 24, 33
      ],
      "data": {
        "version": 3,
        "file": "store.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/store.ts"
        ],
        "names": [],
        "mappings": "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"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/index.js": {
      "lineLengths": [
        13, 72, 62, 2, 62, 56, 50, 56, 48, 54, 42, 31, 40, 29, 47, 63, 80, 20,
        28, 77, 11, 22, 5, 58, 41, 25, 23, 57, 18, 22, 22, 23, 22, 24, 36, 47,
        19, 18, 22, 36, 56, 18, 23, 51, 19, 18, 20, 36, 48, 19, 18, 24, 61, 40,
        19, 18, 26, 46, 19, 18, 16, 59, 19, 18, 5, 2, 25, 33
      ],
      "data": {
        "version": 3,
        "file": "index.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/handlers/index.ts"
        ],
        "names": [],
        "mappings": ";;;;;AAAA,wDAAqC;AACrC,kDAA+B;AAC/B,wDAAqC;AACrC,gDAA6B;AAC7B,sDAAmC;AAGnC,MAAM,MAAM,GAAkB,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;IACtD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA;IAE1B,IACC,OAAO,CAAC,eAAe,KAAK,CAAC;QAC7B,OAAO,CAAC,UAAU;QAClB,OAAO,CAAC,UAAU,CAAC,iBAAiB;QACpC,OAAO,CAAC,UAAU,CAAC,iBAAiB,GAAG,MAAM,CAAC,MAAM,EACnD,CAAC;QACF,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK,CAAC,0BAA0B,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;QACvE,MAAM,CAAC,GAAG,CAAC;YACV,UAAU,EAAE,GAAG;YACf,UAAU,EAAE,EAAE,YAAY,EAAE,kCAAkC,EAAE;SAChE,CAAC,CAAA;QACF,OAAO,MAAM,CAAA;IACd,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAA;IACrD,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC,CAAA;IAEpC,QAAQ,MAAM,CAAC,GAAG,EAAE,CAAC;QACpB,KAAK,SAAS;YAEb,IAAA,iBAAa,EAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAAA;YACnC,MAAK;QACN,KAAK,QAAQ,CAAC;QACd,KAAK,QAAQ,CAAC;QACd,KAAK,SAAS,CAAC;QACf,KAAK,QAAQ,CAAC;QACd,KAAK,UAAU;YACd,MAAM,CAAC,cAAc,EAAE,CAAA;YACvB,IAAA,aAAS,EAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YACzB,IAAI,EAAE,CAAA;YACN,MAAK;QACN,KAAK,QAAQ;YACZ,MAAM,CAAC,cAAc,EAAE,CAAA;YACvB,IAAA,gBAAY,EAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAAA;YAClC,MAAK;QACN,KAAK,SAAS;YAGb,IAAA,iBAAa,EAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAC7B,IAAI,EAAE,CAAA;YACN,MAAK;QACN,KAAK,MAAM;YACV,MAAM,CAAC,cAAc,EAAE,CAAA;YACvB,IAAA,cAAU,EAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAC1B,IAAI,EAAE,CAAA;YACN,MAAK;QACN,KAAK,UAAU;YACd,MAAM,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAA;YAChD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;YAC3B,IAAI,EAAE,CAAA;YACN,MAAK;QACN,KAAK,YAAY;YAChB,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,CAAA;YACjC,IAAI,EAAE,CAAA;YACN,MAAK;QACN;YAEC,MAAM,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAA;YAC9C,IAAI,EAAE,CAAA;YACN,MAAK;IACP,CAAC;AACF,CAAC,CAAA;AAED,kBAAe,MAAM,CAAA"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/publish.js": {
      "lineLengths": [
        13, 62, 68, 49, 51, 60, 40, 35, 27, 33, 31, 47, 18, 32, 49, 9, 43, 37,
        51, 85, 35, 41, 120, 21, 26, 98, 93, 31, 21, 17, 22, 94, 92, 27, 17, 13,
        66, 94, 13, 18, 90, 88, 23, 13, 9, 5, 45, 18, 17, 79, 48, 33, 33, 17,
        28, 55, 17, 60, 91, 17, 27, 96, 17, 22, 60, 82, 23, 17, 15, 18, 9, 17,
        79, 48, 33, 33, 17, 28, 55, 17, 60, 91, 17, 28, 67, 17, 55, 30, 49, 21,
        96, 19, 15, 18, 9, 15, 59, 47, 18, 16, 69, 18, 5, 2, 32, 35
      ],
      "data": {
        "version": 3,
        "file": "publish.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/handlers/publish.ts"
        ],
        "names": [],
        "mappings": "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"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/auth.js": {
      "lineLengths": [
        13, 62, 38, 31, 40, 31, 44, 69, 24, 143, 34, 15, 5, 49, 18, 38, 19, 9,
        24, 40, 43, 9, 14, 111, 40, 9, 7, 2, 29, 32
      ],
      "data": {
        "version": 3,
        "file": "auth.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/handlers/auth.ts"
        ],
        "names": [],
        "mappings": ";;AACA,sCAAmE;AACnE,+BAAmC;AAEnC,MAAM,UAAU,GAAkB,CACjC,MAAM,EACN,MAA4C,EAC3C,EAAE;IACH,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA;IAC1B,MAAM,OAAO,GAAG,OAAO,CAAC,eAAe,CAAA;IACvC,MAAM,EAAE,GAAG,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAA;IAEhE,IAAI,OAAO,KAAK,CAAC,EAAE,CAAC;QACnB,MAAM,GAAG,GAAG,IAAI,4BAAmB,CAClC,2EAA2E,OAAO,EAAE,EACpF,EAAE,CACF,CAAA;QACD,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAA;QACzB,OAAM;IACP,CAAC;IAED,MAAM,CAAC,UAAU,CAChB,MAAM,EACN,CAAC,GAAwB,EAAE,OAAoB,EAAE,EAAE;QAClD,IAAI,GAAG,EAAE,CAAC;YACT,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAA;YACzB,OAAM;QACP,CAAC;QAED,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YACf,MAAM,CAAC,YAAY,GAAG,KAAK,CAAA;YAC3B,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAA;QAC/B,CAAC;aAAM,CAAC;YACP,MAAM,KAAK,GAAG,IAAI,4BAAmB,CACpC,uBAAuB,iBAAW,CAAC,EAAE,CAAC,EAAE,EACxC,EAAE,CACF,CAAA;YACD,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;QAC5B,CAAC;IACF,CAAC,CACD,CAAA;AACF,CAAC,CAAA;AAED,kBAAe,UAAU,CAAA"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/shared.js": {
      "lineLengths": [
        13, 62, 113, 32, 41, 9, 32, 23, 25, 67, 65, 5, 1, 50, 43, 11, 34, 23,
        29, 69, 67, 5, 1, 54, 64, 37, 18, 44, 52, 30, 43, 9, 14, 18, 9, 5, 42,
        72, 63, 118, 41, 13, 9, 5, 1, 58, 22, 21, 32, 6, 63, 34
      ],
      "data": {
        "version": 3,
        "file": "shared.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/shared.ts"
        ],
        "names": [],
        "mappings": ";;;AA6DA,gCA8BC;AA3DD,MAAa,mBAAoB,SAAQ,KAAK;IACtC,IAAI,CAAQ;IAEnB,YAAmB,OAAe,EAAE,IAAY;QAC/C,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAGhB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,mBAAmB,CAAC,SAAS,CAAC,CAAA;QAC1D,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,qBAAqB,CAAA;IACzD,CAAC;CACD;AAXD,kDAWC;AAED,MAAa,qBAAsB,SAAQ,KAAK;IACxC,MAAM,CAAe;IAE5B,YAAmB,OAAe,EAAE,MAAqB;QACxD,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QAGpB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,qBAAqB,CAAC,SAAS,CAAC,CAAA;QAC5D,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,GAAG,uBAAuB,CAAA;IAC3D,CAAC;CACD;AAXD,sDAWC;AAKD,SAAgB,UAAU,CACzB,MAAmB,EACnB,KAAkB,EAClB,kBAAkB,GAAG,KAAK;IAG1B,MAAM,gBAAgB,GAAkB,CAAC,KAAK,CAAC,CAAA;IAE/C,OAAO,IAAI,EAAE,CAAC;QACb,MAAM,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAA;QACnC,MAAM,IAAI,GAAG,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA;QAC3C,IAAI,IAAI,EAAE,SAAS,EAAE,CAAC;YACrB,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QAC/B,CAAC;aAAM,CAAC;YACP,MAAK;QACN,CAAC;IACF,CAAC;IACD,KAAK,MAAM,IAAI,IAAI,gBAAgB,EAAE,CAAC;QACrC,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YAE/D,IAAI,kBAAkB,IAAI,IAAI,KAAK,aAAa,EAAE,CAAC;gBAClD,MAAM,CAAC,cAAc,CACpB,MAAM,CAAC,SAAS,EAChB,IAAI,EACJ,MAAM,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC;oBACpD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CACpB,CAAA;YACF,CAAC;QACF,CAAC;IACF,CAAC;AACF,CAAC;AACY,QAAA,QAAQ,GACpB,OAAO,OAAO,EAAE,QAAQ,KAAK,UAAU;IACtC,CAAC,CAAC,OAAO,CAAC,QAAQ;IAClB,CAAC,CAAC,CAAC,QAAoB,EAAE,EAAE;QACzB,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAA;IACxB,CAAC,CAAA;AAGS,QAAA,cAAc,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAA"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/ack.js": {
      "lineLengths": [
        13, 62, 29, 38, 23, 10, 39, 29, 28, 34, 24, 34, 34, 29, 28, 26, 41, 40,
        39, 37, 26, 30, 23, 18, 32, 37, 30, 30, 32, 30, 36, 39, 36, 31, 28, 33,
        26, 33, 34, 32, 29, 30, 24, 46, 36, 32, 50, 48, 2, 39, 33, 28, 24, 81,
        19, 14, 75, 15, 5, 50, 19, 23, 24, 47, 62, 116, 75, 36, 19, 13, 18, 72,
        13, 18, 9, 24, 24, 30, 23, 26, 14, 47, 62, 116, 75, 36, 19, 13, 18, 48,
        13, 18, 9, 24, 46, 59, 43, 75, 51, 46, 89, 40, 70, 33, 51, 71, 27, 21,
        17, 13, 54, 52, 28, 18, 9, 26, 46, 59, 52, 29, 18, 9, 16, 72, 5, 76, 37,
        5, 2, 28, 31
      ],
      "data": {
        "version": 3,
        "file": "ack.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/handlers/ack.ts"
        ],
        "names": [],
        "mappings": "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"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/connack.js": {
      "lineLengths": [
        13, 72, 62, 2, 62, 31, 75, 38, 43, 33, 31, 44, 69, 41, 36, 28, 50, 63,
        97, 23, 13, 58, 111, 13, 9, 69, 66, 9, 50, 38, 40, 13, 50, 52, 9, 5, 19,
        36, 37, 5, 22, 105, 34, 53, 37, 9, 5, 2, 32, 35
      ],
      "data": {
        "version": 3,
        "file": "connack.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/handlers/connack.ts"
        ],
        "names": [],
        "mappings": ";;;;;AACA,+BAAmC;AACnC,2EAAgD;AAChD,sCAAmE;AAEnE,MAAM,aAAa,GAAkB,CAAC,MAAM,EAAE,MAAsB,EAAE,EAAE;IACvE,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAA;IAC5B,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA;IAC1B,MAAM,OAAO,GAAG,OAAO,CAAC,eAAe,CAAA;IACvC,MAAM,EAAE,GAAG,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAA;IAEhE,YAAY,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAA;IACpC,OAAO,MAAM,CAAC,gBAAgB,CAAC,CAAA;IAE/B,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;QACvB,IAAI,MAAM,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;YACzC,IAAI,MAAM,CAAC,UAAU,CAAC,iBAAiB,GAAG,MAAM,EAAE,CAAC;gBAClD,MAAM,CAAC,IAAI,CACV,OAAO,EACP,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAC1D,CAAA;gBACD,OAAM;YACP,CAAC;YACD,IAAI,MAAM,CAAC,UAAU,CAAC,iBAAiB,GAAG,CAAC,EAAE,CAAC;gBAC7C,MAAM,CAAC,gBAAgB,CAAC,GAAG,IAAI,0BAAc,CAC5C,MAAM,CAAC,UAAU,CAAC,iBAAiB,CACnC,CAAA;YACF,CAAC;QACF,CAAC;QACD,IAAI,MAAM,CAAC,UAAU,CAAC,eAAe,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;YAC5D,OAAO,CAAC,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,eAAe,CAAA;QACtD,CAAC;QAED,IAAI,MAAM,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;gBACzB,OAAO,CAAC,UAAU,GAAG,EAAE,CAAA;YACxB,CAAC;YACD,OAAO,CAAC,UAAU,CAAC,iBAAiB;gBACnC,MAAM,CAAC,UAAU,CAAC,iBAAiB,CAAA;QACrC,CAAC;IACF,CAAC;IAED,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC;QACd,MAAM,CAAC,YAAY,GAAG,KAAK,CAAA;QAC3B,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAA;IAC7B,CAAC;SAAM,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC;QACnB,MAAM,GAAG,GAAG,IAAI,4BAAmB,CAClC,uBAAuB,iBAAW,CAAC,EAAE,CAAC,EAAE,EACxC,EAAE,CACF,CAAA;QACD,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,CAAA;QACzB,IAAI,MAAM,CAAC,OAAO,CAAC,uBAAuB,EAAE,CAAC;YAC5C,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAA;QACzB,CAAC;IACF,CAAC;AACF,CAAC,CAAA;AAED,kBAAe,aAAa,CAAA"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/topic-alias-send.js": {
      "lineLengths": [
        13, 62, 41, 55, 22, 17, 17, 8, 20, 11, 22, 22, 66, 35, 82, 27, 28, 9, 5,
        23, 46, 25, 9, 51, 20, 44, 9, 44, 41, 40, 45, 20, 5, 28, 44, 5, 28, 47,
        43, 41, 9, 21, 5, 13, 34, 31, 37, 24, 5, 19, 57, 18, 25, 73, 5, 1, 33,
        44
      ],
      "data": {
        "version": 3,
        "file": "topic-alias-send.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/topic-alias-send.ts"
        ],
        "names": [],
        "mappings": ";;AAGA,yCAAoC;AACpC,uDAAkD;AAOlD,MAAqB,cAAc;IAC1B,YAAY,CAA0B;IAEtC,YAAY,CAAwB;IAEpC,GAAG,CAAQ;IAEX,eAAe,CAAiB;IAEjC,MAAM,CAAQ;IAErB,YAAY,GAAW;QACtB,IAAI,GAAG,GAAG,CAAC,EAAE,CAAC;YACb,IAAI,CAAC,YAAY,GAAG,IAAI,oBAAQ,CAAiB,EAAE,GAAG,EAAE,CAAC,CAAA;YACzD,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;YACtB,IAAI,CAAC,eAAe,GAAG,IAAI,kCAAe,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;YAClD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;YACd,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;QAChB,CAAC;IACF,CAAC;IAQD,GAAG,CAAC,KAAa,EAAE,KAAa;QAC/B,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACrC,OAAO,KAAK,CAAA;QACb,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAC1C,IAAI,KAAK,EAAE,CAAC;YACX,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA;QAChC,CAAC;QACD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QACnC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,CAAA;QAChC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAA;QACpC,OAAO,IAAI,CAAA;IACZ,CAAC;IAOD,eAAe,CAAC,KAAa;QAC5B,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;IACpC,CAAC;IAOD,eAAe,CAAC,KAAa;QAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA;QACtC,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE,CAAC;YAClC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAC7B,CAAC;QACD,OAAO,KAAK,CAAA;IACb,CAAC;IAKD,KAAK;QACJ,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAA;QACzB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;QACtB,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAA;QAC5B,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;IAChB,CAAC;IAMD,WAAW;QACV,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAA;QAChD,IAAI,KAAK;YAAE,OAAO,KAAK,CAAA;QAEvB,OAAO,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,CAAC,CAAC,CAAA;IACjE,CAAC;CACD;AApFD,iCAoFC"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/lru-cache/dist/commonjs/index.js": {
      "lineLengths": [
        13, 3, 19, 3, 62, 26, 47, 18, 41, 17, 11, 25, 21, 74, 21, 46, 45, 50,
        53, 2, 36, 32, 21, 32, 16, 28, 16, 22, 15, 24, 33, 35, 9, 6, 16, 32, 23,
        29, 9, 26, 23, 36, 23, 24, 40, 24, 39, 24, 52, 27, 13, 42, 9, 6, 82, 34,
        36, 19, 39, 78, 67, 71, 75, 81, 81, 133, 6, 1, 20, 47, 28, 73, 21, 40,
        70, 71, 71, 72, 55, 27, 56, 44, 10, 27, 20, 32, 25, 36, 29, 48, 31, 27,
        20, 31, 23, 20, 21, 5, 1, 13, 9, 11, 26, 33, 24, 42, 21, 22, 35, 42, 36,
        17, 5, 31, 29, 35, 75, 9, 28, 37, 24, 5, 13, 37, 5, 11, 40, 5, 1, 3, 61,
        2, 74, 72, 38, 2, 57, 2, 71, 76, 78, 2, 77, 3, 16, 54, 9, 13, 13, 18,
        17, 16, 7, 39, 7, 8, 7, 49, 7, 18, 7, 48, 7, 17, 7, 50, 7, 19, 7, 50, 7,
        19, 7, 46, 7, 15, 7, 50, 7, 19, 7, 47, 7, 16, 7, 48, 7, 17, 7, 51, 7,
        20, 7, 60, 7, 29, 7, 54, 7, 23, 7, 58, 7, 27, 7, 62, 7, 31, 7, 52, 7,
        21, 26, 10, 20, 12, 13, 13, 10, 10, 10, 10, 10, 14, 11, 12, 10, 16, 20,
        21, 7, 61, 65, 65, 6, 45, 6, 16, 7, 37, 16, 25, 30, 26, 28, 30, 32, 32,
        26, 26, 24, 31, 14, 24, 31, 14, 26, 22, 62, 108, 56, 54, 56, 50, 10, 5,
        34, 7, 51, 7, 15, 25, 5, 7, 55, 7, 19, 29, 5, 7, 64, 7, 26, 36, 5, 7,
        58, 7, 16, 26, 5, 7, 59, 7, 23, 33, 5, 22, 32, 5, 7, 55, 7, 19, 29, 5,
        7, 60, 7, 24, 34, 5, 26, 360, 42, 76, 9, 58, 25, 57, 9, 24, 32, 58, 47,
        35, 55, 106, 13, 61, 75, 13, 9, 39, 47, 76, 9, 38, 40, 48, 79, 9, 40,
        45, 33, 55, 55, 40, 40, 23, 23, 39, 23, 33, 44, 36, 9, 49, 46, 32, 9,
        14, 43, 39, 9, 43, 53, 47, 41, 67, 71, 63, 51, 57, 38, 38, 47, 91, 17,
        13, 47, 92, 13, 43, 9, 39, 55, 47, 47, 28, 58, 31, 20, 43, 28, 23, 38,
        83, 13, 42, 9, 51, 71, 84, 9, 65, 47, 35, 33, 86, 62, 74, 13, 9, 5, 7,
        79, 81, 7, 26, 52, 5, 30, 46, 48, 26, 30, 64, 50, 30, 49, 44, 47, 69,
        21, 28, 57, 37, 30, 30, 17, 36, 13, 10, 40, 63, 10, 46, 30, 40, 44, 36,
        35, 27, 33, 37, 51, 47, 48, 13, 10, 66, 39, 26, 30, 33, 41, 30, 80, 49,
        37, 30, 30, 17, 36, 13, 21, 10, 39, 48, 38, 25, 13, 36, 40, 33, 32, 13,
        56, 29, 10, 34, 36, 34, 65, 10, 5, 55, 31, 27, 28, 24, 27, 31, 47, 33,
        28, 41, 49, 29, 10, 62, 55, 66, 45, 25, 13, 34, 38, 64, 82, 21, 49, 42,
        104, 21, 17, 22, 91, 82, 48, 17, 13, 24, 10, 54, 32, 32, 61, 56, 38, 17,
        13, 49, 25, 40, 66, 13, 10, 5, 32, 40, 55, 38, 100, 9, 17, 6, 54, 25,
        45, 45, 26, 17, 54, 28, 17, 39, 26, 17, 22, 38, 17, 13, 9, 5, 55, 25,
        45, 45, 26, 17, 54, 28, 17, 39, 26, 17, 22, 38, 17, 13, 9, 5, 26, 38,
        62, 5, 7, 56, 63, 7, 16, 42, 49, 49, 61, 59, 13, 9, 5, 7, 56, 6, 56, 63,
        7, 17, 43, 49, 49, 61, 59, 13, 9, 5, 7, 57, 63, 7, 13, 42, 39, 34, 61,
        24, 13, 9, 5, 7, 53, 6, 57, 63, 7, 14, 43, 39, 34, 61, 24, 13, 9, 5, 7,
        59, 63, 7, 15, 42, 39, 34, 61, 39, 13, 9, 5, 7, 55, 6, 59, 63, 7, 16,
        43, 39, 34, 61, 39, 13, 9, 5, 7, 65, 31, 7, 25, 30, 5, 7, 72, 62, 35, 7,
        38, 7, 76, 74, 7, 31, 42, 39, 52, 40, 20, 36, 25, 52, 62, 13, 9, 5, 7,
        79, 44, 6, 49, 6, 79, 74, 6, 75, 7, 31, 42, 39, 52, 40, 20, 36, 25, 58,
        9, 5, 7, 74, 78, 7, 32, 43, 39, 52, 40, 20, 36, 25, 58, 9, 5, 7, 70, 23,
        7, 18, 28, 63, 35, 57, 31, 13, 9, 23, 5, 7, 77, 78, 6, 81, 80, 74, 6,
        78, 80, 19, 7, 15, 40, 28, 29, 35, 48, 36, 16, 32, 29, 32, 41, 38, 42,
        31, 58, 35, 41, 13, 9, 26, 40, 9, 21, 5, 7, 75, 40, 6, 76, 59, 6, 63,
        56, 6, 77, 28, 7, 12, 23, 62, 41, 39, 52, 40, 20, 57, 25, 36, 45, 42,
        73, 76, 57, 59, 13, 30, 44, 13, 38, 9, 19, 5, 7, 76, 6, 80, 31, 6, 77,
        72, 7, 15, 21, 41, 30, 75, 77, 77, 31, 18, 76, 53, 47, 13, 46, 9, 5, 7,
        32, 6, 73, 30, 6, 76, 74, 40, 6, 69, 70, 72, 27, 6, 65, 72, 69, 63, 18,
        6, 71, 70, 26, 6, 44, 6, 61, 69, 7, 32, 30, 27, 24, 9, 140, 60, 84, 53,
        53, 60, 25, 36, 51, 13, 66, 35, 24, 9, 71, 34, 23, 37, 28, 41, 38, 46,
        44, 38, 37, 37, 39, 43, 43, 31, 25, 51, 23, 35, 32, 9, 14, 21, 36, 48,
        31, 78, 74, 63, 61, 47, 57, 25, 52, 64, 25, 21, 17, 43, 43, 58, 21, 48,
        65, 21, 17, 44, 55, 41, 29, 43, 78, 53, 33, 47, 51, 17, 13, 30, 38, 13,
        9, 39, 42, 9, 25, 31, 52, 13, 23, 47, 9, 73, 38, 21, 42, 46, 13, 9, 20,
        5, 7, 65, 37, 7, 11, 13, 32, 54, 34, 51, 51, 56, 21, 17, 45, 31, 17, 13,
        9, 17, 58, 42, 25, 46, 50, 17, 13, 9, 5, 18, 32, 38, 38, 65, 60, 9, 61,
        35, 47, 13, 40, 54, 13, 9, 35, 67, 19, 44, 44, 34, 9, 31, 40, 34, 9, 14,
        42, 9, 31, 21, 20, 5, 7, 75, 76, 20, 6, 70, 80, 58, 6, 81, 77, 57, 6,
        38, 58, 7, 29, 76, 42, 34, 43, 45, 55, 29, 13, 40, 37, 47, 17, 29, 39,
        51, 17, 28, 13, 30, 37, 47, 13, 9, 26, 32, 9, 21, 5, 7, 75, 13, 6, 55,
        54, 7, 31, 61, 42, 34, 52, 19, 9, 39, 76, 71, 5, 50, 73, 41, 21, 9, 28,
        35, 65, 74, 30, 11, 27, 30, 20, 20, 10, 48, 42, 76, 33, 46, 55, 65, 36,
        64, 17, 22, 56, 17, 13, 58, 51, 13, 81, 25, 45, 38, 50, 71, 21, 26, 49,
        21, 17, 22, 39, 59, 54, 17, 13, 21, 10, 28, 33, 52, 47, 13, 33, 10, 35,
        42, 80, 87, 76, 25, 45, 85, 86, 79, 26, 45, 17, 46, 72, 72, 71, 73, 67,
        17, 13, 29, 78, 56, 17, 47, 13, 44, 25, 13, 10, 37, 61, 48, 73, 13, 58,
        58, 43, 55, 48, 53, 35, 69, 57, 47, 21, 17, 15, 10, 27, 50, 50, 37, 34,
        36, 34, 11, 34, 45, 73, 40, 9, 14, 38, 9, 18, 5, 27, 34, 25, 20, 22, 35,
        55, 47, 5, 39, 16, 22, 122, 22, 144, 34, 288, 36, 23, 37, 32, 27, 31,
        35, 23, 15, 9, 25, 23, 27, 31, 16, 27, 17, 28, 24, 37, 39, 35, 29, 19,
        19, 10, 40, 34, 23, 38, 72, 38, 9, 14, 47, 43, 45, 81, 29, 46, 30, 52,
        17, 75, 13, 79, 76, 49, 44, 27, 41, 40, 37, 47, 17, 27, 51, 25, 13, 77,
        33, 72, 66, 52, 25, 61, 40, 48, 13, 74, 9, 5, 44, 52, 28, 58, 17, 5, 31,
        44, 26, 69, 9, 66, 39, 45, 21, 37, 20, 20, 11, 33, 18, 5, 7, 74, 19, 6,
        62, 7, 29, 153, 42, 34, 47, 60, 23, 47, 39, 27, 41, 67, 32, 46, 50, 21,
        45, 52, 58, 17, 22, 33, 37, 67, 52, 21, 79, 17, 13, 18, 27, 39, 80, 81,
        82, 84, 53, 31, 54, 17, 40, 37, 47, 17, 29, 13, 9, 26, 32, 9, 5, 20, 26,
        26, 5, 24, 41, 44, 15, 69, 50, 29, 29, 23, 35, 39, 47, 13, 18, 68, 13,
        45, 31, 9, 5, 7, 38, 6, 60, 7, 15, 41, 5, 24, 28, 31, 46, 38, 31, 39,
        40, 17, 22, 48, 51, 53, 72, 21, 73, 47, 58, 25, 52, 65, 25, 21, 43, 53,
        53, 47, 55, 21, 52, 55, 21, 26, 53, 59, 53, 59, 21, 33, 43, 17, 13, 9,
        62, 38, 21, 42, 46, 13, 9, 23, 5, 7, 58, 7, 13, 37, 5, 20, 67, 43, 45,
        64, 13, 18, 47, 39, 50, 17, 44, 57, 17, 13, 9, 29, 38, 38, 41, 31, 33,
        9, 26, 32, 9, 23, 23, 30, 33, 23, 54, 38, 21, 42, 46, 13, 9, 5, 1, 28,
        33
      ],
      "data": {
        "version": 3,
        "file": "index.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/lru-cache/src/index.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "/**\n * @module LRUCache\n */\n\n// module-private names and types\ntype Perf = { now: () => number }\nconst perf: Perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst warned = new Set<string>()\n\n// either a function or a class\ntype ForC = ((...a: any[]) => any) | { new (...a: any[]): any }\n\n/* c8 ignore start */\nconst PROCESS = (\n  typeof process === 'object' && !!process ? process : {}\n) as { [k: string]: any }\n/* c8 ignore start */\n\nconst emitWarning = (\n  msg: string,\n  type: string,\n  code: string,\n  fn: ForC\n) => {\n  typeof PROCESS.emitWarning === 'function'\n    ? PROCESS.emitWarning(msg, type, code, fn)\n    : console.error(`[${code}] ${type}: ${msg}`)\n}\n\nlet AC = globalThis.AbortController\nlet AS = globalThis.AbortSignal\n\n/* c8 ignore start */\nif (typeof AC === 'undefined') {\n  //@ts-ignore\n  AS = class AbortSignal {\n    onabort?: (...a: any[]) => any\n    _onabort: ((...a: any[]) => any)[] = []\n    reason?: any\n    aborted: boolean = false\n    addEventListener(_: string, fn: (...a: any[]) => any) {\n      this._onabort.push(fn)\n    }\n  }\n  //@ts-ignore\n  AC = class AbortController {\n    constructor() {\n      warnACPolyfill()\n    }\n    signal = new AS()\n    abort(reason: any) {\n      if (this.signal.aborted) return\n      //@ts-ignore\n      this.signal.reason = reason\n      //@ts-ignore\n      this.signal.aborted = true\n      //@ts-ignore\n      for (const fn of this.signal._onabort) {\n        fn(reason)\n      }\n      this.signal.onabort?.(reason)\n    }\n  }\n  let printACPolyfillWarning =\n    PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== '1'\n  const warnACPolyfill = () => {\n    if (!printACPolyfillWarning) return\n    printACPolyfillWarning = false\n    emitWarning(\n      'AbortController is not defined. If using lru-cache in ' +\n        'node 14, load an AbortController polyfill from the ' +\n        '`node-abort-controller` package. A minimal polyfill is ' +\n        'provided for use by LRUCache.fetch(), but it should not be ' +\n        'relied upon in other contexts (eg, passing it to other APIs that ' +\n        'use AbortController/AbortSignal might have undesirable effects). ' +\n        'You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.',\n      'NO_ABORT_CONTROLLER',\n      'ENOTSUP',\n      warnACPolyfill\n    )\n  }\n}\n/* c8 ignore stop */\n\nconst shouldWarn = (code: string) => !warned.has(code)\n\nconst TYPE = Symbol('type')\nexport type PosInt = number & { [TYPE]: 'Positive Integer' }\nexport type Index = number & { [TYPE]: 'LRUCache Index' }\n\nconst isPosInt = (n: any): n is PosInt =>\n  n && n === Math.floor(n) && n > 0 && isFinite(n)\n\nexport type UintArray = Uint8Array | Uint16Array | Uint32Array\nexport type NumberArray = UintArray | number[]\n\n/* c8 ignore start */\n// This is a little bit ridiculous, tbh.\n// The maximum array length is 2^32-1 or thereabouts on most JS impls.\n// And well before that point, you're caching the entire world, I mean,\n// that's ~32GB of just integers for the next/prev links, plus whatever\n// else to hold that many keys and values.  Just filling the memory with\n// zeroes at init time is brutal when you get that big.\n// But why not be complete?\n// Maybe in the future, these limits will have expanded.\nconst getUintArray = (max: number) =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n/* c8 ignore stop */\n\nclass ZeroArray extends Array<number> {\n  constructor(size: number) {\n    super(size)\n    this.fill(0)\n  }\n}\nexport type { ZeroArray }\nexport type { Stack }\n\nexport type StackLike = Stack | Index[]\nclass Stack {\n  heap: NumberArray\n  length: number\n  // private constructor\n  static #constructing: boolean = false\n  static create(max: number): StackLike {\n    const HeapCls = getUintArray(max)\n    if (!HeapCls) return []\n    Stack.#constructing = true\n    const s = new Stack(max, HeapCls)\n    Stack.#constructing = false\n    return s\n  }\n  constructor(\n    max: number,\n    HeapCls: { new (n: number): NumberArray }\n  ) {\n    /* c8 ignore start */\n    if (!Stack.#constructing) {\n      throw new TypeError('instantiate Stack using Stack.create(n)')\n    }\n    /* c8 ignore stop */\n    this.heap = new HeapCls(max)\n    this.length = 0\n  }\n  push(n: Index) {\n    this.heap[this.length++] = n\n  }\n  pop(): Index {\n    return this.heap[--this.length] as Index\n  }\n}\n\n/**\n * Promise representing an in-progress {@link LRUCache#fetch} call\n */\nexport type BackgroundFetch<V> = Promise<V | undefined> & {\n  __returned: BackgroundFetch<V> | undefined\n  __abortController: AbortController\n  __staleWhileFetching: V | undefined\n}\n\nexport type DisposeTask<K, V> = [\n  value: V,\n  key: K,\n  reason: LRUCache.DisposeReason\n]\n\nexport namespace LRUCache {\n  /**\n   * An integer greater than 0, reflecting the calculated size of items\n   */\n  export type Size = number\n\n  /**\n   * Integer greater than 0, representing some number of milliseconds, or the\n   * time at which a TTL started counting from.\n   */\n  export type Milliseconds = number\n\n  /**\n   * An integer greater than 0, reflecting a number of items\n   */\n  export type Count = number\n\n  /**\n   * The reason why an item was removed from the cache, passed\n   * to the {@link Disposer} methods.\n   *\n   * - `evict`: The item was evicted because it is the least recently used,\n   *   and the cache is full.\n   * - `set`: A new value was set, overwriting the old value being disposed.\n   * - `delete`: The item was explicitly deleted, either by calling\n   *   {@link LRUCache#delete}, {@link LRUCache#clear}, or\n   *   {@link LRUCache#set} with an undefined value.\n   * - `expire`: The item was removed due to exceeding its TTL.\n   * - `fetch`: A {@link OptionsBase#fetchMethod} operation returned\n   *   `undefined` or was aborted, causing the item to be deleted.\n   */\n  export type DisposeReason =\n    | 'evict'\n    | 'set'\n    | 'delete'\n    | 'expire'\n    | 'fetch'\n  /**\n   * A method called upon item removal, passed as the\n   * {@link OptionsBase.dispose} and/or\n   * {@link OptionsBase.disposeAfter} options.\n   */\n  export type Disposer<K, V> = (\n    value: V,\n    key: K,\n    reason: DisposeReason\n  ) => void\n\n  /**\n   * A function that returns the effective calculated size\n   * of an entry in the cache.\n   */\n  export type SizeCalculator<K, V> = (value: V, key: K) => Size\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.fetchMethod} function.\n   */\n  export interface FetcherOptions<K, V, FC = unknown> {\n    signal: AbortSignal\n    options: FetcherFetchOptions<K, V, FC>\n    /**\n     * Object provided in the {@link FetchOptions.context} option to\n     * {@link LRUCache#fetch}\n     */\n    context: FC\n  }\n\n  /**\n   * Occasionally, it may be useful to track the internal behavior of the\n   * cache, particularly for logging, debugging, or for behavior within the\n   * `fetchMethod`. To do this, you can pass a `status` object to the\n   * {@link LRUCache#fetch}, {@link LRUCache#get}, {@link LRUCache#set},\n   * {@link LRUCache#memo}, and {@link LRUCache#has} methods.\n   *\n   * The `status` option should be a plain JavaScript object. The following\n   * fields will be set on it appropriately, depending on the situation.\n   */\n  export interface Status<V> {\n    /**\n     * The status of a set() operation.\n     *\n     * - add: the item was not found in the cache, and was added\n     * - update: the item was in the cache, with the same value provided\n     * - replace: the item was in the cache, and replaced\n     * - miss: the item was not added to the cache for some reason\n     */\n    set?: 'add' | 'update' | 'replace' | 'miss'\n\n    /**\n     * the ttl stored for the item, or undefined if ttls are not used.\n     */\n    ttl?: Milliseconds\n\n    /**\n     * the start time for the item, or undefined if ttls are not used.\n     */\n    start?: Milliseconds\n\n    /**\n     * The timestamp used for TTL calculation\n     */\n    now?: Milliseconds\n\n    /**\n     * the remaining ttl for the item, or undefined if ttls are not used.\n     */\n    remainingTTL?: Milliseconds\n\n    /**\n     * The calculated size for the item, if sizes are used.\n     */\n    entrySize?: Size\n\n    /**\n     * The total calculated size of the cache, if sizes are used.\n     */\n    totalCalculatedSize?: Size\n\n    /**\n     * A flag indicating that the item was not stored, due to exceeding the\n     * {@link OptionsBase.maxEntrySize}\n     */\n    maxEntrySizeExceeded?: true\n\n    /**\n     * The old value, specified in the case of `set:'update'` or\n     * `set:'replace'`\n     */\n    oldValue?: V\n\n    /**\n     * The results of a {@link LRUCache#has} operation\n     *\n     * - hit: the item was found in the cache\n     * - stale: the item was found in the cache, but is stale\n     * - miss: the item was not found in the cache\n     */\n    has?: 'hit' | 'stale' | 'miss'\n\n    /**\n     * The status of a {@link LRUCache#fetch} operation.\n     * Note that this can change as the underlying fetch() moves through\n     * various states.\n     *\n     * - inflight: there is another fetch() for this key which is in process\n     * - get: there is no {@link OptionsBase.fetchMethod}, so\n     *   {@link LRUCache#get} was called.\n     * - miss: the item is not in cache, and will be fetched.\n     * - hit: the item is in the cache, and was resolved immediately.\n     * - stale: the item is in the cache, but stale.\n     * - refresh: the item is in the cache, and not stale, but\n     *   {@link FetchOptions.forceRefresh} was specified.\n     */\n    fetch?: 'get' | 'inflight' | 'miss' | 'hit' | 'stale' | 'refresh'\n\n    /**\n     * The {@link OptionsBase.fetchMethod} was called\n     */\n    fetchDispatched?: true\n\n    /**\n     * The cached value was updated after a successful call to\n     * {@link OptionsBase.fetchMethod}\n     */\n    fetchUpdated?: true\n\n    /**\n     * The reason for a fetch() rejection.  Either the error raised by the\n     * {@link OptionsBase.fetchMethod}, or the reason for an\n     * AbortSignal.\n     */\n    fetchError?: Error\n\n    /**\n     * The fetch received an abort signal\n     */\n    fetchAborted?: true\n\n    /**\n     * The abort signal received was ignored, and the fetch was allowed to\n     * continue.\n     */\n    fetchAbortIgnored?: true\n\n    /**\n     * The fetchMethod promise resolved successfully\n     */\n    fetchResolved?: true\n\n    /**\n     * The fetchMethod promise was rejected\n     */\n    fetchRejected?: true\n\n    /**\n     * The status of a {@link LRUCache#get} operation.\n     *\n     * - fetching: The item is currently being fetched.  If a previous value\n     *   is present and allowed, that will be returned.\n     * - stale: The item is in the cache, and is stale.\n     * - hit: the item is in the cache\n     * - miss: the item is not in the cache\n     */\n    get?: 'stale' | 'hit' | 'miss'\n\n    /**\n     * A fetch or get operation returned a stale value.\n     */\n    returnedStale?: true\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#fetch}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link OptionsBase.noDeleteOnFetchRejection},\n   * {@link OptionsBase.allowStaleOnFetchRejection},\n   * {@link FetchOptions.forceRefresh}, and\n   * {@link FetcherOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.fetchMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the fetchMethod is called.\n   */\n  export interface FetcherFetchOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    status?: Status<V>\n    size?: Size\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#fetch} method.\n   */\n  export interface FetchOptions<K, V, FC>\n    extends FetcherFetchOptions<K, V, FC> {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.fetchMethod} as\n     * the {@link FetcherOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    signal?: AbortSignal\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface FetchOptionsWithContext<K, V, FC>\n    extends FetchOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#fetch} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface FetchOptionsNoContext<K, V>\n    extends FetchOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  export interface MemoOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n      | 'noDeleteOnFetchRejection'\n      | 'allowStaleOnFetchRejection'\n      | 'ignoreFetchAbort'\n      | 'allowStaleOnFetchAbort'\n    > {\n    /**\n     * Set to true to force a re-load of the existing data, even if it\n     * is not yet stale.\n     */\n    forceRefresh?: boolean\n    /**\n     * Context provided to the {@link OptionsBase.memoMethod} as\n     * the {@link MemoizerOptions.context} param.\n     *\n     * If the FC type is specified as unknown (the default),\n     * undefined or void, then this is optional.  Otherwise, it will\n     * be required.\n     */\n    context?: FC\n    status?: Status<V>\n  }\n  /**\n   * Options provided to {@link LRUCache#memo} when the FC type is something\n   * other than `unknown`, `undefined`, or `void`\n   */\n  export interface MemoOptionsWithContext<K, V, FC>\n    extends MemoOptions<K, V, FC> {\n    context: FC\n  }\n  /**\n   * Options provided to {@link LRUCache#memo} when the FC type is\n   * `undefined` or `void`\n   */\n  export interface MemoOptionsNoContext<K, V>\n    extends MemoOptions<K, V, undefined> {\n    context?: undefined\n  }\n\n  /**\n   * Options provided to the\n   * {@link OptionsBase.memoMethod} function.\n   */\n  export interface MemoizerOptions<K, V, FC = unknown> {\n    options: MemoizerMemoOptions<K, V, FC>\n    /**\n     * Object provided in the {@link MemoOptions.context} option to\n     * {@link LRUCache#memo}\n     */\n    context: FC\n  }\n\n  /**\n   * options which override the options set in the LRUCache constructor\n   * when calling {@link LRUCache#memo}.\n   *\n   * This is the union of {@link GetOptions} and {@link SetOptions}, plus\n   * {@link MemoOptions.forceRefresh}, and\n   * {@link MemoerOptions.context}\n   *\n   * Any of these may be modified in the {@link OptionsBase.memoMethod}\n   * function, but the {@link GetOptions} fields will of course have no\n   * effect, as the {@link LRUCache#get} call already happened by the time\n   * the memoMethod is called.\n   */\n  export interface MemoizerMemoOptions<K, V, FC = unknown>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      | 'allowStale'\n      | 'updateAgeOnGet'\n      | 'noDeleteOnStaleGet'\n      | 'sizeCalculation'\n      | 'ttl'\n      | 'noDisposeOnSet'\n      | 'noUpdateTTL'\n    > {\n    status?: Status<V>\n    size?: Size\n    start?: Milliseconds\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#has} method.\n   */\n  export interface HasOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'updateAgeOnHas'> {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#get} method.\n   */\n  export interface GetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'allowStale' | 'updateAgeOnGet' | 'noDeleteOnStaleGet'\n    > {\n    status?: Status<V>\n  }\n\n  /**\n   * Options that may be passed to the {@link LRUCache#peek} method.\n   */\n  export interface PeekOptions<K, V, FC>\n    extends Pick<OptionsBase<K, V, FC>, 'allowStale'> {}\n\n  /**\n   * Options that may be passed to the {@link LRUCache#set} method.\n   */\n  export interface SetOptions<K, V, FC>\n    extends Pick<\n      OptionsBase<K, V, FC>,\n      'sizeCalculation' | 'ttl' | 'noDisposeOnSet' | 'noUpdateTTL'\n    > {\n    /**\n     * If size tracking is enabled, then setting an explicit size\n     * in the {@link LRUCache#set} call will prevent calling the\n     * {@link OptionsBase.sizeCalculation} function.\n     */\n    size?: Size\n    /**\n     * If TTL tracking is enabled, then setting an explicit start\n     * time in the {@link LRUCache#set} call will override the\n     * default time from `performance.now()` or `Date.now()`.\n     *\n     * Note that it must be a valid value for whichever time-tracking\n     * method is in use.\n     */\n    start?: Milliseconds\n    status?: Status<V>\n  }\n\n  /**\n   * The type signature for the {@link OptionsBase.fetchMethod} option.\n   */\n  export type Fetcher<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: FetcherOptions<K, V, FC>\n  ) => Promise<V | undefined | void> | V | undefined | void\n\n  /**\n   * the type signature for the {@link OptionsBase.memoMethod} option.\n   */\n  export type Memoizer<K, V, FC = unknown> = (\n    key: K,\n    staleValue: V | undefined,\n    options: MemoizerOptions<K, V, FC>\n  ) => V\n\n  /**\n   * Options which may be passed to the {@link LRUCache} constructor.\n   *\n   * Most of these may be overridden in the various options that use\n   * them.\n   *\n   * Despite all being technically optional, the constructor requires that\n   * a cache is at minimum limited by one or more of {@link OptionsBase.max},\n   * {@link OptionsBase.ttl}, or {@link OptionsBase.maxSize}.\n   *\n   * If {@link OptionsBase.ttl} is used alone, then it is strongly advised\n   * (and in fact required by the type definitions here) that the cache\n   * also set {@link OptionsBase.ttlAutopurge}, to prevent potentially\n   * unbounded storage.\n   *\n   * All options are also available on the {@link LRUCache} instance, making\n   * it safe to pass an LRUCache instance as the options argumemnt to\n   * make another empty cache of the same type.\n   *\n   * Some options are marked as read-only, because changing them after\n   * instantiation is not safe. Changing any of the other options will of\n   * course only have an effect on subsequent method calls.\n   */\n  export interface OptionsBase<K, V, FC> {\n    /**\n     * The maximum number of items to store in the cache before evicting\n     * old entries. This is read-only on the {@link LRUCache} instance,\n     * and may not be overridden.\n     *\n     * If set, then storage space will be pre-allocated at construction\n     * time, and the cache will perform significantly faster.\n     *\n     * Note that significantly fewer items may be stored, if\n     * {@link OptionsBase.maxSize} and/or {@link OptionsBase.ttl} are also\n     * set.\n     *\n     * **It is strongly recommended to set a `max` to prevent unbounded growth\n     * of the cache.**\n     */\n    max?: Count\n\n    /**\n     * Max time in milliseconds for items to live in cache before they are\n     * considered stale.  Note that stale items are NOT preemptively removed by\n     * default, and MAY live in the cache, contributing to its LRU max, long\n     * after they have expired, unless {@link OptionsBase.ttlAutopurge} is\n     * set.\n     *\n     * If set to `0` (the default value), then that means \"do not track\n     * TTL\", not \"expire immediately\".\n     *\n     * Also, as this cache is optimized for LRU/MRU operations, some of\n     * the staleness/TTL checks will reduce performance, as they will incur\n     * overhead by deleting items.\n     *\n     * This is not primarily a TTL cache, and does not make strong TTL\n     * guarantees. There is no pre-emptive pruning of expired items, but you\n     * _may_ set a TTL on the cache, and it will treat expired items as missing\n     * when they are fetched, and delete them.\n     *\n     * Optional, but must be a non-negative integer in ms if specified.\n     *\n     * This may be overridden by passing an options object to `cache.set()`.\n     *\n     * At least one of `max`, `maxSize`, or `TTL` is required. This must be a\n     * positive integer if set.\n     *\n     * Even if ttl tracking is enabled, **it is strongly recommended to set a\n     * `max` to prevent unbounded growth of the cache.**\n     *\n     * If ttl tracking is enabled, and `max` and `maxSize` are not set,\n     * and `ttlAutopurge` is not set, then a warning will be emitted\n     * cautioning about the potential for unbounded memory consumption.\n     * (The TypeScript definitions will also discourage this.)\n     */\n    ttl?: Milliseconds\n\n    /**\n     * Minimum amount of time in ms in which to check for staleness.\n     * Defaults to 1, which means that the current time is checked\n     * at most once per millisecond.\n     *\n     * Set to 0 to check the current time every time staleness is tested.\n     * (This reduces performance, and is theoretically unnecessary.)\n     *\n     * Setting this to a higher value will improve performance somewhat\n     * while using ttl tracking, albeit at the expense of keeping stale\n     * items around a bit longer than their TTLs would indicate.\n     *\n     * @default 1\n     */\n    ttlResolution?: Milliseconds\n\n    /**\n     * Preemptively remove stale items from the cache.\n     *\n     * Note that this may *significantly* degrade performance, especially if\n     * the cache is storing a large number of items. It is almost always best\n     * to just leave the stale items in the cache, and let them fall out as new\n     * items are added.\n     *\n     * Note that this means that {@link OptionsBase.allowStale} is a bit\n     * pointless, as stale items will be deleted almost as soon as they\n     * expire.\n     *\n     * Use with caution!\n     */\n    ttlAutopurge?: boolean\n\n    /**\n     * When using time-expiring entries with `ttl`, setting this to `true` will\n     * make each item's age reset to 0 whenever it is retrieved from cache with\n     * {@link LRUCache#get}, causing it to not expire. (It can still fall out\n     * of cache based on recency of use, of course.)\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     */\n    updateAgeOnGet?: boolean\n\n    /**\n     * When using time-expiring entries with `ttl`, setting this to `true` will\n     * make each item's age reset to 0 whenever its presence in the cache is\n     * checked with {@link LRUCache#has}, causing it to not expire. (It can\n     * still fall out of cache based on recency of use, of course.)\n     *\n     * Has no effect if {@link OptionsBase.ttl} is not set.\n     */\n    updateAgeOnHas?: boolean\n\n    /**\n     * Allow {@link LRUCache#get} and {@link LRUCache#fetch} calls to return\n     * stale data, if available.\n     *\n     * By default, if you set `ttl`, stale items will only be deleted from the\n     * cache when you `get(key)`. That is, it's not preemptively pruning items,\n     * unless {@link OptionsBase.ttlAutopurge} is set.\n     *\n     * If you set `allowStale:true`, it'll return the stale value *as well as*\n     * deleting it. If you don't set this, then it'll return `undefined` when\n     * you try to get a stale entry.\n     *\n     * Note that when a stale entry is fetched, _even if it is returned due to\n     * `allowStale` being set_, it is removed from the cache immediately. You\n     * can suppress this behavior by setting\n     * {@link OptionsBase.noDeleteOnStaleGet}, either in the constructor, or in\n     * the options provided to {@link LRUCache#get}.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     * The `cache.has()` method will always return `false` for stale items.\n     *\n     * Only relevant if a ttl is set.\n     */\n    allowStale?: boolean\n\n    /**\n     * Function that is called on items when they are dropped from the\n     * cache, as `dispose(value, key, reason)`.\n     *\n     * This can be handy if you want to close file descriptors or do\n     * other cleanup tasks when items are no longer stored in the cache.\n     *\n     * **NOTE**: It is called _before_ the item has been fully removed\n     * from the cache, so if you want to put it right back in, you need\n     * to wait until the next tick. If you try to add it back in during\n     * the `dispose()` function call, it will break things in subtle and\n     * weird ways.\n     *\n     * Unlike several other options, this may _not_ be overridden by\n     * passing an option to `set()`, for performance reasons.\n     *\n     * The `reason` will be one of the following strings, corresponding\n     * to the reason for the item's deletion:\n     *\n     * - `evict` Item was evicted to make space for a new addition\n     * - `set` Item was overwritten by a new value\n     * - `expire` Item expired its TTL\n     * - `fetch` Item was deleted due to a failed or aborted fetch, or a\n     *   fetchMethod returning `undefined.\n     * - `delete` Item was removed by explicit `cache.delete(key)`,\n     *   `cache.clear()`, or `cache.set(key, undefined)`.\n     */\n    dispose?: Disposer<K, V>\n\n    /**\n     * The same as {@link OptionsBase.dispose}, but called *after* the entry\n     * is completely removed and the cache is once again in a clean state.\n     *\n     * It is safe to add an item right back into the cache at this point.\n     * However, note that it is *very* easy to inadvertently create infinite\n     * recursion this way.\n     */\n    disposeAfter?: Disposer<K, V>\n\n    /**\n     * Set to true to suppress calling the\n     * {@link OptionsBase.dispose} function if the entry key is\n     * still accessible within the cache.\n     *\n     * This may be overridden by passing an options object to\n     * {@link LRUCache#set}.\n     *\n     * Only relevant if `dispose` or `disposeAfter` are set.\n     */\n    noDisposeOnSet?: boolean\n\n    /**\n     * Boolean flag to tell the cache to not update the TTL when setting a new\n     * value for an existing key (ie, when updating a value rather than\n     * inserting a new value).  Note that the TTL value is _always_ set (if\n     * provided) when adding a new entry into the cache.\n     *\n     * Has no effect if a {@link OptionsBase.ttl} is not set.\n     *\n     * May be passed as an option to {@link LRUCache#set}.\n     */\n    noUpdateTTL?: boolean\n\n    /**\n     * Set to a positive integer to track the sizes of items added to the\n     * cache, and automatically evict items in order to stay below this size.\n     * Note that this may result in fewer than `max` items being stored.\n     *\n     * Attempting to add an item to the cache whose calculated size is greater\n     * that this amount will be a no-op. The item will not be cached, and no\n     * other items will be evicted.\n     *\n     * Optional, must be a positive integer if provided.\n     *\n     * Sets `maxEntrySize` to the same value, unless a different value is\n     * provided for `maxEntrySize`.\n     *\n     * At least one of `max`, `maxSize`, or `TTL` is required. This must be a\n     * positive integer if set.\n     *\n     * Even if size tracking is enabled, **it is strongly recommended to set a\n     * `max` to prevent unbounded growth of the cache.**\n     *\n     * Note also that size tracking can negatively impact performance,\n     * though for most cases, only minimally.\n     */\n    maxSize?: Size\n\n    /**\n     * The maximum allowed size for any single item in the cache.\n     *\n     * If a larger item is passed to {@link LRUCache#set} or returned by a\n     * {@link OptionsBase.fetchMethod} or {@link OptionsBase.memoMethod}, then\n     * it will not be stored in the cache.\n     *\n     * Attempting to add an item whose calculated size is greater than\n     * this amount will not cache the item or evict any old items, but\n     * WILL delete an existing value if one is already present.\n     *\n     * Optional, must be a positive integer if provided. Defaults to\n     * the value of `maxSize` if provided.\n     */\n    maxEntrySize?: Size\n\n    /**\n     * A function that returns a number indicating the item's size.\n     *\n     * Requires {@link OptionsBase.maxSize} to be set.\n     *\n     * If not provided, and {@link OptionsBase.maxSize} or\n     * {@link OptionsBase.maxEntrySize} are set, then all\n     * {@link LRUCache#set} calls **must** provide an explicit\n     * {@link SetOptions.size} or sizeCalculation param.\n     */\n    sizeCalculation?: SizeCalculator<K, V>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#fetch}\n     *\n     * ```ts\n     * fetchMethod(key, staleValue, { signal, options, context })\n     * ```\n     *\n     * If `fetchMethod` is not provided, then `cache.fetch(key)` is equivalent\n     * to `Promise.resolve(cache.get(key))`.\n     *\n     * If at any time, `signal.aborted` is set to `true`, or if the\n     * `signal.onabort` method is called, or if it emits an `'abort'` event\n     * which you can listen to with `addEventListener`, then that means that\n     * the fetch should be abandoned. This may be passed along to async\n     * functions aware of AbortController/AbortSignal behavior.\n     *\n     * The `fetchMethod` should **only** return `undefined` or a Promise\n     * resolving to `undefined` if the AbortController signaled an `abort`\n     * event. In all other cases, it should return or resolve to a value\n     * suitable for adding to the cache.\n     *\n     * The `options` object is a union of the options that may be provided to\n     * `set()` and `get()`. If they are modified, then that will result in\n     * modifying the settings to `cache.set()` when the value is resolved, and\n     * in the case of\n     * {@link OptionsBase.noDeleteOnFetchRejection} and\n     * {@link OptionsBase.allowStaleOnFetchRejection}, the handling of\n     * `fetchMethod` failures.\n     *\n     * For example, a DNS cache may update the TTL based on the value returned\n     * from a remote DNS server by changing `options.ttl` in the `fetchMethod`.\n     */\n    fetchMethod?: Fetcher<K, V, FC>\n\n    /**\n     * Method that provides the implementation for {@link LRUCache#memo}\n     */\n    memoMethod?: Memoizer<K, V, FC>\n\n    /**\n     * Set to true to suppress the deletion of stale data when a\n     * {@link OptionsBase.fetchMethod} returns a rejected promise.\n     */\n    noDeleteOnFetchRejection?: boolean\n\n    /**\n     * Do not delete stale items when they are retrieved with\n     * {@link LRUCache#get}.\n     *\n     * Note that the `get` return value will still be `undefined`\n     * unless {@link OptionsBase.allowStale} is true.\n     *\n     * When using time-expiring entries with `ttl`, by default stale\n     * items will be removed from the cache when the key is accessed\n     * with `cache.get()`.\n     *\n     * Setting this option will cause stale items to remain in the cache, until\n     * they are explicitly deleted with `cache.delete(key)`, or retrieved with\n     * `noDeleteOnStaleGet` set to `false`.\n     *\n     * This may be overridden by passing an options object to `cache.get()`.\n     *\n     * Only relevant if a ttl is used.\n     */\n    noDeleteOnStaleGet?: boolean\n\n    /**\n     * Set to true to allow returning stale data when a\n     * {@link OptionsBase.fetchMethod} throws an error or returns a rejected\n     * promise.\n     *\n     * This differs from using {@link OptionsBase.allowStale} in that stale\n     * data will ONLY be returned in the case that the {@link LRUCache#fetch}\n     * fails, not any other times.\n     *\n     * If a `fetchMethod` fails, and there is no stale value available, the\n     * `fetch()` will resolve to `undefined`. Ie, all `fetchMethod` errors are\n     * suppressed.\n     *\n     * Implies `noDeleteOnFetchRejection`.\n     *\n     * This may be set in calls to `fetch()`, or defaulted on the constructor,\n     * or overridden by modifying the options object in the `fetchMethod`.\n     */\n    allowStaleOnFetchRejection?: boolean\n\n    /**\n     * Set to true to return a stale value from the cache when the\n     * `AbortSignal` passed to the {@link OptionsBase.fetchMethod} dispatches\n     * an `'abort'` event, whether user-triggered, or due to internal cache\n     * behavior.\n     *\n     * Unless {@link OptionsBase.ignoreFetchAbort} is also set, the underlying\n     * {@link OptionsBase.fetchMethod} will still be considered canceled, and\n     * any value it returns will be ignored and not cached.\n     *\n     * Caveat: since fetches are aborted when a new value is explicitly\n     * set in the cache, this can lead to fetch returning a stale value,\n     * since that was the fallback value _at the moment the `fetch()` was\n     * initiated_, even though the new updated value is now present in\n     * the cache.\n     *\n     * For example:\n     *\n     * ```ts\n     * const cache = new LRUCache<string, any>({\n     *   ttl: 100,\n     *   fetchMethod: async (url, oldValue, { signal }) =>  {\n     *     const res = await fetch(url, { signal })\n     *     return await res.json()\n     *   }\n     * })\n     * cache.set('https://example.com/', { some: 'data' })\n     * // 100ms go by...\n     * const result = cache.fetch('https://example.com/')\n     * cache.set('https://example.com/', { other: 'thing' })\n     * console.log(await result) // { some: 'data' }\n     * console.log(cache.get('https://example.com/')) // { other: 'thing' }\n     * ```\n     */\n    allowStaleOnFetchAbort?: boolean\n\n    /**\n     * Set to true to ignore the `abort` event emitted by the `AbortSignal`\n     * object passed to {@link OptionsBase.fetchMethod}, and still cache the\n     * resulting resolution value, as long as it is not `undefined`.\n     *\n     * When used on its own, this means aborted {@link LRUCache#fetch} calls\n     * are not immediately resolved or rejected when they are aborted, and\n     * instead take the full time to await.\n     *\n     * When used with {@link OptionsBase.allowStaleOnFetchAbort}, aborted\n     * {@link LRUCache#fetch} calls will resolve immediately to their stale\n     * cached value or `undefined`, and will continue to process and eventually\n     * update the cache when they resolve, as long as the resulting value is\n     * not `undefined`, thus supporting a \"return stale on timeout while\n     * refreshing\" mechanism by passing `AbortSignal.timeout(n)` as the signal.\n     *\n     * For example:\n     *\n     * ```ts\n     * const c = new LRUCache({\n     *   ttl: 100,\n     *   ignoreFetchAbort: true,\n     *   allowStaleOnFetchAbort: true,\n     *   fetchMethod: async (key, oldValue, { signal }) => {\n     *     // note: do NOT pass the signal to fetch()!\n     *     // let's say this fetch can take a long time.\n     *     const res = await fetch(`https://slow-backend-server/${key}`)\n     *     return await res.json()\n     *   },\n     * })\n     *\n     * // this will return the stale value after 100ms, while still\n     * // updating in the background for next time.\n     * const val = await c.fetch('key', { signal: AbortSignal.timeout(100) })\n     * ```\n     *\n     * **Note**: regardless of this setting, an `abort` event _is still\n     * emitted on the `AbortSignal` object_, so may result in invalid results\n     * when passed to other underlying APIs that use AbortSignals.\n     *\n     * This may be overridden in the {@link OptionsBase.fetchMethod} or the\n     * call to {@link LRUCache#fetch}.\n     */\n    ignoreFetchAbort?: boolean\n  }\n\n  export interface OptionsMaxLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    max: Count\n  }\n  export interface OptionsTTLLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    ttl: Milliseconds\n    ttlAutopurge: boolean\n  }\n  export interface OptionsSizeLimit<K, V, FC>\n    extends OptionsBase<K, V, FC> {\n    maxSize: Size\n  }\n\n  /**\n   * The valid safe options for the {@link LRUCache} constructor\n   */\n  export type Options<K, V, FC> =\n    | OptionsMaxLimit<K, V, FC>\n    | OptionsSizeLimit<K, V, FC>\n    | OptionsTTLLimit<K, V, FC>\n\n  /**\n   * Entry objects used by {@link LRUCache#load} and {@link LRUCache#dump},\n   * and returned by {@link LRUCache#info}.\n   */\n  export interface Entry<V> {\n    value: V\n    ttl?: Milliseconds\n    size?: Size\n    start?: Milliseconds\n  }\n}\n\n/**\n * Default export, the thing you're using this module to get.\n *\n * The `K` and `V` types define the key and value types, respectively. The\n * optional `FC` type defines the type of the `context` object passed to\n * `cache.fetch()` and `cache.memo()`.\n *\n * Keys and values **must not** be `null` or `undefined`.\n *\n * All properties from the options object (with the exception of `max`,\n * `maxSize`, `fetchMethod`, `memoMethod`, `dispose` and `disposeAfter`) are\n * added as normal public members. (The listed options are read-only getters.)\n *\n * Changing any of these will alter the defaults for subsequent method calls.\n */\nexport class LRUCache<K extends {}, V extends {}, FC = unknown>\n  implements Map<K, V>\n{\n  // options that cannot be changed without disaster\n  readonly #max: LRUCache.Count\n  readonly #maxSize: LRUCache.Size\n  readonly #dispose?: LRUCache.Disposer<K, V>\n  readonly #disposeAfter?: LRUCache.Disposer<K, V>\n  readonly #fetchMethod?: LRUCache.Fetcher<K, V, FC>\n  readonly #memoMethod?: LRUCache.Memoizer<K, V, FC>\n\n  /**\n   * {@link LRUCache.OptionsBase.ttl}\n   */\n  ttl: LRUCache.Milliseconds\n\n  /**\n   * {@link LRUCache.OptionsBase.ttlResolution}\n   */\n  ttlResolution: LRUCache.Milliseconds\n  /**\n   * {@link LRUCache.OptionsBase.ttlAutopurge}\n   */\n  ttlAutopurge: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnGet}\n   */\n  updateAgeOnGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.updateAgeOnHas}\n   */\n  updateAgeOnHas: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStale}\n   */\n  allowStale: boolean\n\n  /**\n   * {@link LRUCache.OptionsBase.noDisposeOnSet}\n   */\n  noDisposeOnSet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noUpdateTTL}\n   */\n  noUpdateTTL: boolean\n  /**\n   * {@link LRUCache.OptionsBase.maxEntrySize}\n   */\n  maxEntrySize: LRUCache.Size\n  /**\n   * {@link LRUCache.OptionsBase.sizeCalculation}\n   */\n  sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}\n   */\n  noDeleteOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}\n   */\n  noDeleteOnStaleGet: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}\n   */\n  allowStaleOnFetchAbort: boolean\n  /**\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}\n   */\n  allowStaleOnFetchRejection: boolean\n  /**\n   * {@link LRUCache.OptionsBase.ignoreFetchAbort}\n   */\n  ignoreFetchAbort: boolean\n\n  // computed properties\n  #size: LRUCache.Count\n  #calculatedSize: LRUCache.Size\n  #keyMap: Map<K, Index>\n  #keyList: (K | undefined)[]\n  #valList: (V | BackgroundFetch<V> | undefined)[]\n  #next: NumberArray\n  #prev: NumberArray\n  #head: Index\n  #tail: Index\n  #free: StackLike\n  #disposed?: DisposeTask<K, V>[]\n  #sizes?: ZeroArray\n  #starts?: ZeroArray\n  #ttls?: ZeroArray\n\n  #hasDispose: boolean\n  #hasFetchMethod: boolean\n  #hasDisposeAfter: boolean\n\n  /**\n   * Do not call this method unless you need to inspect the\n   * inner workings of the cache.  If anything returned by this\n   * object is modified in any way, strange breakage may occur.\n   *\n   * These fields are private for a reason!\n   *\n   * @internal\n   */\n  static unsafeExposeInternals<\n    K extends {},\n    V extends {},\n    FC extends unknown = unknown\n  >(c: LRUCache<K, V, FC>) {\n    return {\n      // properties\n      starts: c.#starts,\n      ttls: c.#ttls,\n      sizes: c.#sizes,\n      keyMap: c.#keyMap as Map<K, number>,\n      keyList: c.#keyList,\n      valList: c.#valList,\n      next: c.#next,\n      prev: c.#prev,\n      get head() {\n        return c.#head\n      },\n      get tail() {\n        return c.#tail\n      },\n      free: c.#free,\n      // methods\n      isBackgroundFetch: (p: any) => c.#isBackgroundFetch(p),\n      backgroundFetch: (\n        k: K,\n        index: number | undefined,\n        options: LRUCache.FetchOptions<K, V, FC>,\n        context: any\n      ): BackgroundFetch<V> =>\n        c.#backgroundFetch(\n          k,\n          index as Index | undefined,\n          options,\n          context\n        ),\n      moveToTail: (index: number): void =>\n        c.#moveToTail(index as Index),\n      indexes: (options?: { allowStale: boolean }) =>\n        c.#indexes(options),\n      rindexes: (options?: { allowStale: boolean }) =>\n        c.#rindexes(options),\n      isStale: (index: number | undefined) =>\n        c.#isStale(index as Index),\n    }\n  }\n\n  // Protected read-only members\n\n  /**\n   * {@link LRUCache.OptionsBase.max} (read-only)\n   */\n  get max(): LRUCache.Count {\n    return this.#max\n  }\n  /**\n   * {@link LRUCache.OptionsBase.maxSize} (read-only)\n   */\n  get maxSize(): LRUCache.Count {\n    return this.#maxSize\n  }\n  /**\n   * The total computed size of items in the cache (read-only)\n   */\n  get calculatedSize(): LRUCache.Size {\n    return this.#calculatedSize\n  }\n  /**\n   * The number of items stored in the cache (read-only)\n   */\n  get size(): LRUCache.Count {\n    return this.#size\n  }\n  /**\n   * {@link LRUCache.OptionsBase.fetchMethod} (read-only)\n   */\n  get fetchMethod(): LRUCache.Fetcher<K, V, FC> | undefined {\n    return this.#fetchMethod\n  }\n  get memoMethod(): LRUCache.Memoizer<K, V, FC> | undefined {\n    return this.#memoMethod\n  }\n  /**\n   * {@link LRUCache.OptionsBase.dispose} (read-only)\n   */\n  get dispose() {\n    return this.#dispose\n  }\n  /**\n   * {@link LRUCache.OptionsBase.disposeAfter} (read-only)\n   */\n  get disposeAfter() {\n    return this.#disposeAfter\n  }\n\n  constructor(\n    options: LRUCache.Options<K, V, FC> | LRUCache<K, V, FC>\n  ) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      memoMethod,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.#max = max\n    this.#maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.#maxSize\n    this.sizeCalculation = sizeCalculation\n    if (this.sizeCalculation) {\n      if (!this.#maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    if (\n      memoMethod !== undefined &&\n      typeof memoMethod !== 'function'\n    ) {\n      throw new TypeError('memoMethod must be a function if defined')\n    }\n    this.#memoMethod = memoMethod\n\n    if (\n      fetchMethod !== undefined &&\n      typeof fetchMethod !== 'function'\n    ) {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n    this.#fetchMethod = fetchMethod\n    this.#hasFetchMethod = !!fetchMethod\n\n    this.#keyMap = new Map()\n    this.#keyList = new Array(max).fill(undefined)\n    this.#valList = new Array(max).fill(undefined)\n    this.#next = new UintArray(max)\n    this.#prev = new UintArray(max)\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free = Stack.create(max)\n    this.#size = 0\n    this.#calculatedSize = 0\n\n    if (typeof dispose === 'function') {\n      this.#dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.#disposeAfter = disposeAfter\n      this.#disposed = []\n    } else {\n      this.#disposeAfter = undefined\n      this.#disposed = undefined\n    }\n    this.#hasDispose = !!this.#dispose\n    this.#hasDisposeAfter = !!this.#disposeAfter\n\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.#maxSize !== 0) {\n        if (!isPosInt(this.#maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.#initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.#initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n  }\n\n  /**\n   * Return the number of ms left in the item's TTL. If item is not in cache,\n   * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.\n   */\n  getRemainingTTL(key: K) {\n    return this.#keyMap.has(key) ? Infinity : 0\n  }\n\n  #initializeTTLTracking() {\n    const ttls = new ZeroArray(this.#max)\n    const starts = new ZeroArray(this.#max)\n    this.#ttls = ttls\n    this.#starts = starts\n\n    this.#setItemTTL = (index, ttl, start = perf.now()) => {\n      starts[index] = ttl !== 0 ? start : 0\n      ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.#isStale(index)) {\n            this.#delete(this.#keyList[index] as K, 'expire')\n          }\n        }, ttl + 1)\n        // unref() not supported on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n    }\n\n    this.#updateItemAge = index => {\n      starts[index] = ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.#statusTTL = (status, index) => {\n      if (ttls[index]) {\n        const ttl = ttls[index]\n        const start = starts[index]\n        /* c8 ignore next */\n        if (!ttl || !start) return\n        status.ttl = ttl\n        status.start = start\n        status.now = cachedNow || getNow()\n        const age = status.now - start\n        status.remainingTTL = ttl - age\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        // not available on all platforms\n        /* c8 ignore start */\n        if (t.unref) {\n          t.unref()\n        }\n        /* c8 ignore stop */\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.#keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      const ttl = ttls[index]\n      const start = starts[index]\n      if (!ttl || !start) {\n        return Infinity\n      }\n      const age = (cachedNow || getNow()) - start\n      return ttl - age\n    }\n\n    this.#isStale = index => {\n      const s = starts[index]\n      const t = ttls[index]\n      return !!t && !!s && (cachedNow || getNow()) - s > t\n    }\n  }\n\n  // conditionally set private methods related to TTL\n  #updateItemAge: (index: Index) => void = () => {}\n  #statusTTL: (status: LRUCache.Status<V>, index: Index) => void =\n    () => {}\n  #setItemTTL: (\n    index: Index,\n    ttl: LRUCache.Milliseconds,\n    start?: LRUCache.Milliseconds\n    // ignore because we never call this if we're not already in TTL mode\n    /* c8 ignore start */\n  ) => void = () => {}\n  /* c8 ignore stop */\n\n  #isStale: (index: Index) => boolean = () => false\n\n  #initializeSizeTracking() {\n    const sizes = new ZeroArray(this.#max)\n    this.#calculatedSize = 0\n    this.#sizes = sizes\n    this.#removeItemSize = index => {\n      this.#calculatedSize -= sizes[index] as number\n      sizes[index] = 0\n    }\n    this.#requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.#isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation ' +\n              'or size must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.#addItemSize = (\n      index: Index,\n      size: LRUCache.Size,\n      status?: LRUCache.Status<V>\n    ) => {\n      sizes[index] = size\n      if (this.#maxSize) {\n        const maxSize = this.#maxSize - (sizes[index] as number)\n        while (this.#calculatedSize > maxSize) {\n          this.#evict(true)\n        }\n      }\n      this.#calculatedSize += sizes[index] as number\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.#calculatedSize\n      }\n    }\n  }\n\n  #removeItemSize: (index: Index) => void = _i => {}\n  #addItemSize: (\n    index: Index,\n    size: LRUCache.Size,\n    status?: LRUCache.Status<V>\n  ) => void = (_i, _s, _st) => {}\n  #requireSize: (\n    k: K,\n    v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => LRUCache.Size = (\n    _k: K,\n    _v: V | BackgroundFetch<V>,\n    size?: LRUCache.Size,\n    sizeCalculation?: LRUCache.SizeCalculator<K, V>\n  ) => {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n    return 0\n  };\n\n  *#indexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#tail; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#head) {\n          break\n        } else {\n          i = this.#prev[i] as Index\n        }\n      }\n    }\n  }\n\n  *#rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.#size) {\n      for (let i = this.#head; true; ) {\n        if (!this.#isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.#isStale(i)) {\n          yield i\n        }\n        if (i === this.#tail) {\n          break\n        } else {\n          i = this.#next[i] as Index\n        }\n      }\n    }\n  }\n\n  #isValidIndex(index: Index) {\n    return (\n      index !== undefined &&\n      this.#keyMap.get(this.#keyList[index] as K) === index\n    )\n  }\n\n  /**\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from most recently used to least recently used.\n   */\n  *entries() {\n    for (const i of this.#indexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]] as [K, V]\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.entries}\n   *\n   * Return a generator yielding `[key, value]` pairs,\n   * in order from least recently used to most recently used.\n   */\n  *rentries() {\n    for (const i of this.#rindexes()) {\n      if (\n        this.#valList[i] !== undefined &&\n        this.#keyList[i] !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield [this.#keyList[i], this.#valList[i]]\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the keys in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *keys() {\n    for (const i of this.#indexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.keys}\n   *\n   * Return a generator yielding the keys in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rkeys() {\n    for (const i of this.#rindexes()) {\n      const k = this.#keyList[i]\n      if (\n        k !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield k\n      }\n    }\n  }\n\n  /**\n   * Return a generator yielding the values in the cache,\n   * in order from most recently used to least recently used.\n   */\n  *values() {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i] as V\n      }\n    }\n  }\n\n  /**\n   * Inverse order version of {@link LRUCache.values}\n   *\n   * Return a generator yielding the values in the cache,\n   * in order from least recently used to most recently used.\n   */\n  *rvalues() {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      if (\n        v !== undefined &&\n        !this.#isBackgroundFetch(this.#valList[i])\n      ) {\n        yield this.#valList[i]\n      }\n    }\n  }\n\n  /**\n   * Iterating over the cache itself yields the same results as\n   * {@link LRUCache.entries}\n   */\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  /**\n   * A String value that is used in the creation of the default string\n   * description of an object. Called by the built-in method\n   * `Object.prototype.toString`.\n   */\n  [Symbol.toStringTag] = 'LRUCache'\n\n  /**\n   * Find a value for which the supplied fn method returns a truthy value,\n   * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.\n   */\n  find(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => boolean,\n    getOptions: LRUCache.GetOptions<K, V, FC> = {}\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.#keyList[i] as K, this)) {\n        return this.get(this.#keyList[i] as K, getOptions)\n      }\n    }\n  }\n\n  /**\n   * Call the supplied function on each item in the cache, in order from most\n   * recently used to least recently used.\n   *\n   * `fn` is called as `fn(value, key, cache)`.\n   *\n   * If `thisp` is provided, function will be called in the `this`-context of\n   * the provided object, or the cache if no `thisp` object is provided.\n   *\n   * Does not update age or recenty of use, or iterate over stale values.\n   */\n  forEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#indexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * The same as {@link LRUCache.forEach} but items are iterated over in\n   * reverse order.  (ie, less recently used items are iterated over first.)\n   */\n  rforEach(\n    fn: (v: V, k: K, self: LRUCache<K, V, FC>) => any,\n    thisp: any = this\n  ) {\n    for (const i of this.#rindexes()) {\n      const v = this.#valList[i]\n      const value = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.#keyList[i] as K, this)\n    }\n  }\n\n  /**\n   * Delete any stale entries. Returns true if anything was removed,\n   * false otherwise.\n   */\n  purgeStale() {\n    let deleted = false\n    for (const i of this.#rindexes({ allowStale: true })) {\n      if (this.#isStale(i)) {\n        this.#delete(this.#keyList[i] as K, 'expire')\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Get the extended info about a given entry, to get its value, size, and\n   * TTL info simultaneously. Returns `undefined` if the key is not present.\n   *\n   * Unlike {@link LRUCache#dump}, which is designed to be portable and survive\n   * serialization, the `start` value is always the current timestamp, and the\n   * `ttl` is a calculated remaining time to live (negative if expired).\n   *\n   * Always returns stale values, if their info is found in the cache, so be\n   * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})\n   * if relevant.\n   */\n  info(key: K): LRUCache.Entry<V> | undefined {\n    const i = this.#keyMap.get(key)\n    if (i === undefined) return undefined\n    const v = this.#valList[i]\n    const value: V | undefined = this.#isBackgroundFetch(v)\n      ? v.__staleWhileFetching\n      : v\n    if (value === undefined) return undefined\n    const entry: LRUCache.Entry<V> = { value }\n    if (this.#ttls && this.#starts) {\n      const ttl = this.#ttls[i]\n      const start = this.#starts[i]\n      if (ttl && start) {\n        const remain = ttl - (perf.now() - start)\n        entry.ttl = remain\n        entry.start = Date.now()\n      }\n    }\n    if (this.#sizes) {\n      entry.size = this.#sizes[i]\n    }\n    return entry\n  }\n\n  /**\n   * Return an array of [key, {@link LRUCache.Entry}] tuples which can be\n   * passed to {@link LRLUCache#load}.\n   *\n   * The `start` fields are calculated relative to a portable `Date.now()`\n   * timestamp, even if `performance.now()` is available.\n   *\n   * Stale entries are always included in the `dump`, even if\n   * {@link LRUCache.OptionsBase.allowStale} is false.\n   *\n   * Note: this returns an actual array, not a generator, so it can be more\n   * easily passed around.\n   */\n  dump() {\n    const arr: [K, LRUCache.Entry<V>][] = []\n    for (const i of this.#indexes({ allowStale: true })) {\n      const key = this.#keyList[i]\n      const v = this.#valList[i]\n      const value: V | undefined = this.#isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined || key === undefined) continue\n      const entry: LRUCache.Entry<V> = { value }\n      if (this.#ttls && this.#starts) {\n        entry.ttl = this.#ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - (this.#starts[i] as number)\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.#sizes) {\n        entry.size = this.#sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  /**\n   * Reset the cache and load in the items in entries in the order listed.\n   *\n   * The shape of the resulting cache may be different if the same options are\n   * not used in both caches.\n   *\n   * The `start` fields are assumed to be calculated relative to a portable\n   * `Date.now()` timestamp, even if `performance.now()` is available.\n   */\n  load(arr: [K, LRUCache.Entry<V>][]) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset, so that\n        // we get the intended remaining TTL, no matter how long it's\n        // been on ice.\n        //\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  /**\n   * Add a value to the cache.\n   *\n   * Note: if `undefined` is specified as a value, this is an alias for\n   * {@link LRUCache#delete}\n   *\n   * Fields on the {@link LRUCache.SetOptions} options param will override\n   * their corresponding values in the constructor options for the scope\n   * of this single `set()` operation.\n   *\n   * If `start` is provided, then that will set the effective start\n   * time for the TTL calculation. Note that this must be a previous\n   * value of `performance.now()` if supported, or a previous value of\n   * `Date.now()` if not.\n   *\n   * Options object may also include `size`, which will prevent\n   * calling the `sizeCalculation` function and just use the specified\n   * number if it is a positive integer, and `noDisposeOnSet` which\n   * will prevent calling a `dispose` function in the case of\n   * overwrites.\n   *\n   * If the `size` (or return value of `sizeCalculation`) for a given\n   * entry is greater than `maxEntrySize`, then the item will not be\n   * added to the cache.\n   *\n   * Will update the recency of the entry.\n   *\n   * If the value is `undefined`, then this is an alias for\n   * `cache.delete(key)`. `undefined` is never stored in the cache.\n   */\n  set(\n    k: K,\n    v: V | BackgroundFetch<V> | undefined,\n    setOptions: LRUCache.SetOptions<K, V, FC> = {}\n  ) {\n    if (v === undefined) {\n      this.delete(k)\n      return this\n    }\n    const {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      sizeCalculation = this.sizeCalculation,\n      status,\n    } = setOptions\n    let { noUpdateTTL = this.noUpdateTTL } = setOptions\n\n    const size = this.#requireSize(\n      k,\n      v,\n      setOptions.size || 0,\n      sizeCalculation\n    )\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case something is there already.\n      this.#delete(k, 'set')\n      return this\n    }\n    let index = this.#size === 0 ? undefined : this.#keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = (\n        this.#size === 0\n          ? this.#tail\n          : this.#free.length !== 0\n          ? this.#free.pop()\n          : this.#size === this.#max\n          ? this.#evict(false)\n          : this.#size\n      ) as Index\n      this.#keyList[index] = k\n      this.#valList[index] = v\n      this.#keyMap.set(k, index)\n      this.#next[this.#tail] = index\n      this.#prev[index] = this.#tail\n      this.#tail = index\n      this.#size++\n      this.#addItemSize(index, size, status)\n      if (status) status.set = 'add'\n      noUpdateTTL = false\n    } else {\n      // update\n      this.#moveToTail(index)\n      const oldVal = this.#valList[index] as V | BackgroundFetch<V>\n      if (v !== oldVal) {\n        if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n          const { __staleWhileFetching: s } = oldVal\n          if (s !== undefined && !noDisposeOnSet) {\n            if (this.#hasDispose) {\n              this.#dispose?.(s as V, k, 'set')\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([s as V, k, 'set'])\n            }\n          }\n        } else if (!noDisposeOnSet) {\n          if (this.#hasDispose) {\n            this.#dispose?.(oldVal as V, k, 'set')\n          }\n          if (this.#hasDisposeAfter) {\n            this.#disposed?.push([oldVal as V, k, 'set'])\n          }\n        }\n        this.#removeItemSize(index)\n        this.#addItemSize(index, size, status)\n        this.#valList[index] = v\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.#isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n    }\n    if (ttl !== 0 && !this.#ttls) {\n      this.#initializeTTLTracking()\n    }\n    if (this.#ttls) {\n      if (!noUpdateTTL) {\n        this.#setItemTTL(index, ttl, start)\n      }\n      if (status) this.#statusTTL(status, index)\n    }\n    if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return this\n  }\n\n  /**\n   * Evict the least recently used item, returning its value or\n   * `undefined` if cache is empty.\n   */\n  pop(): V | undefined {\n    try {\n      while (this.#size) {\n        const val = this.#valList[this.#head]\n        this.#evict(true)\n        if (this.#isBackgroundFetch(val)) {\n          if (val.__staleWhileFetching) {\n            return val.__staleWhileFetching\n          }\n        } else if (val !== undefined) {\n          return val\n        }\n      }\n    } finally {\n      if (this.#hasDisposeAfter && this.#disposed) {\n        const dt = this.#disposed\n        let task: DisposeTask<K, V> | undefined\n        while ((task = dt?.shift())) {\n          this.#disposeAfter?.(...task)\n        }\n      }\n    }\n  }\n\n  #evict(free: boolean) {\n    const head = this.#head\n    const k = this.#keyList[head] as K\n    const v = this.#valList[head] as V\n    if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else if (this.#hasDispose || this.#hasDisposeAfter) {\n      if (this.#hasDispose) {\n        this.#dispose?.(v, k, 'evict')\n      }\n      if (this.#hasDisposeAfter) {\n        this.#disposed?.push([v, k, 'evict'])\n      }\n    }\n    this.#removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.#keyList[head] = undefined\n      this.#valList[head] = undefined\n      this.#free.push(head)\n    }\n    if (this.#size === 1) {\n      this.#head = this.#tail = 0 as Index\n      this.#free.length = 0\n    } else {\n      this.#head = this.#next[head] as Index\n    }\n    this.#keyMap.delete(k)\n    this.#size--\n    return head\n  }\n\n  /**\n   * Check if a key is in the cache, without updating the recency of use.\n   * Will return false if the item is stale, even though it is technically\n   * in the cache.\n   *\n   * Check if a key is in the cache, without updating the recency of\n   * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set\n   * to `true` in either the options or the constructor.\n   *\n   * Will return `false` if the item is stale, even though it is technically in\n   * the cache. The difference can be determined (if it matters) by using a\n   * `status` argument, and inspecting the `has` field.\n   *\n   * Will not update item age unless\n   * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.\n   */\n  has(k: K, hasOptions: LRUCache.HasOptions<K, V, FC> = {}) {\n    const { updateAgeOnHas = this.updateAgeOnHas, status } =\n      hasOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const v = this.#valList[index]\n      if (\n        this.#isBackgroundFetch(v) &&\n        v.__staleWhileFetching === undefined\n      ) {\n        return false\n      }\n      if (!this.#isStale(index)) {\n        if (updateAgeOnHas) {\n          this.#updateItemAge(index)\n        }\n        if (status) {\n          status.has = 'hit'\n          this.#statusTTL(status, index)\n        }\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.#statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  /**\n   * Like {@link LRUCache#get} but doesn't update recency or delete stale\n   * items.\n   *\n   * Returns `undefined` if the item is stale, unless\n   * {@link LRUCache.OptionsBase.allowStale} is set.\n   */\n  peek(k: K, peekOptions: LRUCache.PeekOptions<K, V, FC> = {}) {\n    const { allowStale = this.allowStale } = peekOptions\n    const index = this.#keyMap.get(k)\n    if (\n      index === undefined ||\n      (!allowStale && this.#isStale(index))\n    ) {\n      return\n    }\n    const v = this.#valList[index]\n    // either stale and allowed, or forcing a refresh of non-stale value\n    return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v\n  }\n\n  #backgroundFetch(\n    k: K,\n    index: Index | undefined,\n    options: LRUCache.FetchOptions<K, V, FC>,\n    context: any\n  ): BackgroundFetch<V> {\n    const v = index === undefined ? undefined : this.#valList[index]\n    if (this.#isBackgroundFetch(v)) {\n      return v\n    }\n\n    const ac = new AC()\n    const { signal } = options\n    // when/if our AC signals, then stop listening to theirs.\n    signal?.addEventListener('abort', () => ac.abort(signal.reason), {\n      signal: ac.signal,\n    })\n\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n\n    const cb = (\n      v: V | undefined,\n      updateCache = false\n    ): V | undefined => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        if (v === undefined) {\n          if (bf.__staleWhileFetching) {\n            this.#valList[index as Index] = bf.__staleWhileFetching\n          } else {\n            this.#delete(k, 'fetch')\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n\n    const eb = (er: any) => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n\n    const fetchFail = (er: any): V | undefined => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      const bf = p as BackgroundFetch<V>\n      if (this.#valList[index as Index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || bf.__staleWhileFetching === undefined\n        if (del) {\n          this.#delete(k, 'fetch')\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.#valList[index as Index] = bf.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && bf.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return bf.__staleWhileFetching\n      } else if (bf.__returned === bf) {\n        throw er\n      }\n    }\n\n    const pcall = (\n      res: (v: V | undefined) => void,\n      rej: (e: any) => void\n    ) => {\n      const fmp = this.#fetchMethod?.(k, v, fetchOpts)\n      if (fmp && fmp instanceof Promise) {\n        fmp.then(v => res(v === undefined ? undefined : v), rej)\n      }\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res(undefined)\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    const bf: BackgroundFetch<V> = Object.assign(p, {\n      __abortController: ac,\n      __staleWhileFetching: v,\n      __returned: undefined,\n    })\n\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, bf, { ...fetchOpts.options, status: undefined })\n      index = this.#keyMap.get(k)\n    } else {\n      this.#valList[index] = bf\n    }\n    return bf\n  }\n\n  #isBackgroundFetch(p: any): p is BackgroundFetch<V> {\n    if (!this.#hasFetchMethod) return false\n    const b = p as BackgroundFetch<V>\n    return (\n      !!b &&\n      b instanceof Promise &&\n      b.hasOwnProperty('__staleWhileFetching') &&\n      b.__abortController instanceof AC\n    )\n  }\n\n  /**\n   * Make an asynchronous cached fetch using the\n   * {@link LRUCache.OptionsBase.fetchMethod} function.\n   *\n   * If the value is in the cache and not stale, then the returned\n   * Promise resolves to the value.\n   *\n   * If not in the cache, or beyond its TTL staleness, then\n   * `fetchMethod(key, staleValue, { options, signal, context })` is\n   * called, and the value returned will be added to the cache once\n   * resolved.\n   *\n   * If called with `allowStale`, and an asynchronous fetch is\n   * currently in progress to reload a stale value, then the former\n   * stale value will be returned.\n   *\n   * If called with `forceRefresh`, then the cached item will be\n   * re-fetched, even if it is not stale. However, if `allowStale` is also\n   * set, then the old value will still be returned. This is useful\n   * in cases where you want to force a reload of a cached value. If\n   * a background fetch is already in progress, then `forceRefresh`\n   * has no effect.\n   *\n   * If multiple fetches for the same key are issued, then they will all be\n   * coalesced into a single call to fetchMethod.\n   *\n   * Note that this means that handling options such as\n   * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort},\n   * {@link LRUCache.FetchOptions.signal},\n   * and {@link LRUCache.OptionsBase.allowStaleOnFetchRejection} will be\n   * determined by the FIRST fetch() call for a given key.\n   *\n   * This is a known (fixable) shortcoming which will be addresed on when\n   * someone complains about it, as the fix would involve added complexity and\n   * may not be worth the costs for this edge case.\n   *\n   * If {@link LRUCache.OptionsBase.fetchMethod} is not specified, then this is\n   * effectively an alias for `Promise.resolve(cache.get(key))`.\n   *\n   * When the fetch method resolves to a value, if the fetch has not\n   * been aborted due to deletion, eviction, or being overwritten,\n   * then it is added to the cache using the options provided.\n   *\n   * If the key is evicted or deleted before the `fetchMethod`\n   * resolves, then the AbortSignal passed to the `fetchMethod` will\n   * receive an `abort` event, and the promise returned by `fetch()`\n   * will reject with the reason for the abort.\n   *\n   * If a `signal` is passed to the `fetch()` call, then aborting the\n   * signal will abort the fetch and cause the `fetch()` promise to\n   * reject with the reason provided.\n   *\n   * **Setting `context`**\n   *\n   * If an `FC` type is set to a type other than `unknown`, `void`, or\n   * `undefined` in the {@link LRUCache} constructor, then all\n   * calls to `cache.fetch()` _must_ provide a `context` option. If\n   * set to `undefined` or `void`, then calls to fetch _must not_\n   * provide a `context` option.\n   *\n   * The `context` param allows you to provide arbitrary data that\n   * might be relevant in the course of fetching the data. It is only\n   * relevant for the course of a single `fetch()` operation, and\n   * discarded afterwards.\n   *\n   * **Note: `fetch()` calls are inflight-unique**\n   *\n   * If you call `fetch()` multiple times with the same key value,\n   * then every call after the first will resolve on the same\n   * promise<sup>1</sup>,\n   * _even if they have different settings that would otherwise change\n   * the behavior of the fetch_, such as `noDeleteOnFetchRejection`\n   * or `ignoreFetchAbort`.\n   *\n   * In most cases, this is not a problem (in fact, only fetching\n   * something once is what you probably want, if you're caching in\n   * the first place). If you are changing the fetch() options\n   * dramatically between runs, there's a good chance that you might\n   * be trying to fit divergent semantics into a single object, and\n   * would be better off with multiple cache instances.\n   *\n   * **1**: Ie, they're not the \"same Promise\", but they resolve at\n   * the same time, because they're both waiting on the same\n   * underlying fetchMethod response.\n   */\n\n  fetch(\n    k: K,\n    fetchOptions: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>\n  ): Promise<undefined | V>\n\n  // this overload not allowed if context is required\n  fetch(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    fetchOptions?: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : never\n  ): Promise<undefined | V>\n\n  async fetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {}\n  ): Promise<undefined | V> {\n    const {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      context,\n      forceRefresh = false,\n      status,\n      signal,\n    } = fetchOptions\n\n    if (!this.#hasFetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.#keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.#backgroundFetch(k, index, options, context)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.#isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        if (status) this.#statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.#backgroundFetch(k, index, options, context)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  /**\n   * In some cases, `cache.fetch()` may resolve to `undefined`, either because\n   * a {@link LRUCache.OptionsBase#fetchMethod} was not provided (turning\n   * `cache.fetch(k)` into just an async wrapper around `cache.get(k)`) or\n   * because `ignoreFetchAbort` was specified (either to the constructor or\n   * in the {@link LRUCache.FetchOptions}). Also, the\n   * {@link OptionsBase.fetchMethod} may return `undefined` or `void`, making\n   * the test even more complicated.\n   *\n   * Because inferring the cases where `undefined` might be returned are so\n   * cumbersome, but testing for `undefined` can also be annoying, this method\n   * can be used, which will reject if `this.fetch()` resolves to undefined.\n   */\n  forceFetch(\n    k: K,\n    fetchOptions: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : LRUCache.FetchOptionsWithContext<K, V, FC>\n  ): Promise<V>\n  // this overload not allowed if context is required\n  forceFetch(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    fetchOptions?: unknown extends FC\n      ? LRUCache.FetchOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.FetchOptionsNoContext<K, V>\n      : never\n  ): Promise<V>\n  async forceFetch(\n    k: K,\n    fetchOptions: LRUCache.FetchOptions<K, V, FC> = {}\n  ): Promise<V> {\n    const v = await this.fetch(\n      k,\n      fetchOptions as unknown extends FC\n        ? LRUCache.FetchOptions<K, V, FC>\n        : FC extends undefined | void\n        ? LRUCache.FetchOptionsNoContext<K, V>\n        : LRUCache.FetchOptionsWithContext<K, V, FC>\n    )\n    if (v === undefined) throw new Error('fetch() returned undefined')\n    return v\n  }\n\n  /**\n   * If the key is found in the cache, then this is equivalent to\n   * {@link LRUCache#get}. If not, in the cache, then calculate the value using\n   * the {@link LRUCache.OptionsBase.memoMethod}, and add it to the cache.\n   *\n   * If an `FC` type is set to a type other than `unknown`, `void`, or\n   * `undefined` in the LRUCache constructor, then all calls to `cache.memo()`\n   * _must_ provide a `context` option. If set to `undefined` or `void`, then\n   * calls to memo _must not_ provide a `context` option.\n   *\n   * The `context` param allows you to provide arbitrary data that might be\n   * relevant in the course of fetching the data. It is only relevant for the\n   * course of a single `memo()` operation, and discarded afterwards.\n   */\n  memo(\n    k: K,\n    memoOptions: unknown extends FC\n      ? LRUCache.MemoOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.MemoOptionsNoContext<K, V>\n      : LRUCache.MemoOptionsWithContext<K, V, FC>\n  ): V\n  // this overload not allowed if context is required\n  memo(\n    k: unknown extends FC\n      ? K\n      : FC extends undefined | void\n      ? K\n      : never,\n    memoOptions?: unknown extends FC\n      ? LRUCache.MemoOptions<K, V, FC>\n      : FC extends undefined | void\n      ? LRUCache.MemoOptionsNoContext<K, V>\n      : never\n  ): V\n  memo(k: K, memoOptions: LRUCache.MemoOptions<K, V, FC> = {}) {\n    const memoMethod = this.#memoMethod\n    if (!memoMethod) {\n      throw new Error('no memoMethod provided to constructor')\n    }\n    const { context, forceRefresh, ...options } = memoOptions\n    const v = this.get(k, options)\n    if (!forceRefresh && v !== undefined) return v\n    const vv = memoMethod(k, v, {\n      options,\n      context,\n    } as LRUCache.MemoizerOptions<K, V, FC>)\n    this.set(k, vv, options)\n    return vv\n  }\n\n  /**\n   * Return a value from the cache. Will update the recency of the cache\n   * entry found.\n   *\n   * If the key is not found, get() will return `undefined`.\n   */\n  get(k: K, getOptions: LRUCache.GetOptions<K, V, FC> = {}) {\n    const {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = getOptions\n    const index = this.#keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.#valList[index]\n      const fetching = this.#isBackgroundFetch(value)\n      if (status) this.#statusTTL(status, index)\n      if (this.#isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.#delete(k, 'expire')\n          }\n          if (status && allowStale) status.returnedStale = true\n          return allowStale ? value : undefined\n        } else {\n          if (\n            status &&\n            allowStale &&\n            value.__staleWhileFetching !== undefined\n          ) {\n            status.returnedStale = true\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.#moveToTail(index)\n        if (updateAgeOnGet) {\n          this.#updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  #connect(p: Index, n: Index) {\n    this.#prev[n] = p\n    this.#next[p] = n\n  }\n\n  #moveToTail(index: Index): void {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.#tail) {\n      if (index === this.#head) {\n        this.#head = this.#next[index] as Index\n      } else {\n        this.#connect(\n          this.#prev[index] as Index,\n          this.#next[index] as Index\n        )\n      }\n      this.#connect(this.#tail, index)\n      this.#tail = index\n    }\n  }\n\n  /**\n   * Deletes a key out of the cache.\n   *\n   * Returns true if the key was deleted, false otherwise.\n   */\n  delete(k: K) {\n    return this.#delete(k, 'delete')\n  }\n\n  #delete(k: K, reason: LRUCache.DisposeReason) {\n    let deleted = false\n    if (this.#size !== 0) {\n      const index = this.#keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.#size === 1) {\n          this.#clear(reason)\n        } else {\n          this.#removeItemSize(index)\n          const v = this.#valList[index]\n          if (this.#isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else if (this.#hasDispose || this.#hasDisposeAfter) {\n            if (this.#hasDispose) {\n              this.#dispose?.(v as V, k, reason)\n            }\n            if (this.#hasDisposeAfter) {\n              this.#disposed?.push([v as V, k, reason])\n            }\n          }\n          this.#keyMap.delete(k)\n          this.#keyList[index] = undefined\n          this.#valList[index] = undefined\n          if (index === this.#tail) {\n            this.#tail = this.#prev[index] as Index\n          } else if (index === this.#head) {\n            this.#head = this.#next[index] as Index\n          } else {\n            const pi = this.#prev[index] as number\n            this.#next[pi] = this.#next[index] as number\n            const ni = this.#next[index] as number\n            this.#prev[ni] = this.#prev[index] as number\n          }\n          this.#size--\n          this.#free.push(index)\n        }\n      }\n    }\n    if (this.#hasDisposeAfter && this.#disposed?.length) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n    return deleted\n  }\n\n  /**\n   * Clear the cache entirely, throwing away all values.\n   */\n  clear() {\n    return this.#clear('delete')\n  }\n  #clear(reason: LRUCache.DisposeReason) {\n    for (const index of this.#rindexes({ allowStale: true })) {\n      const v = this.#valList[index]\n      if (this.#isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.#keyList[index]\n        if (this.#hasDispose) {\n          this.#dispose?.(v as V, k as K, reason)\n        }\n        if (this.#hasDisposeAfter) {\n          this.#disposed?.push([v as V, k as K, reason])\n        }\n      }\n    }\n\n    this.#keyMap.clear()\n    this.#valList.fill(undefined)\n    this.#keyList.fill(undefined)\n    if (this.#ttls && this.#starts) {\n      this.#ttls.fill(0)\n      this.#starts.fill(0)\n    }\n    if (this.#sizes) {\n      this.#sizes.fill(0)\n    }\n    this.#head = 0 as Index\n    this.#tail = 0 as Index\n    this.#free.length = 0\n    this.#calculatedSize = 0\n    this.#size = 0\n    if (this.#hasDisposeAfter && this.#disposed) {\n      const dt = this.#disposed\n      let task: DisposeTask<K, V> | undefined\n      while ((task = dt?.shift())) {\n        this.#disposeAfter?.(...task)\n      }\n    }\n  }\n}\n"
        ]
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/index.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 41, 21, 21, 30, 5, 3, 0, 43, 21, 21, 32, 5, 3, 0,
        43, 21, 21, 32, 5, 3, 0, 44, 21, 21, 33, 5, 3, 0, 46, 21, 21, 35, 5, 3,
        0, 46, 21, 21, 35, 5, 3, 0, 49, 21, 21, 38, 5, 3, 0, 41, 21, 21, 30, 5,
        3, 0, 41, 21, 21, 30, 5, 3, 0, 42, 21, 21, 31, 5, 3, 0, 81, 0, 81, 0,
        97, 0, 88, 0, 92, 0, 86, 0, 90, 0, 90, 0, 84, 0, 84, 0, 36, 27, 18, 6,
        1, 33, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/index.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/src/index.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "enumerable",
          "get",
          "_Deque",
          "default",
          "_HashMap",
          "_HashSet",
          "_LinkList",
          "_OrderedMap",
          "_OrderedSet",
          "_PriorityQueue",
          "_Queue",
          "_Stack",
          "_Vector",
          "_interopRequireDefault",
          "require",
          "obj",
          "__esModule"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETH,OAAOC,eAAeC,SAAS,SAAS;IACtCE,YAAY;IACZC,KAAK;QACH,OAAOC,OAAOC;AAChB;;;AAEFP,OAAOC,eAAeC,SAAS,WAAW;IACxCE,YAAY;IACZC,KAAK;QACH,OAAOG,SAASD;AAClB;;;AAEFP,OAAOC,eAAeC,SAAS,WAAW;IACxCE,YAAY;IACZC,KAAK;QACH,OAAOI,SAASF;AAClB;;;AAEFP,OAAOC,eAAeC,SAAS,YAAY;IACzCE,YAAY;IACZC,KAAK;QACH,OAAOK,UAAUH;AACnB;;;AAEFP,OAAOC,eAAeC,SAAS,cAAc;IAC3CE,YAAY;IACZC,KAAK;QACH,OAAOM,YAAYJ;AACrB;;;AAEFP,OAAOC,eAAeC,SAAS,cAAc;IAC3CE,YAAY;IACZC,KAAK;QACH,OAAOO,YAAYL;AACrB;;;AAEFP,OAAOC,eAAeC,SAAS,iBAAiB;IAC9CE,YAAY;IACZC,KAAK;QACH,OAAOQ,eAAeN;AACxB;;;AAEFP,OAAOC,eAAeC,SAAS,SAAS;IACtCE,YAAY;IACZC,KAAK;QACH,OAAOS,OAAOP;AAChB;;;AAEFP,OAAOC,eAAeC,SAAS,SAAS;IACtCE,YAAY;IACZC,KAAK;QACH,OAAOU,OAAOR;AAChB;;;AAEFP,OAAOC,eAAeC,SAAS,UAAU;IACvCE,YAAY;IACZC,KAAK;QACH,OAAOW,QAAQT;AACjB;;;AC/DF,IAAAQ,SAAAE,uBAAAC,QAAA;;AACA,IAAAJ,SAAAG,uBAAAC,QAAA;;AACA,IAAAL,iBAAAI,uBAAAC,QAAA;;AACA,IAAAF,UAAAC,uBAAAC,QAAA;;AACA,IAAAR,YAAAO,uBAAAC,QAAA;;AACA,IAAAZ,SAAAW,uBAAAC,QAAA;;AACA,IAAAN,cAAAK,uBAAAC,QAAA;;AACA,IAAAP,cAAAM,uBAAAC,QAAA;;AACA,IAAAT,WAAAQ,uBAAAC,QAAA;;AACA,IAAAV,WAAAS,uBAAAC,QAAA;;AAAuE,SAAAD,uBAAAE;IAAA,OAAAA,KAAAA,EAAAC,IAAAD,IAAA;QAAAZ,SAAAY;;AAAA",
        "file": "index.js",
        "sourcesContent": [
          null,
          "export { default as Stack } from '@/container/OtherContainer/Stack';\nexport { default as Queue } from '@/container/OtherContainer/Queue';\nexport { default as PriorityQueue } from '@/container/OtherContainer/PriorityQueue';\nexport { default as Vector } from '@/container/SequentialContainer/Vector';\nexport { default as LinkList } from '@/container/SequentialContainer/LinkList';\nexport { default as Deque } from '@/container/SequentialContainer/Deque';\nexport { default as OrderedSet } from '@/container/TreeContainer/OrderedSet';\nexport { default as OrderedMap } from '@/container/TreeContainer/OrderedMap';\nexport { default as HashSet } from '@/container/HashContainer/HashSet';\nexport { default as HashMap } from '@/container/HashContainer/HashMap';\nexport type { VectorIterator } from '@/container/SequentialContainer/Vector';\nexport type { LinkListIterator } from '@/container/SequentialContainer/LinkList';\nexport type { DequeIterator } from '@/container/SequentialContainer/Deque';\nexport type { OrderedSetIterator } from '@/container/TreeContainer/OrderedSet';\nexport type { OrderedMapIterator } from '@/container/TreeContainer/OrderedMap';\nexport type { HashSetIterator } from '@/container/HashContainer/HashSet';\nexport type { HashMapIterator } from '@/container/HashContainer/HashMap';\nexport type { IteratorType, Container, ContainerIterator } from '@/container/ContainerBase';\nexport type { default as SequentialContainer } from '@/container/SequentialContainer/Base';\nexport type { default as TreeContainer } from '@/container/TreeContainer/Base';\nexport type { HashContainer } from '@/container/HashContainer/Base';\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/OtherContainer/Stack.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 49, 0, 41, 25, 16, 20, 23, 32, 22, 12, 5,
        13, 19, 20, 5, 13, 23, 20, 22, 5, 11, 33, 20, 28, 5, 11, 34, 5, 1, 0,
        21, 0, 27, 33, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/OtherContainer/container/OtherContainer/Stack.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/src/container/OtherContainer/Stack.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_ContainerBase",
          "require",
          "Stack",
          "Base",
          "constructor",
          "container",
          "super",
          "this",
          "_stack",
          "self",
          "forEach",
          "el",
          "push",
          "clear",
          "_length",
          "element",
          "pop",
          "top",
          "_default"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,eAAe;;ACLvB,IAAAC,iBAAAC,QAAA;;AAEA,MAAMC,cAAiBC,eAAAA;IAKrBC,YAAYC,IAA8B;QACxCC;QAFMC,KAAAC,IAAc;QAGpB,MAAMC,IAAOF;QACbF,EAAUK,SAAQ,SAAUC;YAC1BF,EAAKG,KAAKD;ADAR;AACJ;ICEFE;QACEN,KAAKO,IAAU;QACfP,KAAKC,IAAS;ADAd;ICOFI,KAAKG;QACHR,KAAKC,EAAOI,KAAKG;QACjBR,KAAKO,KAAW;QAChB,OAAOP,KAAKO;ADAZ;ICMFE;QACE,IAAIT,KAAKO,MAAY,GAAG;QACxBP,KAAKO,KAAW;QAChB,OAAOP,KAAKC,EAAOQ;ADCnB;ICKFC;QACE,OAAOV,KAAKC,EAAOD,KAAKO,IAAU;ADClC;;;ACCH,IAAAI,WAEchB;;AAAKL,QAAAE,UAAAmB",
        "file": "Stack.js",
        "sourcesContent": [
          "import { Base } from \"../ContainerBase\";\nclass Stack extends Base {\n    constructor(container = []) {\n        super();\n        /**\n         * @internal\n         */\n        this._stack = [];\n        const self = this;\n        container.forEach(function (el) {\n            self.push(el);\n        });\n    }\n    clear() {\n        this._length = 0;\n        this._stack = [];\n    }\n    /**\n     * @description Insert element to stack's end.\n     * @description The element you want to push to the back.\n     * @returns The container length after erasing.\n     */\n    push(element) {\n        this._stack.push(element);\n        this._length += 1;\n        return this._length;\n    }\n    /**\n     * @description Removes the end element.\n     * @returns The element you popped.\n     */\n    pop() {\n        if (this._length === 0)\n            return;\n        this._length -= 1;\n        return this._stack.pop();\n    }\n    /**\n     * @description Accesses the end element.\n     * @returns The last element.\n     */\n    top() {\n        return this._stack[this._length - 1];\n    }\n}\nexport default Stack;\n",
          "import { Base, initContainer } from '@/container/ContainerBase';\n\nclass Stack<T> extends Base {\n  /**\n   * @internal\n   */\n  private _stack: T[] = [];\n  constructor(container: initContainer<T> = []) {\n    super();\n    const self = this;\n    container.forEach(function (el) {\n      self.push(el);\n    });\n  }\n  clear() {\n    this._length = 0;\n    this._stack = [];\n  }\n  /**\n   * @description Insert element to stack's end.\n   * @description The element you want to push to the back.\n   * @returns The container length after erasing.\n   */\n  push(element: T) {\n    this._stack.push(element);\n    this._length += 1;\n    return this._length;\n  }\n  /**\n   * @description Removes the end element.\n   * @returns The element you popped.\n   */\n  pop() {\n    if (this._length === 0) return;\n    this._length -= 1;\n    return this._stack.pop();\n  }\n  /**\n   * @description Accesses the end element.\n   * @returns The last element.\n   */\n  top(): T | undefined {\n    return this._stack[this._length - 1];\n  }\n}\n\nexport default Stack;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/ContainerBase/index.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 70, 0, 25, 24, 30, 5, 15, 30, 5, 1, 0, 46, 0, 12,
        19, 19, 5, 18, 22, 5, 12, 22, 5, 13, 28, 5, 1, 0, 20, 0, 31, 0, 30, 33,
        0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/ContainerBase/container/ContainerBase/index.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/src/container/ContainerBase/index.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "ContainerIterator",
          "Container",
          "Base",
          "constructor",
          "iteratorType",
          "this",
          "equals",
          "iter",
          "_node",
          "_length",
          "length",
          "size",
          "empty"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,oBAAoBF,QAAQG,YAAYH,QAAQI,YAAY;;ACG9D,MAAgBF;IAkBpBG,YAAsBC,IAAY;QAChCC,KAAKD,eAAeA;ADrBpB;IC6BFE,OAAOC;QACL,OAAOF,KAAKG,MAAUD,EAAKC;ADrB3B;;;ACsEHV,QAAAE,oBAAAA;;AAEK,MAAgBE;IAAtBC;QAKYE,KAAAI,IAAU;AAmCtB;IA5BMC;QACF,OAAOL,KAAKI;ADnEZ;IC2EFE;QACE,OAAON,KAAKI;ADnEZ;IC2EFG;QACE,OAAOP,KAAKI,MAAY;ADnExB;;;AC4EHX,QAAAI,OAAAA;;AAEK,MAAgBD,kBAAqBC;;AAgG1CJ,QAAAG,YAAAA",
        "file": "index.js",
        "sourcesContent": [
          "export class ContainerIterator {\n    /**\n     * @internal\n     */\n    constructor(iteratorType = 0 /* IteratorType.NORMAL */) {\n        this.iteratorType = iteratorType;\n    }\n    /**\n     * @param iter - The other iterator you want to compare.\n     * @returns Whether this equals to obj.\n     * @example\n     * container.find(1).equals(container.end());\n     */\n    equals(iter) {\n        return this._node === iter._node;\n    }\n}\nexport class Base {\n    constructor() {\n        /**\n         * @description Container's size.\n         * @internal\n         */\n        this._length = 0;\n    }\n    /**\n     * @returns The size of the container.\n     * @example\n     * const container = new Vector([1, 2]);\n     * console.log(container.length); // 2\n     */\n    get length() {\n        return this._length;\n    }\n    /**\n     * @returns The size of the container.\n     * @example\n     * const container = new Vector([1, 2]);\n     * console.log(container.size()); // 2\n     */\n    size() {\n        return this._length;\n    }\n    /**\n     * @returns Whether the container is empty.\n     * @example\n     * container.clear();\n     * console.log(container.empty());  // true\n     */\n    empty() {\n        return this._length === 0;\n    }\n}\nexport class Container extends Base {\n}\n",
          "/**\n * @description The iterator type including `NORMAL` and `REVERSE`.\n */\nexport const enum IteratorType {\n  NORMAL = 0,\n  REVERSE = 1\n}\n\nexport abstract class ContainerIterator<T> {\n  /**\n   * @description The container pointed to by the iterator.\n   */\n  abstract readonly container: Container<T>;\n  /**\n   * @internal\n   */\n  abstract _node: unknown;\n  /**\n   * @description Iterator's type.\n   * @example\n   * console.log(container.end().iteratorType === IteratorType.NORMAL);  // true\n   */\n  readonly iteratorType: IteratorType;\n  /**\n   * @internal\n   */\n  protected constructor(iteratorType = IteratorType.NORMAL) {\n    this.iteratorType = iteratorType;\n  }\n  /**\n   * @param iter - The other iterator you want to compare.\n   * @returns Whether this equals to obj.\n   * @example\n   * container.find(1).equals(container.end());\n   */\n  equals(iter: ContainerIterator<T>) {\n    return this._node === iter._node;\n  }\n  /**\n   * @description Pointers to element.\n   * @returns The value of the pointer's element.\n   * @example\n   * const val = container.begin().pointer;\n   */\n  abstract get pointer(): T;\n  /**\n   * @description Set pointer's value (some containers are unavailable).\n   * @param newValue - The new value you want to set.\n   * @example\n   * (<LinkList<number>>container).begin().pointer = 1;\n   */\n  abstract set pointer(newValue: T);\n  /**\n   * @description Move `this` iterator to pre.\n   * @returns The iterator's self.\n   * @example\n   * const iter = container.find(1);  // container = [0, 1]\n   * const pre = iter.pre();\n   * console.log(pre === iter);  // true\n   * console.log(pre.equals(iter));  // true\n   * console.log(pre.pointer, iter.pointer); // 0, 0\n   */\n  abstract pre(): this;\n  /**\n   * @description Move `this` iterator to next.\n   * @returns The iterator's self.\n   * @example\n   * const iter = container.find(1);  // container = [1, 2]\n   * const next = iter.next();\n   * console.log(next === iter);  // true\n   * console.log(next.equals(iter));  // true\n   * console.log(next.pointer, iter.pointer); // 2, 2\n   */\n  abstract next(): this;\n  /**\n   * @description Get a copy of itself.\n   * @returns The copy of self.\n   * @example\n   * const iter = container.find(1);  // container = [1, 2]\n   * const next = iter.copy().next();\n   * console.log(next === iter);  // false\n   * console.log(next.equals(iter));  // false\n   * console.log(next.pointer, iter.pointer); // 2, 1\n   */\n  abstract copy(): ContainerIterator<T>;\n}\n\nexport abstract class Base {\n  /**\n   * @description Container's size.\n   * @internal\n   */\n  protected _length = 0;\n  /**\n   * @returns The size of the container.\n   * @example\n   * const container = new Vector([1, 2]);\n   * console.log(container.length); // 2\n   */\n  get length() {\n    return this._length;\n  }\n  /**\n   * @returns The size of the container.\n   * @example\n   * const container = new Vector([1, 2]);\n   * console.log(container.size()); // 2\n   */\n  size() {\n    return this._length;\n  }\n  /**\n   * @returns Whether the container is empty.\n   * @example\n   * container.clear();\n   * console.log(container.empty());  // true\n   */\n  empty() {\n    return this._length === 0;\n  }\n  /**\n   * @description Clear the container.\n   * @example\n   * container.clear();\n   * console.log(container.empty());  // true\n   */\n  abstract clear(): void;\n}\n\nexport abstract class Container<T> extends Base {\n  /**\n   * @returns Iterator pointing to the beginning element.\n   * @example\n   * const begin = container.begin();\n   * const end = container.end();\n   * for (const it = begin; !it.equals(end); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract begin(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the super end like c++.\n   * @example\n   * const begin = container.begin();\n   * const end = container.end();\n   * for (const it = begin; !it.equals(end); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract end(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the end element.\n   * @example\n   * const rBegin = container.rBegin();\n   * const rEnd = container.rEnd();\n   * for (const it = rBegin; !it.equals(rEnd); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract rBegin(): ContainerIterator<T>;\n  /**\n   * @returns Iterator pointing to the super begin like c++.\n   * @example\n   * const rBegin = container.rBegin();\n   * const rEnd = container.rEnd();\n   * for (const it = rBegin; !it.equals(rEnd); it.next()) {\n   *   doSomething(it.pointer);\n   * }\n   */\n  abstract rEnd(): ContainerIterator<T>;\n  /**\n   * @returns The first element of the container.\n   */\n  abstract front(): T | undefined;\n  /**\n   * @returns The last element of the container.\n   */\n  abstract back(): T | undefined;\n  /**\n   * @param element - The element you want to find.\n   * @returns An iterator pointing to the element if found, or super end if not found.\n   * @example\n   * container.find(1).equals(container.end());\n   */\n  abstract find(element: T): ContainerIterator<T>;\n  /**\n   * @description Iterate over all elements in the container.\n   * @param callback - Callback function like Array.forEach.\n   * @example\n   * container.forEach((element, index) => console.log(element, index));\n   */\n  abstract forEach(callback: (element: T, index: number, container: Container<T>) => void): void;\n  /**\n   * @description Gets the value of the element at the specified position.\n   * @example\n   * const val = container.getElementByPos(-1); // throw a RangeError\n   */\n  abstract getElementByPos(pos: number): T;\n  /**\n   * @description Removes the element at the specified position.\n   * @param pos - The element's position you want to remove.\n   * @returns The container length after erasing.\n   * @example\n   * container.eraseElementByPos(-1); // throw a RangeError\n   */\n  abstract eraseElementByPos(pos: number): number;\n  /**\n   * @description Removes element by iterator and move `iter` to next.\n   * @param iter - The iterator you want to erase.\n   * @returns The next iterator.\n   * @example\n   * container.eraseElementByIterator(container.begin());\n   * container.eraseElementByIterator(container.end()); // throw a RangeError\n   */\n  abstract eraseElementByIterator(\n    iter: ContainerIterator<T>\n  ): ContainerIterator<T>;\n  /**\n   * @description Using for `for...of` syntax like Array.\n   * @example\n   * for (const element of container) {\n   *   console.log(element);\n   * }\n   */\n  abstract [Symbol.iterator](): Generator<T, void>;\n}\n\n/**\n * @description The initial data type passed in when initializing the container.\n */\nexport type initContainer<T> = {\n  size?: number | (() => number);\n  length?: number;\n  forEach: (callback: (el: T) => void) => void;\n}\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/OtherContainer/Queue.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 49, 0, 41, 25, 16, 19, 20, 23, 32, 22, 12,
        5, 13, 20, 28, 5, 13, 32, 66, 29, 41, 47, 13, 23, 31, 43, 24, 5, 11, 33,
        35, 20, 17, 5, 13, 33, 30, 5, 1, 0, 21, 0, 27, 33, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/OtherContainer/container/OtherContainer/Queue.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/src/container/OtherContainer/Queue.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_ContainerBase",
          "require",
          "Queue",
          "Base",
          "constructor",
          "container",
          "super",
          "this",
          "_first",
          "_queue",
          "self",
          "forEach",
          "el",
          "push",
          "clear",
          "_length",
          "element",
          "capacity",
          "length",
          "i",
          "pop",
          "front",
          "_default"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,eAAe;;ACLvB,IAAAC,iBAAAC,QAAA;;AAOA,MAAMC,cAAiBC,eAAAA;IASrBC,YAAYC,IAA8B;QACxCC;QANMC,KAAAC,IAAS;QAITD,KAAAE,IAAc;QAGpB,MAAMC,IAAOH;QACbF,EAAUM,SAAQ,SAAUC;YAC1BF,EAAKG,KAAKD;ADLR;AACJ;ICOFE;QACEP,KAAKE,IAAS;QACdF,KAAKQ,IAAUR,KAAKC,IAAS;ADL7B;ICYFK,KAAKG;QACH,MAAMC,IAAWV,KAAKE,EAAOS;QAC7B,IACGX,KAAKC,IAASS,IAAS,MACvBV,KAAKC,IAASD,KAAKQ,KAAYE,KAChCA,IAAQ,MACR;YACA,MAAMC,IAASX,KAAKQ;YACpB,KAAK,IAAII,IAAI,GAAGA,IAAID,KAAUC,GAAG;gBAC/BZ,KAAKE,EAAOU,KAAKZ,KAAKE,EAAOF,KAAKC,IAASW;ADPvC;YCSNZ,KAAKC,IAAS;YACdD,KAAKE,EAAOF,KAAKQ,KAAWC;ADP1B,eCQGT,KAAKE,EAAOF,KAAKC,IAASD,KAAKQ,KAAWC;QACjD,SAAST,KAAKQ;ADLd;ICWFK;QACE,IAAIb,KAAKQ,MAAY,GAAG;QACxB,MAAMH,IAAKL,KAAKE,EAAOF,KAAKC;QAC5BD,KAAKQ,KAAW;QAChB,OAAOH;ADJP;ICUFS;QACE,IAAId,KAAKQ,MAAY,GAAG;QACxB,OAAOR,KAAKE,EAAOF,KAAKC;ADHxB;;;ACKH,IAAAc,WAEcpB;;AAAKL,QAAAE,UAAAuB",
        "file": "Queue.js",
        "sourcesContent": [
          "import { Base } from \"../ContainerBase\";\nclass Queue extends Base {\n    constructor(container = []) {\n        super();\n        /**\n         * @internal\n         */\n        this._first = 0;\n        /**\n         * @internal\n         */\n        this._queue = [];\n        const self = this;\n        container.forEach(function (el) {\n            self.push(el);\n        });\n    }\n    clear() {\n        this._queue = [];\n        this._length = this._first = 0;\n    }\n    /**\n     * @description Inserts element to queue's end.\n     * @param element - The element you want to push to the front.\n     * @returns The container length after pushing.\n     */\n    push(element) {\n        const capacity = this._queue.length;\n        if ((this._first / capacity) > 0.5 /* QUEUE_CONSTANT.ALLOCATE_SIGMA */ &&\n            (this._first + this._length) >= capacity &&\n            capacity > 4096 /* QUEUE_CONSTANT.MIN_ALLOCATE_SIZE */) {\n            const length = this._length;\n            for (let i = 0; i < length; ++i) {\n                this._queue[i] = this._queue[this._first + i];\n            }\n            this._first = 0;\n            this._queue[this._length] = element;\n        }\n        else\n            this._queue[this._first + this._length] = element;\n        return ++this._length;\n    }\n    /**\n     * @description Removes the first element.\n     * @returns The element you popped.\n     */\n    pop() {\n        if (this._length === 0)\n            return;\n        const el = this._queue[this._first++];\n        this._length -= 1;\n        return el;\n    }\n    /**\n     * @description Access the first element.\n     * @returns The first element.\n     */\n    front() {\n        if (this._length === 0)\n            return;\n        return this._queue[this._first];\n    }\n}\nexport default Queue;\n",
          "import { Base, initContainer } from '@/container/ContainerBase';\n\nconst enum QUEUE_CONSTANT {\n  ALLOCATE_SIGMA = 0.5,\n  MIN_ALLOCATE_SIZE = (1 << 12)\n}\n\nclass Queue<T> extends Base {\n  /**\n   * @internal\n   */\n  private _first = 0;\n  /**\n   * @internal\n   */\n  private _queue: T[] = [];\n  constructor(container: initContainer<T> = []) {\n    super();\n    const self = this;\n    container.forEach(function (el) {\n      self.push(el);\n    });\n  }\n  clear() {\n    this._queue = [];\n    this._length = this._first = 0;\n  }\n  /**\n   * @description Inserts element to queue's end.\n   * @param element - The element you want to push to the front.\n   * @returns The container length after pushing.\n   */\n  push(element: T) {\n    const capacity = this._queue.length;\n    if (\n      (this._first / capacity) > QUEUE_CONSTANT.ALLOCATE_SIGMA &&\n      (this._first + this._length) >= capacity &&\n      capacity > QUEUE_CONSTANT.MIN_ALLOCATE_SIZE\n    ) {\n      const length = this._length;\n      for (let i = 0; i < length; ++i) {\n        this._queue[i] = this._queue[this._first + i];\n      }\n      this._first = 0;\n      this._queue[this._length] = element;\n    } else this._queue[this._first + this._length] = element;\n    return ++this._length;\n  }\n  /**\n   * @description Removes the first element.\n   * @returns The element you popped.\n   */\n  pop() {\n    if (this._length === 0) return;\n    const el = this._queue[this._first++];\n    this._length -= 1;\n    return el;\n  }\n  /**\n   * @description Access the first element.\n   * @returns The first element.\n   */\n  front(): T | undefined {\n    if (this._length === 0) return;\n    return this._queue[this._first];\n  }\n}\n\nexport default Queue;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/OtherContainer/PriorityQueue.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 49, 0, 49, 44, 29, 28, 17, 18, 16, 19, 31,
        38, 16, 24, 27, 36, 28, 16, 9, 31, 30, 52, 25, 9, 5, 10, 28, 23, 33, 32,
        41, 26, 18, 9, 22, 5, 13, 28, 23, 31, 28, 30, 57, 22, 30, 13, 41, 26,
        18, 9, 22, 5, 13, 19, 26, 5, 13, 23, 23, 20, 5, 11, 33, 28, 31, 20, 21,
        26, 35, 9, 17, 5, 11, 25, 5, 13, 38, 5, 15, 36, 32, 22, 23, 38, 25, 24,
        16, 46, 24, 22, 35, 9, 20, 5, 19, 36, 32, 18, 31, 20, 5, 15, 29, 5, 1,
        0, 29, 0, 27, 41, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/OtherContainer/container/OtherContainer/PriorityQueue.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/src/container/OtherContainer/PriorityQueue.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_ContainerBase",
          "require",
          "PriorityQueue",
          "Base",
          "constructor",
          "container",
          "cmp",
          "x",
          "y",
          "copy",
          "super",
          "this",
          "_cmp",
          "Array",
          "isArray",
          "_priorityQueue",
          "self",
          "forEach",
          "el",
          "push",
          "_length",
          "length",
          "halfLength",
          "parent",
          "_pushDown",
          "_pushUp",
          "pos",
          "item",
          "parentItem",
          "left",
          "right",
          "minItem",
          "clear",
          "pop",
          "last",
          "top",
          "find",
          "indexOf",
          "remove",
          "index",
          "splice",
          "updateItem",
          "toArray",
          "_default"
        ],
        "mappings": "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",
        "file": "PriorityQueue.js",
        "sourcesContent": [
          "import { Base } from \"../ContainerBase\";\nclass PriorityQueue extends Base {\n    /**\n     * @description PriorityQueue's constructor.\n     * @param container - Initialize container, must have a forEach function.\n     * @param cmp - Compare function.\n     * @param copy - When the container is an array, you can choose to directly operate on the original object of\n     *               the array or perform a shallow copy. The default is shallow copy.\n     * @example\n     * new PriorityQueue();\n     * new PriorityQueue([1, 2, 3]);\n     * new PriorityQueue([1, 2, 3], (x, y) => x - y);\n     * new PriorityQueue([1, 2, 3], (x, y) => x - y, false);\n     */\n    constructor(container = [], cmp = function (x, y) {\n        if (x > y)\n            return -1;\n        if (x < y)\n            return 1;\n        return 0;\n    }, copy = true) {\n        super();\n        this._cmp = cmp;\n        if (Array.isArray(container)) {\n            this._priorityQueue = copy ? [...container] : container;\n        }\n        else {\n            this._priorityQueue = [];\n            const self = this;\n            container.forEach(function (el) {\n                self._priorityQueue.push(el);\n            });\n        }\n        this._length = this._priorityQueue.length;\n        const halfLength = this._length >> 1;\n        for (let parent = (this._length - 1) >> 1; parent >= 0; --parent) {\n            this._pushDown(parent, halfLength);\n        }\n    }\n    /**\n     * @internal\n     */\n    _pushUp(pos) {\n        const item = this._priorityQueue[pos];\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const parentItem = this._priorityQueue[parent];\n            if (this._cmp(parentItem, item) <= 0)\n                break;\n            this._priorityQueue[pos] = parentItem;\n            pos = parent;\n        }\n        this._priorityQueue[pos] = item;\n    }\n    /**\n     * @internal\n     */\n    _pushDown(pos, halfLength) {\n        const item = this._priorityQueue[pos];\n        while (pos < halfLength) {\n            let left = pos << 1 | 1;\n            const right = left + 1;\n            let minItem = this._priorityQueue[left];\n            if (right < this._length &&\n                this._cmp(minItem, this._priorityQueue[right]) > 0) {\n                left = right;\n                minItem = this._priorityQueue[right];\n            }\n            if (this._cmp(minItem, item) >= 0)\n                break;\n            this._priorityQueue[pos] = minItem;\n            pos = left;\n        }\n        this._priorityQueue[pos] = item;\n    }\n    clear() {\n        this._length = 0;\n        this._priorityQueue.length = 0;\n    }\n    /**\n     * @description Push element into a container in order.\n     * @param item - The element you want to push.\n     * @returns The size of heap after pushing.\n     * @example\n     * queue.push(1);\n     */\n    push(item) {\n        this._priorityQueue.push(item);\n        this._pushUp(this._length);\n        this._length += 1;\n    }\n    /**\n     * @description Removes the top element.\n     * @returns The element you popped.\n     * @example\n     * queue.pop();\n     */\n    pop() {\n        if (this._length === 0)\n            return;\n        const value = this._priorityQueue[0];\n        const last = this._priorityQueue.pop();\n        this._length -= 1;\n        if (this._length) {\n            this._priorityQueue[0] = last;\n            this._pushDown(0, this._length >> 1);\n        }\n        return value;\n    }\n    /**\n     * @description Accesses the top element.\n     * @example\n     * const top = queue.top();\n     */\n    top() {\n        return this._priorityQueue[0];\n    }\n    /**\n     * @description Check if element is in heap.\n     * @param item - The item want to find.\n     * @returns Whether element is in heap.\n     * @example\n     * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n     * const obj = { id: 1 };\n     * que.push(obj);\n     * console.log(que.find(obj));  // true\n     */\n    find(item) {\n        return this._priorityQueue.indexOf(item) >= 0;\n    }\n    /**\n     * @description Remove specified item from heap.\n     * @param item - The item want to remove.\n     * @returns Whether remove success.\n     * @example\n     * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n     * const obj = { id: 1 };\n     * que.push(obj);\n     * que.remove(obj);\n     */\n    remove(item) {\n        const index = this._priorityQueue.indexOf(item);\n        if (index < 0)\n            return false;\n        if (index === 0) {\n            this.pop();\n        }\n        else if (index === this._length - 1) {\n            this._priorityQueue.pop();\n            this._length -= 1;\n        }\n        else {\n            this._priorityQueue.splice(index, 1, this._priorityQueue.pop());\n            this._length -= 1;\n            this._pushUp(index);\n            this._pushDown(index, this._length >> 1);\n        }\n        return true;\n    }\n    /**\n     * @description Update item and it's pos in the heap.\n     * @param item - The item want to update.\n     * @returns Whether update success.\n     * @example\n     * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n     * const obj = { id: 1 };\n     * que.push(obj);\n     * obj.id = 2;\n     * que.updateItem(obj);\n     */\n    updateItem(item) {\n        const index = this._priorityQueue.indexOf(item);\n        if (index < 0)\n            return false;\n        this._pushUp(index);\n        this._pushDown(index, this._length >> 1);\n        return true;\n    }\n    /**\n     * @returns Return a copy array of heap.\n     * @example\n     * const arr = queue.toArray();\n     */\n    toArray() {\n        return [...this._priorityQueue];\n    }\n}\nexport default PriorityQueue;\n",
          "import { Base, initContainer } from '@/container/ContainerBase';\n\nclass PriorityQueue<T> extends Base {\n  /**\n   * @internal\n   */\n  private readonly _priorityQueue: T[];\n  /**\n   * @internal\n   */\n  private readonly _cmp: (x: T, y: T) => number;\n  /**\n   * @description PriorityQueue's constructor.\n   * @param container - Initialize container, must have a forEach function.\n   * @param cmp - Compare function.\n   * @param copy - When the container is an array, you can choose to directly operate on the original object of\n   *               the array or perform a shallow copy. The default is shallow copy.\n   * @example\n   * new PriorityQueue();\n   * new PriorityQueue([1, 2, 3]);\n   * new PriorityQueue([1, 2, 3], (x, y) => x - y);\n   * new PriorityQueue([1, 2, 3], (x, y) => x - y, false);\n   */\n  constructor(\n    container: initContainer<T> = [],\n    cmp: (x: T, y: T) => number =\n    function (x: T, y: T) {\n      if (x > y) return -1;\n      if (x < y) return 1;\n      return 0;\n    },\n    copy = true\n  ) {\n    super();\n    this._cmp = cmp;\n    if (Array.isArray(container)) {\n      this._priorityQueue = copy ? [...container] : container;\n    } else {\n      this._priorityQueue = [];\n      const self = this;\n      container.forEach(function (el) {\n        self._priorityQueue.push(el);\n      });\n    }\n    this._length = this._priorityQueue.length;\n    const halfLength = this._length >> 1;\n    for (let parent = (this._length - 1) >> 1; parent >= 0; --parent) {\n      this._pushDown(parent, halfLength);\n    }\n  }\n  /**\n   * @internal\n   */\n  private _pushUp(pos: number) {\n    const item = this._priorityQueue[pos];\n    while (pos > 0) {\n      const parent = (pos - 1) >> 1;\n      const parentItem = this._priorityQueue[parent];\n      if (this._cmp(parentItem, item) <= 0) break;\n      this._priorityQueue[pos] = parentItem;\n      pos = parent;\n    }\n    this._priorityQueue[pos] = item;\n  }\n  /**\n   * @internal\n   */\n  private _pushDown(pos: number, halfLength: number) {\n    const item = this._priorityQueue[pos];\n    while (pos < halfLength) {\n      let left = pos << 1 | 1;\n      const right = left + 1;\n      let minItem = this._priorityQueue[left];\n      if (\n        right < this._length &&\n        this._cmp(minItem, this._priorityQueue[right]) > 0\n      ) {\n        left = right;\n        minItem = this._priorityQueue[right];\n      }\n      if (this._cmp(minItem, item) >= 0) break;\n      this._priorityQueue[pos] = minItem;\n      pos = left;\n    }\n    this._priorityQueue[pos] = item;\n  }\n  clear() {\n    this._length = 0;\n    this._priorityQueue.length = 0;\n  }\n  /**\n   * @description Push element into a container in order.\n   * @param item - The element you want to push.\n   * @returns The size of heap after pushing.\n   * @example\n   * queue.push(1);\n   */\n  push(item: T) {\n    this._priorityQueue.push(item);\n    this._pushUp(this._length);\n    this._length += 1;\n  }\n  /**\n   * @description Removes the top element.\n   * @returns The element you popped.\n   * @example\n   * queue.pop();\n   */\n  pop() {\n    if (this._length === 0) return;\n    const value = this._priorityQueue[0];\n    const last = this._priorityQueue.pop()!;\n    this._length -= 1;\n    if (this._length) {\n      this._priorityQueue[0] = last;\n      this._pushDown(0, this._length >> 1);\n    }\n    return value;\n  }\n  /**\n   * @description Accesses the top element.\n   * @example\n   * const top = queue.top();\n   */\n  top(): T | undefined {\n    return this._priorityQueue[0];\n  }\n  /**\n   * @description Check if element is in heap.\n   * @param item - The item want to find.\n   * @returns Whether element is in heap.\n   * @example\n   * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n   * const obj = { id: 1 };\n   * que.push(obj);\n   * console.log(que.find(obj));  // true\n   */\n  find(item: T) {\n    return this._priorityQueue.indexOf(item) >= 0;\n  }\n  /**\n   * @description Remove specified item from heap.\n   * @param item - The item want to remove.\n   * @returns Whether remove success.\n   * @example\n   * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n   * const obj = { id: 1 };\n   * que.push(obj);\n   * que.remove(obj);\n   */\n  remove(item: T) {\n    const index = this._priorityQueue.indexOf(item);\n    if (index < 0) return false;\n    if (index === 0) {\n      this.pop();\n    } else if (index === this._length - 1) {\n      this._priorityQueue.pop();\n      this._length -= 1;\n    } else {\n      this._priorityQueue.splice(index, 1, this._priorityQueue.pop()!);\n      this._length -= 1;\n      this._pushUp(index);\n      this._pushDown(index, this._length >> 1);\n    }\n    return true;\n  }\n  /**\n   * @description Update item and it's pos in the heap.\n   * @param item - The item want to update.\n   * @returns Whether update success.\n   * @example\n   * const que = new PriorityQueue([], (x, y) => x.id - y.id);\n   * const obj = { id: 1 };\n   * que.push(obj);\n   * obj.id = 2;\n   * que.updateItem(obj);\n   */\n  updateItem(item: T) {\n    const index = this._priorityQueue.indexOf(item);\n    if (index < 0) return false;\n    this._pushUp(index);\n    this._pushDown(index, this._length >> 1);\n    return true;\n  }\n  /**\n   * @returns Return a copy array of heap.\n   * @example\n   * const arr = queue.toArray();\n   */\n  toArray() {\n    return [...this._priorityQueue];\n  }\n}\n\nexport default PriorityQueue;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/Vector.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 54, 0, 55, 0, 36, 27, 18, 6, 1, 0, 61, 26,
        20, 27, 5, 12, 77, 5, 1, 0, 36, 35, 16, 31, 38, 30, 16, 24, 27, 36, 30,
        16, 9, 5, 13, 19, 26, 5, 13, 43, 5, 11, 48, 5, 14, 55, 5, 12, 47, 5, 13,
        25, 5, 12, 34, 5, 24, 38, 33, 9, 25, 5, 26, 38, 33, 9, 28, 20, 22, 5,
        28, 18, 42, 34, 40, 13, 9, 35, 22, 5, 31, 22, 21, 34, 17, 5, 17, 23, 20,
        22, 5, 15, 33, 20, 28, 5, 27, 38, 33, 9, 22, 5, 25, 34, 33, 9, 53, 20,
        22, 5, 13, 42, 34, 51, 13, 9, 26, 5, 15, 25, 5, 14, 18, 42, 46, 40, 13,
        9, 35, 22, 5, 13, 23, 5, 16, 42, 34, 9, 5, 25, 28, 26, 23, 5, 1, 0, 22,
        0, 27, 34, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/container/SequentialContainer/Vector.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/src/container/SequentialContainer/Vector.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_Base",
          "_interopRequireDefault",
          "require",
          "_RandomIterator",
          "obj",
          "__esModule",
          "VectorIterator",
          "RandomIterator",
          "constructor",
          "node",
          "container",
          "iteratorType",
          "super",
          "this",
          "copy",
          "_node",
          "Vector",
          "SequentialContainer",
          "Array",
          "isArray",
          "_vector",
          "_length",
          "length",
          "self",
          "forEach",
          "el",
          "pushBack",
          "clear",
          "begin",
          "end",
          "rBegin",
          "rEnd",
          "front",
          "back",
          "getElementByPos",
          "pos",
          "RangeError",
          "eraseElementByPos",
          "splice",
          "eraseElementByValue",
          "index",
          "i",
          "eraseElementByIterator",
          "iter",
          "next",
          "element",
          "push",
          "popBack",
          "pop",
          "setElementByPos",
          "insert",
          "num",
          "fill",
          "find",
          "reverse",
          "unique",
          "sort",
          "cmp",
          "callback",
          "Symbol",
          "iterator",
          "bind",
          "_default"
        ],
        "mappings": "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",
        "file": "Vector.js",
        "sourcesContent": [
          "import SequentialContainer from './Base';\nimport { RandomIterator } from \"./Base/RandomIterator\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nclass VectorIterator extends RandomIterator {\n    constructor(node, container, iteratorType) {\n        super(node, iteratorType);\n        this.container = container;\n    }\n    copy() {\n        return new VectorIterator(this._node, this.container, this.iteratorType);\n    }\n}\nclass Vector extends SequentialContainer {\n    /**\n     * @param container - Initialize container, must have a forEach function.\n     * @param copy - When the container is an array, you can choose to directly operate on the original object of\n     *               the array or perform a shallow copy. The default is shallow copy.\n     */\n    constructor(container = [], copy = true) {\n        super();\n        if (Array.isArray(container)) {\n            this._vector = copy ? [...container] : container;\n            this._length = container.length;\n        }\n        else {\n            this._vector = [];\n            const self = this;\n            container.forEach(function (el) {\n                self.pushBack(el);\n            });\n        }\n    }\n    clear() {\n        this._length = 0;\n        this._vector.length = 0;\n    }\n    begin() {\n        return new VectorIterator(0, this);\n    }\n    end() {\n        return new VectorIterator(this._length, this);\n    }\n    rBegin() {\n        return new VectorIterator(this._length - 1, this, 1 /* IteratorType.REVERSE */);\n    }\n    rEnd() {\n        return new VectorIterator(-1, this, 1 /* IteratorType.REVERSE */);\n    }\n    front() {\n        return this._vector[0];\n    }\n    back() {\n        return this._vector[this._length - 1];\n    }\n    getElementByPos(pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        return this._vector[pos];\n    }\n    eraseElementByPos(pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        this._vector.splice(pos, 1);\n        this._length -= 1;\n        return this._length;\n    }\n    eraseElementByValue(value) {\n        let index = 0;\n        for (let i = 0; i < this._length; ++i) {\n            if (this._vector[i] !== value) {\n                this._vector[index++] = this._vector[i];\n            }\n        }\n        this._length = this._vector.length = index;\n        return this._length;\n    }\n    eraseElementByIterator(iter) {\n        const _node = iter._node;\n        iter = iter.next();\n        this.eraseElementByPos(_node);\n        return iter;\n    }\n    pushBack(element) {\n        this._vector.push(element);\n        this._length += 1;\n        return this._length;\n    }\n    popBack() {\n        if (this._length === 0)\n            return;\n        this._length -= 1;\n        return this._vector.pop();\n    }\n    setElementByPos(pos, element) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        this._vector[pos] = element;\n    }\n    insert(pos, element, num = 1) {\n        if (pos < 0 || pos > this._length) {\n            throw new RangeError();\n        }\n        this._vector.splice(pos, 0, ...new Array(num).fill(element));\n        this._length += num;\n        return this._length;\n    }\n    find(element) {\n        for (let i = 0; i < this._length; ++i) {\n            if (this._vector[i] === element) {\n                return new VectorIterator(i, this);\n            }\n        }\n        return this.end();\n    }\n    reverse() {\n        this._vector.reverse();\n    }\n    unique() {\n        let index = 1;\n        for (let i = 1; i < this._length; ++i) {\n            if (this._vector[i] !== this._vector[i - 1]) {\n                this._vector[index++] = this._vector[i];\n            }\n        }\n        this._length = this._vector.length = index;\n        return this._length;\n    }\n    sort(cmp) {\n        this._vector.sort(cmp);\n    }\n    forEach(callback) {\n        for (let i = 0; i < this._length; ++i) {\n            callback(this._vector[i], i, this);\n        }\n    }\n    [Symbol.iterator]() {\n        return function* () {\n            yield* this._vector;\n        }.bind(this)();\n    }\n}\nexport default Vector;\n",
          "import SequentialContainer from './Base';\nimport { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { RandomIterator } from '@/container/SequentialContainer/Base/RandomIterator';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\n\nclass VectorIterator<T> extends RandomIterator<T> {\n  container: Vector<T>;\n  constructor(node: number, container: Vector<T>, iteratorType?: IteratorType) {\n    super(node, iteratorType);\n    this.container = container;\n  }\n  copy() {\n    return new VectorIterator<T>(this._node, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: VectorIterator<T>): boolean;\n}\n\nexport type { VectorIterator };\n\nclass Vector<T> extends SequentialContainer<T> {\n  /**\n   * @internal\n   */\n  private readonly _vector: T[];\n  /**\n   * @param container - Initialize container, must have a forEach function.\n   * @param copy - When the container is an array, you can choose to directly operate on the original object of\n   *               the array or perform a shallow copy. The default is shallow copy.\n   */\n  constructor(container: initContainer<T> = [], copy = true) {\n    super();\n    if (Array.isArray(container)) {\n      this._vector = copy ? [...container] : container;\n      this._length = container.length;\n    } else {\n      this._vector = [];\n      const self = this;\n      container.forEach(function (el) {\n        self.pushBack(el);\n      });\n    }\n  }\n  clear() {\n    this._length = 0;\n    this._vector.length = 0;\n  }\n  begin() {\n    return new VectorIterator<T>(0, this);\n  }\n  end() {\n    return new VectorIterator<T>(this._length, this);\n  }\n  rBegin() {\n    return new VectorIterator<T>(this._length - 1, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new VectorIterator<T>(-1, this, IteratorType.REVERSE);\n  }\n  front(): T | undefined {\n    return this._vector[0];\n  }\n  back(): T | undefined {\n    return this._vector[this._length - 1];\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    return this._vector[pos];\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    this._vector.splice(pos, 1);\n    this._length -= 1;\n    return this._length;\n  }\n  eraseElementByValue(value: T) {\n    let index = 0;\n    for (let i = 0; i < this._length; ++i) {\n      if (this._vector[i] !== value) {\n        this._vector[index++] = this._vector[i];\n      }\n    }\n    this._length = this._vector.length = index;\n    return this._length;\n  }\n  eraseElementByIterator(iter: VectorIterator<T>) {\n    const _node = iter._node;\n    iter = iter.next();\n    this.eraseElementByPos(_node);\n    return iter;\n  }\n  pushBack(element: T) {\n    this._vector.push(element);\n    this._length += 1;\n    return this._length;\n  }\n  popBack() {\n    if (this._length === 0) return;\n    this._length -= 1;\n    return this._vector.pop();\n  }\n  setElementByPos(pos: number, element: T) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    this._vector[pos] = element;\n  }\n  insert(pos: number, element: T, num = 1) {\n    $checkWithinAccessParams!(pos, 0, this._length);\n    this._vector.splice(pos, 0, ...new Array<T>(num).fill(element));\n    this._length += num;\n    return this._length;\n  }\n  find(element: T) {\n    for (let i = 0; i < this._length; ++i) {\n      if (this._vector[i] === element) {\n        return new VectorIterator<T>(i, this);\n      }\n    }\n    return this.end();\n  }\n  reverse() {\n    this._vector.reverse();\n  }\n  unique() {\n    let index = 1;\n    for (let i = 1; i < this._length; ++i) {\n      if (this._vector[i] !== this._vector[i - 1]) {\n        this._vector[index++] = this._vector[i];\n      }\n    }\n    this._length = this._vector.length = index;\n    return this._length;\n  }\n  sort(cmp?: (x: T, y: T) => number) {\n    this._vector.sort(cmp);\n  }\n  forEach(callback: (element: T, index: number, vector: Vector<T>) => void) {\n    for (let i = 0; i < this._length; ++i) {\n      callback(this._vector[i], i, this);\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: Vector<T>) {\n      yield * this._vector;\n    }.bind(this)();\n  }\n}\n\nexport default Vector;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/Base/index.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 52, 0, 61, 0, 35, 0, 27, 33, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/Base/container/SequentialContainer/Base/index.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/src/container/SequentialContainer/Base/index.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_ContainerBase",
          "require",
          "SequentialContainer",
          "Container",
          "_default"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,eAAe;;ACLvB,IAAAC,iBAAAC,QAAA;;AAEA,MAAeC,4BAA+BC,eAAAA;;AAgE7C,IAAAC,WAEcF;;AAAmBL,QAAAE,UAAAK",
        "file": "index.js",
        "sourcesContent": [
          null,
          "import { Container } from '@/container/ContainerBase';\n\nabstract class SequentialContainer<T> extends Container<T> {\n  /**\n   * @description Push the element to the back.\n   * @param element - The element you want to push.\n   * @returns The size of container after pushing.\n   */\n  abstract pushBack(element: T): number;\n  /**\n   * @description Removes the last element.\n   * @returns The element you popped.\n   */\n  abstract popBack(): T | undefined;\n  /**\n   * @description Sets element by position.\n   * @param pos - The position you want to change.\n   * @param element - The element's value you want to update.\n   * @example\n   * container.setElementByPos(-1, 1); // throw a RangeError\n   */\n  abstract setElementByPos(pos: number, element: T): void;\n  /**\n   * @description Removes the elements of the specified value.\n   * @param value - The value you want to remove.\n   * @returns The size of container after erasing.\n   * @example\n   * container.eraseElementByValue(-1);\n   */\n  abstract eraseElementByValue(value: T): number;\n  /**\n   * @description Insert several elements after the specified position.\n   * @param pos - The position you want to insert.\n   * @param element - The element you want to insert.\n   * @param num - The number of elements you want to insert (default 1).\n   * @returns The size of container after inserting.\n   * @example\n   * const container = new Vector([1, 2, 3]);\n   * container.insert(1, 4);  // [1, 4, 2, 3]\n   * container.insert(1, 5, 3); // [1, 5, 5, 5, 4, 2, 3]\n   */\n  abstract insert(pos: number, element: T, num?: number): number;\n  /**\n   * @description Reverses the container.\n   * @example\n   * const container = new Vector([1, 2, 3]);\n   * container.reverse(); // [3, 2, 1]\n   */\n  abstract reverse(): void;\n  /**\n   * @description Removes the duplication of elements in the container.\n   * @returns The size of container after inserting.\n   * @example\n   * const container = new Vector([1, 1, 3, 2, 2, 5, 5, 2]);\n   * container.unique(); // [1, 3, 2, 5, 2]\n   */\n  abstract unique(): number;\n  /**\n   * @description Sort the container.\n   * @param cmp - Comparison function to sort.\n   * @example\n   * const container = new Vector([3, 1, 10]);\n   * container.sort();  // [1, 10, 3]\n   * container.sort((x, y) => x - y); // [1, 3, 10]\n   */\n  abstract sort(cmp?: (x: T, y: T) => number): void;\n}\n\nexport default SequentialContainer;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/Base/RandomIterator.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 32, 0, 52, 0, 55, 0, 63, 23, 17, 19, 38, 35, 35,
        64, 17, 28, 28, 14, 36, 55, 64, 17, 28, 28, 14, 16, 35, 59, 64, 17, 28,
        28, 14, 36, 36, 64, 17, 28, 28, 14, 9, 5, 19, 54, 5, 20, 50, 5, 1, 0,
        40, 42, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/Base/container/SequentialContainer/Base/RandomIterator.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/src/container/SequentialContainer/Base/RandomIterator.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "RandomIterator",
          "_ContainerBase",
          "require",
          "_throwError",
          "ContainerIterator",
          "constructor",
          "index",
          "iteratorType",
          "super",
          "this",
          "_node",
          "pre",
          "throwIteratorAccessError",
          "next",
          "container",
          "size",
          "pointer",
          "getElementByPos",
          "newValue",
          "setElementByPos"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,sBAAsB;;ACL9B,IAAAC,iBAAAC,QAAA;;AAEA,IAAAC,cAAAD,QAAA;;AAEM,MAAgBF,uBAA0BI,eAAAA;IAS9CC,YACEC,GACAC;QAEAC,MAAMD;QACNE,KAAKC,IAAQJ;QACb,IAAIG,KAAKF,iBAAY,GAA0B;YAC7CE,KAAKE,MAAM;gBACT,IAAIF,KAAKC,MAAU,GAAG;qBACpB,GAAAE,YAAAA;ADTM;gBCWRH,KAAKC,KAAS;gBACd,OAAOD;ADTH;YCWNA,KAAKI,OAAO;gBACV,IAAIJ,KAAKC,MAAUD,KAAKK,UAAUC,QAAQ;qBACxC,GAAAH,YAAAA;ADTM;gBCWRH,KAAKC,KAAS;gBACd,OAAOD;ADTH;AACJ,eCUG;YACLA,KAAKE,MAAM;gBACT,IAAIF,KAAKC,MAAUD,KAAKK,UAAUC,SAAS,GAAG;qBAC5C,GAAAH,YAAAA;ADRM;gBCURH,KAAKC,KAAS;gBACd,OAAOD;ADRH;YCUNA,KAAKI,OAAO;gBACV,IAAIJ,KAAKC,OAAW,GAAG;qBACrB,GAAAE,YAAAA;ADRM;gBCURH,KAAKC,KAAS;gBACd,OAAOD;ADRH;AACJ;AACJ;ICUEO;QACF,OAAOP,KAAKK,UAAUG,gBAAgBR,KAAKC;ADR3C;ICUEM,YAAQE;QACVT,KAAKK,UAAUK,gBAAgBV,KAAKC,GAAOQ;ADR3C;;;ACcHpB,QAAAE,iBAAAA",
        "file": "RandomIterator.js",
        "sourcesContent": [
          "import { ContainerIterator } from \"../../ContainerBase\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nexport class RandomIterator extends ContainerIterator {\n    /**\n     * @internal\n     */\n    constructor(index, iteratorType) {\n        super(iteratorType);\n        this._node = index;\n        if (this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            this.pre = function () {\n                if (this._node === 0) {\n                    throwIteratorAccessError();\n                }\n                this._node -= 1;\n                return this;\n            };\n            this.next = function () {\n                if (this._node === this.container.size()) {\n                    throwIteratorAccessError();\n                }\n                this._node += 1;\n                return this;\n            };\n        }\n        else {\n            this.pre = function () {\n                if (this._node === this.container.size() - 1) {\n                    throwIteratorAccessError();\n                }\n                this._node += 1;\n                return this;\n            };\n            this.next = function () {\n                if (this._node === -1) {\n                    throwIteratorAccessError();\n                }\n                this._node -= 1;\n                return this;\n            };\n        }\n    }\n    get pointer() {\n        return this.container.getElementByPos(this._node);\n    }\n    set pointer(newValue) {\n        this.container.setElementByPos(this._node, newValue);\n    }\n}\n",
          "import { ContainerIterator, IteratorType } from '@/container/ContainerBase';\nimport SequentialContainer from '@/container/SequentialContainer/Base/index';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nexport abstract class RandomIterator<T> extends ContainerIterator<T> {\n  abstract readonly container: SequentialContainer<T>;\n  /**\n   * @internal\n   */\n  _node: number;\n  /**\n   * @internal\n   */\n  protected constructor(\n    index: number,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = index;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node === 0) {\n          throwIteratorAccessError();\n        }\n        this._node -= 1;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this.container.size()) {\n          throwIteratorAccessError();\n        }\n        this._node += 1;\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node === this.container.size() - 1) {\n          throwIteratorAccessError();\n        }\n        this._node += 1;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === -1) {\n          throwIteratorAccessError();\n        }\n        this._node -= 1;\n        return this;\n      };\n    }\n  }\n  get pointer() {\n    return this.container.getElementByPos(this._node);\n  }\n  set pointer(newValue: T) {\n    this.container.setElementByPos(this._node, newValue);\n  }\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/utils/throwError.js": {
      "lineLengths": [13, 0, 37, 15, 3, 0, 60, 0, 37, 52, 1, 38, 0],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/utils/utils/throwError.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/src/utils/throwError.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "throwIteratorAccessError",
          "RangeError"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,2BAA2BA;;ACD7B,SAAUA;IACd,MAAM,IAAIC,WAAW;ADCvB",
        "file": "throwError.js",
        "sourcesContent": [
          "/**\n * @description Throw an iterator access error.\n * @internal\n */\nexport function throwIteratorAccessError() {\n    throw new RangeError('Iterator access denied!');\n}\n",
          "/**\n * @description Throw an iterator access error.\n * @internal\n */\nexport function throwIteratorAccessError() {\n  throw new RangeError('Iterator access denied!');\n}\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/LinkList.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 54, 0, 49, 0, 52, 0, 36, 27, 18, 6, 1, 0,
        65, 29, 17, 19, 19, 27, 38, 35, 42, 64, 17, 34, 28, 14, 36, 40, 64, 17,
        34, 28, 14, 16, 35, 42, 64, 17, 34, 28, 14, 36, 40, 64, 17, 34, 28, 14,
        9, 5, 19, 32, 56, 9, 24, 5, 20, 32, 56, 9, 21, 5, 12, 87, 5, 1, 0, 38,
        25, 16, 20, 55, 23, 32, 26, 12, 5, 10, 31, 16, 16, 27, 23, 9, 27, 23, 9,
        20, 5, 13, 22, 19, 17, 17, 16, 10, 16, 16, 27, 23, 9, 27, 23, 9, 20, 5,
        13, 19, 55, 5, 13, 58, 5, 11, 58, 5, 14, 61, 5, 12, 61, 5, 13, 24, 5,
        12, 24, 5, 24, 38, 33, 9, 23, 21, 20, 9, 19, 5, 26, 38, 33, 9, 23, 21,
        20, 9, 18, 22, 5, 28, 23, 30, 28, 26, 13, 20, 9, 22, 5, 31, 22, 27, 56,
        9, 21, 18, 17, 5, 17, 26, 22, 5, 15, 33, 27, 23, 17, 5, 18, 26, 22, 5,
        16, 33, 27, 23, 17, 5, 27, 38, 33, 9, 23, 21, 20, 9, 16, 5, 25, 34, 33,
        9, 34, 22, 42, 34, 41, 16, 27, 41, 24, 13, 26, 24, 25, 23, 25, 24, 18,
        26, 24, 13, 20, 20, 9, 22, 5, 13, 23, 30, 28, 61, 13, 20, 9, 26, 5, 15,
        32, 23, 23, 18, 33, 26, 22, 20, 20, 20, 19, 9, 5, 14, 26, 26, 9, 23, 30,
        22, 53, 24, 28, 13, 22, 22, 20, 9, 22, 5, 13, 32, 21, 35, 22, 12, 18,
        23, 32, 20, 20, 12, 5, 14, 23, 27, 36, 30, 16, 16, 27, 36, 47, 28, 17,
        28, 16, 9, 22, 5, 16, 23, 18, 30, 30, 20, 9, 5, 25, 28, 37, 27, 34, 26,
        24, 13, 23, 5, 1, 0, 24, 0, 27, 36, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/container/SequentialContainer/LinkList.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/src/container/SequentialContainer/LinkList.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_Base",
          "_interopRequireDefault",
          "require",
          "_ContainerBase",
          "_throwError",
          "obj",
          "__esModule",
          "LinkListIterator",
          "ContainerIterator",
          "constructor",
          "_node",
          "_header",
          "container",
          "iteratorType",
          "super",
          "this",
          "pre",
          "_pre",
          "throwIteratorAccessError",
          "next",
          "_next",
          "pointer",
          "_value",
          "newValue",
          "copy",
          "LinkList",
          "SequentialContainer",
          "_head",
          "_tail",
          "self",
          "forEach",
          "el",
          "pushBack",
          "_eraseNode",
          "node",
          "L",
          "B",
          "_length",
          "_insertNode",
          "clear",
          "begin",
          "end",
          "rBegin",
          "rEnd",
          "front",
          "back",
          "getElementByPos",
          "pos",
          "RangeError",
          "curNode",
          "eraseElementByPos",
          "eraseElementByValue",
          "eraseElementByIterator",
          "iter",
          "element",
          "popBack",
          "pushFront",
          "popFront",
          "setElementByPos",
          "insert",
          "num",
          "i",
          "find",
          "reverse",
          "pHead",
          "pTail",
          "cnt",
          "tmp",
          "unique",
          "tmpNode",
          "sort",
          "cmp",
          "arr",
          "push",
          "merge",
          "list",
          "callback",
          "index",
          "Symbol",
          "iterator",
          "bind",
          "_default"
        ],
        "mappings": "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",
        "file": "LinkList.js",
        "sourcesContent": [
          "import SequentialContainer from './Base';\nimport { ContainerIterator } from \"../ContainerBase\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nclass LinkListIterator extends ContainerIterator {\n    /**\n     * @internal\n     */\n    constructor(_node, _header, container, iteratorType) {\n        super(iteratorType);\n        this._node = _node;\n        this._header = _header;\n        this.container = container;\n        if (this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            this.pre = function () {\n                if (this._node._pre === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n            this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n        }\n        else {\n            this.pre = function () {\n                if (this._node._next === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n            this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n        }\n    }\n    get pointer() {\n        if (this._node === this._header) {\n            throwIteratorAccessError();\n        }\n        return this._node._value;\n    }\n    set pointer(newValue) {\n        if (this._node === this._header) {\n            throwIteratorAccessError();\n        }\n        this._node._value = newValue;\n    }\n    copy() {\n        return new LinkListIterator(this._node, this._header, this.container, this.iteratorType);\n    }\n}\nclass LinkList extends SequentialContainer {\n    constructor(container = []) {\n        super();\n        this._header = {};\n        this._head = this._tail = this._header._pre = this._header._next = this._header;\n        const self = this;\n        container.forEach(function (el) {\n            self.pushBack(el);\n        });\n    }\n    /**\n     * @internal\n     */\n    _eraseNode(node) {\n        const { _pre, _next } = node;\n        _pre._next = _next;\n        _next._pre = _pre;\n        if (node === this._head) {\n            this._head = _next;\n        }\n        if (node === this._tail) {\n            this._tail = _pre;\n        }\n        this._length -= 1;\n    }\n    /**\n     * @internal\n     */\n    _insertNode(value, pre) {\n        const next = pre._next;\n        const node = {\n            _value: value,\n            _pre: pre,\n            _next: next\n        };\n        pre._next = node;\n        next._pre = node;\n        if (pre === this._header) {\n            this._head = node;\n        }\n        if (next === this._header) {\n            this._tail = node;\n        }\n        this._length += 1;\n    }\n    clear() {\n        this._length = 0;\n        this._head = this._tail = this._header._pre = this._header._next = this._header;\n    }\n    begin() {\n        return new LinkListIterator(this._head, this._header, this);\n    }\n    end() {\n        return new LinkListIterator(this._header, this._header, this);\n    }\n    rBegin() {\n        return new LinkListIterator(this._tail, this._header, this, 1 /* IteratorType.REVERSE */);\n    }\n    rEnd() {\n        return new LinkListIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    }\n    front() {\n        return this._head._value;\n    }\n    back() {\n        return this._tail._value;\n    }\n    getElementByPos(pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        let curNode = this._head;\n        while (pos--) {\n            curNode = curNode._next;\n        }\n        return curNode._value;\n    }\n    eraseElementByPos(pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        let curNode = this._head;\n        while (pos--) {\n            curNode = curNode._next;\n        }\n        this._eraseNode(curNode);\n        return this._length;\n    }\n    eraseElementByValue(_value) {\n        let curNode = this._head;\n        while (curNode !== this._header) {\n            if (curNode._value === _value) {\n                this._eraseNode(curNode);\n            }\n            curNode = curNode._next;\n        }\n        return this._length;\n    }\n    eraseElementByIterator(iter) {\n        const node = iter._node;\n        if (node === this._header) {\n            throwIteratorAccessError();\n        }\n        iter = iter.next();\n        this._eraseNode(node);\n        return iter;\n    }\n    pushBack(element) {\n        this._insertNode(element, this._tail);\n        return this._length;\n    }\n    popBack() {\n        if (this._length === 0)\n            return;\n        const value = this._tail._value;\n        this._eraseNode(this._tail);\n        return value;\n    }\n    /**\n     * @description Push an element to the front.\n     * @param element - The element you want to push.\n     * @returns The size of queue after pushing.\n     */\n    pushFront(element) {\n        this._insertNode(element, this._header);\n        return this._length;\n    }\n    /**\n     * @description Removes the first element.\n     * @returns The element you popped.\n     */\n    popFront() {\n        if (this._length === 0)\n            return;\n        const value = this._head._value;\n        this._eraseNode(this._head);\n        return value;\n    }\n    setElementByPos(pos, element) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        let curNode = this._head;\n        while (pos--) {\n            curNode = curNode._next;\n        }\n        curNode._value = element;\n    }\n    insert(pos, element, num = 1) {\n        if (pos < 0 || pos > this._length) {\n            throw new RangeError();\n        }\n        if (num <= 0)\n            return this._length;\n        if (pos === 0) {\n            while (num--)\n                this.pushFront(element);\n        }\n        else if (pos === this._length) {\n            while (num--)\n                this.pushBack(element);\n        }\n        else {\n            let curNode = this._head;\n            for (let i = 1; i < pos; ++i) {\n                curNode = curNode._next;\n            }\n            const next = curNode._next;\n            this._length += num;\n            while (num--) {\n                curNode._next = {\n                    _value: element,\n                    _pre: curNode\n                };\n                curNode._next._pre = curNode;\n                curNode = curNode._next;\n            }\n            curNode._next = next;\n            next._pre = curNode;\n        }\n        return this._length;\n    }\n    find(element) {\n        let curNode = this._head;\n        while (curNode !== this._header) {\n            if (curNode._value === element) {\n                return new LinkListIterator(curNode, this._header, this);\n            }\n            curNode = curNode._next;\n        }\n        return this.end();\n    }\n    reverse() {\n        if (this._length <= 1)\n            return;\n        let pHead = this._head;\n        let pTail = this._tail;\n        let cnt = 0;\n        while ((cnt << 1) < this._length) {\n            const tmp = pHead._value;\n            pHead._value = pTail._value;\n            pTail._value = tmp;\n            pHead = pHead._next;\n            pTail = pTail._pre;\n            cnt += 1;\n        }\n    }\n    unique() {\n        if (this._length <= 1) {\n            return this._length;\n        }\n        let curNode = this._head;\n        while (curNode !== this._header) {\n            let tmpNode = curNode;\n            while (tmpNode._next !== this._header &&\n                tmpNode._value === tmpNode._next._value) {\n                tmpNode = tmpNode._next;\n                this._length -= 1;\n            }\n            curNode._next = tmpNode._next;\n            curNode._next._pre = curNode;\n            curNode = curNode._next;\n        }\n        return this._length;\n    }\n    sort(cmp) {\n        if (this._length <= 1)\n            return;\n        const arr = [];\n        this.forEach(function (el) {\n            arr.push(el);\n        });\n        arr.sort(cmp);\n        let curNode = this._head;\n        arr.forEach(function (element) {\n            curNode._value = element;\n            curNode = curNode._next;\n        });\n    }\n    /**\n     * @description Merges two sorted lists.\n     * @param list - The other list you want to merge (must be sorted).\n     * @returns The size of list after merging.\n     * @example\n     * const linkA = new LinkList([1, 3, 5]);\n     * const linkB = new LinkList([2, 4, 6]);\n     * linkA.merge(linkB);  // [1, 2, 3, 4, 5];\n     */\n    merge(list) {\n        const self = this;\n        if (this._length === 0) {\n            list.forEach(function (el) {\n                self.pushBack(el);\n            });\n        }\n        else {\n            let curNode = this._head;\n            list.forEach(function (el) {\n                while (curNode !== self._header &&\n                    curNode._value <= el) {\n                    curNode = curNode._next;\n                }\n                self._insertNode(el, curNode._pre);\n            });\n        }\n        return this._length;\n    }\n    forEach(callback) {\n        let curNode = this._head;\n        let index = 0;\n        while (curNode !== this._header) {\n            callback(curNode._value, index++, this);\n            curNode = curNode._next;\n        }\n    }\n    [Symbol.iterator]() {\n        return function* () {\n            if (this._length === 0)\n                return;\n            let curNode = this._head;\n            while (curNode !== this._header) {\n                yield curNode._value;\n                curNode = curNode._next;\n            }\n        }.bind(this)();\n    }\n}\nexport default LinkList;\n",
          "import SequentialContainer from './Base';\nimport { ContainerIterator, initContainer, IteratorType } from '@/container/ContainerBase';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\ntype LinkNode<T> = {\n  _value: T;\n  _pre: LinkNode<T>;\n  _next: LinkNode<T>;\n}\n\nclass LinkListIterator<T> extends ContainerIterator<T> {\n  readonly container: LinkList<T>;\n  /**\n   * @internal\n   */\n  _node: LinkNode<T>;\n  /**\n   * @internal\n   */\n  private readonly _header: LinkNode<T>;\n  /**\n   * @internal\n   */\n  constructor(\n    _node: LinkNode<T>,\n    _header: LinkNode<T>,\n    container: LinkList<T>,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = _node;\n    this._header = _header;\n    this.container = container;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node._pre === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node._next === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n    }\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    return this._node._value;\n  }\n  set pointer(newValue: T) {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    this._node._value = newValue;\n  }\n  copy() {\n    return new LinkListIterator<T>(this._node, this._header, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: LinkListIterator<T>): boolean;\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n\nexport type { LinkListIterator };\n\nclass LinkList<T> extends SequentialContainer<T> {\n  /**\n   * @internal\n   */\n  private _head: LinkNode<T>;\n  /**\n   * @internal\n   */\n  private _tail: LinkNode<T>;\n  /**\n   * @internal\n   */\n  private readonly _header: LinkNode<T>;\n  constructor(container: initContainer<T> = []) {\n    super();\n    this._header = <LinkNode<T>>{};\n    this._head = this._tail = this._header._pre = this._header._next = this._header;\n    const self = this;\n    container.forEach(function (el) {\n      self.pushBack(el);\n    });\n  }\n  /**\n   * @internal\n   */\n  private _eraseNode(node: LinkNode<T>) {\n    const { _pre, _next } = node;\n    _pre._next = _next;\n    _next._pre = _pre;\n    if (node === this._head) {\n      this._head = _next;\n    }\n    if (node === this._tail) {\n      this._tail = _pre;\n    }\n    this._length -= 1;\n  }\n  /**\n   * @internal\n   */\n  private _insertNode(value: T, pre: LinkNode<T>) {\n    const next = pre._next;\n    const node = {\n      _value: value,\n      _pre: pre,\n      _next: next\n    };\n    pre._next = node;\n    next._pre = node;\n    if (pre === this._header) {\n      this._head = node;\n    }\n    if (next === this._header) {\n      this._tail = node;\n    }\n    this._length += 1;\n  }\n  clear() {\n    this._length = 0;\n    this._head = this._tail = this._header._pre = this._header._next = this._header;\n  }\n  begin() {\n    return new LinkListIterator<T>(this._head, this._header, this);\n  }\n  end() {\n    return new LinkListIterator<T>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new LinkListIterator<T>(this._tail, this._header, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new LinkListIterator<T>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front(): T | undefined {\n    return this._head._value;\n  }\n  back(): T | undefined {\n    return this._tail._value;\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let curNode = this._head;\n    while (pos--) {\n      curNode = curNode._next;\n    }\n    return curNode._value;\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let curNode = this._head;\n    while (pos--) {\n      curNode = curNode._next;\n    }\n    this._eraseNode(curNode);\n    return this._length;\n  }\n  eraseElementByValue(_value: T) {\n    let curNode = this._head;\n    while (curNode !== this._header) {\n      if (curNode._value === _value) {\n        this._eraseNode(curNode);\n      }\n      curNode = curNode._next;\n    }\n    return this._length;\n  }\n  eraseElementByIterator(iter: LinkListIterator<T>) {\n    const node = iter._node;\n    if (node === this._header) {\n      throwIteratorAccessError();\n    }\n    iter = iter.next();\n    this._eraseNode(node);\n    return iter;\n  }\n  pushBack(element: T) {\n    this._insertNode(element, this._tail);\n    return this._length;\n  }\n  popBack() {\n    if (this._length === 0) return;\n    const value = this._tail._value;\n    this._eraseNode(this._tail);\n    return value;\n  }\n  /**\n   * @description Push an element to the front.\n   * @param element - The element you want to push.\n   * @returns The size of queue after pushing.\n   */\n  pushFront(element: T) {\n    this._insertNode(element, this._header);\n    return this._length;\n  }\n  /**\n   * @description Removes the first element.\n   * @returns The element you popped.\n   */\n  popFront() {\n    if (this._length === 0) return;\n    const value = this._head._value;\n    this._eraseNode(this._head);\n    return value;\n  }\n  setElementByPos(pos: number, element: T) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let curNode = this._head;\n    while (pos--) {\n      curNode = curNode._next;\n    }\n    curNode._value = element;\n  }\n  insert(pos: number, element: T, num = 1) {\n    $checkWithinAccessParams!(pos, 0, this._length);\n    if (num <= 0) return this._length;\n    if (pos === 0) {\n      while (num--) this.pushFront(element);\n    } else if (pos === this._length) {\n      while (num--) this.pushBack(element);\n    } else {\n      let curNode = this._head;\n      for (let i = 1; i < pos; ++i) {\n        curNode = curNode._next;\n      }\n      const next = curNode._next;\n      this._length += num;\n      while (num--) {\n        curNode._next = <LinkNode<T>>{\n          _value: element,\n          _pre: curNode\n        };\n        curNode._next._pre = curNode;\n        curNode = curNode._next;\n      }\n      curNode._next = next;\n      next._pre = curNode;\n    }\n    return this._length;\n  }\n  find(element: T) {\n    let curNode = this._head;\n    while (curNode !== this._header) {\n      if (curNode._value === element) {\n        return new LinkListIterator<T>(curNode, this._header, this);\n      }\n      curNode = curNode._next;\n    }\n    return this.end();\n  }\n  reverse() {\n    if (this._length <= 1) return;\n    let pHead = this._head;\n    let pTail = this._tail;\n    let cnt = 0;\n    while ((cnt << 1) < this._length) {\n      const tmp = pHead._value;\n      pHead._value = pTail._value;\n      pTail._value = tmp;\n      pHead = pHead._next;\n      pTail = pTail._pre;\n      cnt += 1;\n    }\n  }\n  unique() {\n    if (this._length <= 1) {\n      return this._length;\n    }\n    let curNode = this._head;\n    while (curNode !== this._header) {\n      let tmpNode = curNode;\n      while (\n        tmpNode._next !== this._header &&\n        tmpNode._value === tmpNode._next._value\n      ) {\n        tmpNode = tmpNode._next;\n        this._length -= 1;\n      }\n      curNode._next = tmpNode._next;\n      curNode._next._pre = curNode;\n      curNode = curNode._next;\n    }\n    return this._length;\n  }\n  sort(cmp?: (x: T, y: T) => number) {\n    if (this._length <= 1) return;\n    const arr: T[] = [];\n    this.forEach(function (el) {\n      arr.push(el);\n    });\n    arr.sort(cmp);\n    let curNode: LinkNode<T> = this._head;\n    arr.forEach(function (element) {\n      curNode._value = element;\n      curNode = curNode._next;\n    });\n  }\n  /**\n   * @description Merges two sorted lists.\n   * @param list - The other list you want to merge (must be sorted).\n   * @returns The size of list after merging.\n   * @example\n   * const linkA = new LinkList([1, 3, 5]);\n   * const linkB = new LinkList([2, 4, 6]);\n   * linkA.merge(linkB);  // [1, 2, 3, 4, 5];\n   */\n  merge(list: LinkList<T>) {\n    const self = this;\n    if (this._length === 0) {\n      list.forEach(function (el) {\n        self.pushBack(el);\n      });\n    } else {\n      let curNode = this._head;\n      list.forEach(function (el) {\n        while (\n          curNode !== self._header &&\n          curNode._value <= el\n        ) {\n          curNode = curNode._next;\n        }\n        self._insertNode(el, curNode._pre);\n      });\n    }\n    return this._length;\n  }\n  forEach(callback: (element: T, index: number, list: LinkList<T>) => void) {\n    let curNode = this._head;\n    let index = 0;\n    while (curNode !== this._header) {\n      callback(curNode._value, index++, this);\n      curNode = curNode._next;\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: LinkList<T>) {\n      if (this._length === 0) return;\n      let curNode = this._head;\n      while (curNode !== this._header) {\n        yield curNode._value;\n        curNode = curNode._next;\n      }\n    }.bind(this)();\n  }\n}\n\nexport default LinkList;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/Deque.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 54, 0, 55, 0, 36, 27, 18, 6, 1, 0, 60, 26,
        20, 27, 5, 12, 76, 5, 1, 0, 35, 38, 16, 19, 19, 19, 19, 19, 20, 26, 62,
        58, 62, 82, 13, 19, 52, 42, 43, 9, 40, 51, 51, 23, 32, 26, 12, 5, 9, 21,
        43, 37, 37, 9, 47, 36, 9, 42, 36, 9, 44, 19, 30, 37, 44, 9, 19, 26, 5,
        10, 33, 29, 22, 42, 28, 20, 31, 16, 34, 34, 10, 5, 13, 39, 19, 37, 38,
        5, 13, 42, 5, 11, 47, 5, 14, 54, 5, 12, 46, 5, 13, 33, 38, 5, 12, 33,
        38, 5, 17, 21, 38, 28, 45, 28, 27, 20, 27, 27, 13, 65, 9, 20, 35, 22, 5,
        15, 33, 41, 27, 29, 28, 36, 28, 36, 20, 36, 36, 13, 9, 20, 17, 5, 18,
        21, 29, 28, 36, 28, 36, 20, 36, 36, 13, 65, 9, 20, 35, 22, 5, 16, 33,
        41, 27, 38, 28, 45, 28, 27, 20, 27, 27, 13, 9, 20, 17, 5, 24, 38, 33, 9,
        74, 28, 5, 27, 38, 33, 9, 74, 25, 5, 25, 34, 33, 9, 22, 42, 34, 41, 16,
        25, 46, 48, 13, 28, 57, 67, 9, 22, 5, 12, 20, 25, 21, 9, 74, 19, 19, 23,
        22, 5, 26, 38, 33, 9, 87, 25, 50, 48, 13, 24, 27, 27, 36, 30, 16, 9, 22,
        5, 28, 35, 21, 42, 46, 35, 9, 27, 66, 31, 5, 31, 22, 34, 21, 17, 5, 13,
        42, 48, 50, 13, 9, 26, 5, 15, 18, 27, 23, 46, 61, 39, 19, 19, 9, 5, 14,
        26, 26, 9, 18, 40, 42, 46, 26, 22, 45, 13, 9, 42, 22, 5, 13, 21, 42, 44,
        9, 18, 71, 5, 19, 33, 21, 35, 22, 12, 57, 55, 20, 42, 43, 9, 63, 5, 16,
        42, 48, 9, 5, 25, 28, 46, 46, 13, 23, 5, 1, 0, 21, 0, 27, 33, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/SequentialContainer/container/SequentialContainer/Deque.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/src/container/SequentialContainer/Deque.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_Base",
          "_interopRequireDefault",
          "require",
          "_RandomIterator",
          "obj",
          "__esModule",
          "DequeIterator",
          "RandomIterator",
          "constructor",
          "node",
          "container",
          "iteratorType",
          "super",
          "this",
          "copy",
          "_node",
          "Deque",
          "SequentialContainer",
          "_bucketSize",
          "_first",
          "_curFirst",
          "_last",
          "_curLast",
          "_bucketNum",
          "_map",
          "_length",
          "length",
          "size",
          "TypeError",
          "Math",
          "max",
          "ceil",
          "i",
          "push",
          "Array",
          "needBucketNum",
          "self",
          "forEach",
          "element",
          "pushBack",
          "_reAllocate",
          "newMap",
          "addBucketNum",
          "_getElementIndex",
          "pos",
          "offset",
          "offsetRemainder",
          "curNodePointerIndex",
          "curNodeBucketIndex",
          "clear",
          "begin",
          "end",
          "rBegin",
          "rEnd",
          "front",
          "back",
          "popBack",
          "pushFront",
          "popFront",
          "getElementByPos",
          "RangeError",
          "setElementByPos",
          "insert",
          "num",
          "arr",
          "cut",
          "eraseElementByPos",
          "el",
          "eraseElementByValue",
          "eraseElementByIterator",
          "iter",
          "next",
          "find",
          "reverse",
          "l",
          "r",
          "tmp",
          "unique",
          "index",
          "pre",
          "cur",
          "sort",
          "cmp",
          "shrinkToFit",
          "callback",
          "Symbol",
          "iterator",
          "bind",
          "_default"
        ],
        "mappings": "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",
        "file": "Deque.js",
        "sourcesContent": [
          "import SequentialContainer from './Base';\nimport { RandomIterator } from \"./Base/RandomIterator\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport $getContainerSize from \"../../utils/getContainerSize.macro\";\nclass DequeIterator extends RandomIterator {\n    constructor(node, container, iteratorType) {\n        super(node, iteratorType);\n        this.container = container;\n    }\n    copy() {\n        return new DequeIterator(this._node, this.container, this.iteratorType);\n    }\n}\nclass Deque extends SequentialContainer {\n    constructor(container = [], _bucketSize = (1 << 12)) {\n        super();\n        /**\n         * @internal\n         */\n        this._first = 0;\n        /**\n         * @internal\n         */\n        this._curFirst = 0;\n        /**\n         * @internal\n         */\n        this._last = 0;\n        /**\n         * @internal\n         */\n        this._curLast = 0;\n        /**\n         * @internal\n         */\n        this._bucketNum = 0;\n        /**\n         * @internal\n         */\n        this._map = [];\n        const _length = (() => {\n            if (typeof container.length === \"number\")\n                return container.length;\n            if (typeof container.size === \"number\")\n                return container.size;\n            if (typeof container.size === \"function\")\n                return container.size();\n            throw new TypeError(\"Cannot get the length or size of the container\");\n        })();\n        this._bucketSize = _bucketSize;\n        this._bucketNum = Math.max(Math.ceil(_length / this._bucketSize), 1);\n        for (let i = 0; i < this._bucketNum; ++i) {\n            this._map.push(new Array(this._bucketSize));\n        }\n        const needBucketNum = Math.ceil(_length / this._bucketSize);\n        this._first = this._last = (this._bucketNum >> 1) - (needBucketNum >> 1);\n        this._curFirst = this._curLast = (this._bucketSize - _length % this._bucketSize) >> 1;\n        const self = this;\n        container.forEach(function (element) {\n            self.pushBack(element);\n        });\n    }\n    /**\n     * @description Growth the Deque.\n     * @internal\n     */\n    _reAllocate() {\n        const newMap = [];\n        const addBucketNum = Math.max(this._bucketNum >> 1, 1);\n        for (let i = 0; i < addBucketNum; ++i) {\n            newMap[i] = new Array(this._bucketSize);\n        }\n        for (let i = this._first; i < this._bucketNum; ++i) {\n            newMap[newMap.length] = this._map[i];\n        }\n        for (let i = 0; i < this._last; ++i) {\n            newMap[newMap.length] = this._map[i];\n        }\n        newMap[newMap.length] = [...this._map[this._last]];\n        this._first = addBucketNum;\n        this._last = newMap.length - 1;\n        for (let i = 0; i < addBucketNum; ++i) {\n            newMap[newMap.length] = new Array(this._bucketSize);\n        }\n        this._map = newMap;\n        this._bucketNum = newMap.length;\n    }\n    /**\n     * @description Get the bucket position of the element and the pointer position by index.\n     * @param pos - The element's index.\n     * @internal\n     */\n    _getElementIndex(pos) {\n        const offset = this._curFirst + pos + 1;\n        const offsetRemainder = offset % this._bucketSize;\n        let curNodePointerIndex = offsetRemainder - 1;\n        let curNodeBucketIndex = this._first + (offset - offsetRemainder) / this._bucketSize;\n        if (offsetRemainder === 0)\n            curNodeBucketIndex -= 1;\n        curNodeBucketIndex %= this._bucketNum;\n        if (curNodePointerIndex < 0)\n            curNodePointerIndex += this._bucketSize;\n        return { curNodeBucketIndex, curNodePointerIndex };\n    }\n    clear() {\n        this._map = [new Array(this._bucketSize)];\n        this._bucketNum = 1;\n        this._first = this._last = this._length = 0;\n        this._curFirst = this._curLast = this._bucketSize >> 1;\n    }\n    begin() {\n        return new DequeIterator(0, this);\n    }\n    end() {\n        return new DequeIterator(this._length, this);\n    }\n    rBegin() {\n        return new DequeIterator(this._length - 1, this, 1 /* IteratorType.REVERSE */);\n    }\n    rEnd() {\n        return new DequeIterator(-1, this, 1 /* IteratorType.REVERSE */);\n    }\n    front() {\n        if (this._length === 0)\n            return;\n        return this._map[this._first][this._curFirst];\n    }\n    back() {\n        if (this._length === 0)\n            return;\n        return this._map[this._last][this._curLast];\n    }\n    pushBack(element) {\n        if (this._length) {\n            if (this._curLast < this._bucketSize - 1) {\n                this._curLast += 1;\n            }\n            else if (this._last < this._bucketNum - 1) {\n                this._last += 1;\n                this._curLast = 0;\n            }\n            else {\n                this._last = 0;\n                this._curLast = 0;\n            }\n            if (this._last === this._first &&\n                this._curLast === this._curFirst)\n                this._reAllocate();\n        }\n        this._length += 1;\n        this._map[this._last][this._curLast] = element;\n        return this._length;\n    }\n    popBack() {\n        if (this._length === 0)\n            return;\n        const value = this._map[this._last][this._curLast];\n        if (this._length !== 1) {\n            if (this._curLast > 0) {\n                this._curLast -= 1;\n            }\n            else if (this._last > 0) {\n                this._last -= 1;\n                this._curLast = this._bucketSize - 1;\n            }\n            else {\n                this._last = this._bucketNum - 1;\n                this._curLast = this._bucketSize - 1;\n            }\n        }\n        this._length -= 1;\n        return value;\n    }\n    /**\n     * @description Push the element to the front.\n     * @param element - The element you want to push.\n     * @returns The size of queue after pushing.\n     */\n    pushFront(element) {\n        if (this._length) {\n            if (this._curFirst > 0) {\n                this._curFirst -= 1;\n            }\n            else if (this._first > 0) {\n                this._first -= 1;\n                this._curFirst = this._bucketSize - 1;\n            }\n            else {\n                this._first = this._bucketNum - 1;\n                this._curFirst = this._bucketSize - 1;\n            }\n            if (this._first === this._last &&\n                this._curFirst === this._curLast)\n                this._reAllocate();\n        }\n        this._length += 1;\n        this._map[this._first][this._curFirst] = element;\n        return this._length;\n    }\n    /**\n     * @description Remove the _first element.\n     * @returns The element you popped.\n     */\n    popFront() {\n        if (this._length === 0)\n            return;\n        const value = this._map[this._first][this._curFirst];\n        if (this._length !== 1) {\n            if (this._curFirst < this._bucketSize - 1) {\n                this._curFirst += 1;\n            }\n            else if (this._first < this._bucketNum - 1) {\n                this._first += 1;\n                this._curFirst = 0;\n            }\n            else {\n                this._first = 0;\n                this._curFirst = 0;\n            }\n        }\n        this._length -= 1;\n        return value;\n    }\n    getElementByPos(pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        const { curNodeBucketIndex, curNodePointerIndex } = this._getElementIndex(pos);\n        return this._map[curNodeBucketIndex][curNodePointerIndex];\n    }\n    setElementByPos(pos, element) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        const { curNodeBucketIndex, curNodePointerIndex } = this._getElementIndex(pos);\n        this._map[curNodeBucketIndex][curNodePointerIndex] = element;\n    }\n    insert(pos, element, num = 1) {\n        if (pos < 0 || pos > this._length) {\n            throw new RangeError();\n        }\n        if (pos === 0) {\n            while (num--)\n                this.pushFront(element);\n        }\n        else if (pos === this._length) {\n            while (num--)\n                this.pushBack(element);\n        }\n        else {\n            const arr = [];\n            for (let i = pos; i < this._length; ++i) {\n                arr.push(this.getElementByPos(i));\n            }\n            this.cut(pos - 1);\n            for (let i = 0; i < num; ++i)\n                this.pushBack(element);\n            for (let i = 0; i < arr.length; ++i)\n                this.pushBack(arr[i]);\n        }\n        return this._length;\n    }\n    /**\n     * @description Remove all elements after the specified position (excluding the specified position).\n     * @param pos - The previous position of the first removed element.\n     * @returns The size of the container after cutting.\n     * @example\n     * deque.cut(1); // Then deque's size will be 2. deque -> [0, 1]\n     */\n    cut(pos) {\n        if (pos < 0) {\n            this.clear();\n            return 0;\n        }\n        const { curNodeBucketIndex, curNodePointerIndex } = this._getElementIndex(pos);\n        this._last = curNodeBucketIndex;\n        this._curLast = curNodePointerIndex;\n        this._length = pos + 1;\n        return this._length;\n    }\n    eraseElementByPos(pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        if (pos === 0)\n            this.popFront();\n        else if (pos === this._length - 1)\n            this.popBack();\n        else {\n            const arr = [];\n            for (let i = pos + 1; i < this._length; ++i) {\n                arr.push(this.getElementByPos(i));\n            }\n            this.cut(pos);\n            this.popBack();\n            const self = this;\n            arr.forEach(function (el) {\n                self.pushBack(el);\n            });\n        }\n        return this._length;\n    }\n    eraseElementByValue(value) {\n        if (this._length === 0)\n            return 0;\n        const arr = [];\n        for (let i = 0; i < this._length; ++i) {\n            const element = this.getElementByPos(i);\n            if (element !== value)\n                arr.push(element);\n        }\n        const _length = arr.length;\n        for (let i = 0; i < _length; ++i)\n            this.setElementByPos(i, arr[i]);\n        return this.cut(_length - 1);\n    }\n    eraseElementByIterator(iter) {\n        const _node = iter._node;\n        this.eraseElementByPos(_node);\n        iter = iter.next();\n        return iter;\n    }\n    find(element) {\n        for (let i = 0; i < this._length; ++i) {\n            if (this.getElementByPos(i) === element) {\n                return new DequeIterator(i, this);\n            }\n        }\n        return this.end();\n    }\n    reverse() {\n        let l = 0;\n        let r = this._length - 1;\n        while (l < r) {\n            const tmp = this.getElementByPos(l);\n            this.setElementByPos(l, this.getElementByPos(r));\n            this.setElementByPos(r, tmp);\n            l += 1;\n            r -= 1;\n        }\n    }\n    unique() {\n        if (this._length <= 1) {\n            return this._length;\n        }\n        let index = 1;\n        let pre = this.getElementByPos(0);\n        for (let i = 1; i < this._length; ++i) {\n            const cur = this.getElementByPos(i);\n            if (cur !== pre) {\n                pre = cur;\n                this.setElementByPos(index++, cur);\n            }\n        }\n        while (this._length > index)\n            this.popBack();\n        return this._length;\n    }\n    sort(cmp) {\n        const arr = [];\n        for (let i = 0; i < this._length; ++i) {\n            arr.push(this.getElementByPos(i));\n        }\n        arr.sort(cmp);\n        for (let i = 0; i < this._length; ++i)\n            this.setElementByPos(i, arr[i]);\n    }\n    /**\n     * @description Remove as much useless space as possible.\n     */\n    shrinkToFit() {\n        if (this._length === 0)\n            return;\n        const arr = [];\n        this.forEach(function (el) {\n            arr.push(el);\n        });\n        this._bucketNum = Math.max(Math.ceil(this._length / this._bucketSize), 1);\n        this._length = this._first = this._last = this._curFirst = this._curLast = 0;\n        this._map = [];\n        for (let i = 0; i < this._bucketNum; ++i) {\n            this._map.push(new Array(this._bucketSize));\n        }\n        for (let i = 0; i < arr.length; ++i)\n            this.pushBack(arr[i]);\n    }\n    forEach(callback) {\n        for (let i = 0; i < this._length; ++i) {\n            callback(this.getElementByPos(i), i, this);\n        }\n    }\n    [Symbol.iterator]() {\n        return function* () {\n            for (let i = 0; i < this._length; ++i) {\n                yield this.getElementByPos(i);\n            }\n        }.bind(this)();\n    }\n}\nexport default Deque;\n",
          "import SequentialContainer from './Base';\nimport { IteratorType, initContainer } from '@/container/ContainerBase';\nimport { RandomIterator } from '@/container/SequentialContainer/Base/RandomIterator';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport $getContainerSize from '@/utils/getContainerSize.macro';\n\nclass DequeIterator<T> extends RandomIterator<T> {\n  readonly container: Deque<T>;\n  constructor(node: number, container: Deque<T>, iteratorType?: IteratorType) {\n    super(node, iteratorType);\n    this.container = container;\n  }\n  copy() {\n    return new DequeIterator<T>(this._node, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: DequeIterator<T>): boolean;\n}\n\nexport type { DequeIterator };\n\nclass Deque<T> extends SequentialContainer<T> {\n  /**\n   * @internal\n   */\n  private _first = 0;\n  /**\n   * @internal\n   */\n  private _curFirst = 0;\n  /**\n   * @internal\n   */\n  private _last = 0;\n  /**\n   * @internal\n   */\n  private _curLast = 0;\n  /**\n   * @internal\n   */\n  private _bucketNum = 0;\n  /**\n   * @internal\n   */\n  private readonly _bucketSize: number;\n  /**\n   * @internal\n   */\n  private _map: T[][] = [];\n  constructor(container: initContainer<T> = [], _bucketSize = (1 << 12)) {\n    super();\n    const _length = $getContainerSize!(container);\n    this._bucketSize = _bucketSize;\n    this._bucketNum = Math.max(Math.ceil(_length / this._bucketSize), 1);\n    for (let i = 0; i < this._bucketNum; ++i) {\n      this._map.push(new Array(this._bucketSize));\n    }\n    const needBucketNum = Math.ceil(_length / this._bucketSize);\n    this._first = this._last = (this._bucketNum >> 1) - (needBucketNum >> 1);\n    this._curFirst = this._curLast = (this._bucketSize - _length % this._bucketSize) >> 1;\n    const self = this;\n    container.forEach(function (element) {\n      self.pushBack(element);\n    });\n  }\n  /**\n   * @description Growth the Deque.\n   * @internal\n   */\n  private _reAllocate() {\n    const newMap = [];\n    const addBucketNum = Math.max(this._bucketNum >> 1, 1);\n    for (let i = 0; i < addBucketNum; ++i) {\n      newMap[i] = new Array(this._bucketSize);\n    }\n    for (let i = this._first; i < this._bucketNum; ++i) {\n      newMap[newMap.length] = this._map[i];\n    }\n    for (let i = 0; i < this._last; ++i) {\n      newMap[newMap.length] = this._map[i];\n    }\n    newMap[newMap.length] = [...this._map[this._last]];\n    this._first = addBucketNum;\n    this._last = newMap.length - 1;\n    for (let i = 0; i < addBucketNum; ++i) {\n      newMap[newMap.length] = new Array(this._bucketSize);\n    }\n    this._map = newMap;\n    this._bucketNum = newMap.length;\n  }\n  /**\n   * @description Get the bucket position of the element and the pointer position by index.\n   * @param pos - The element's index.\n   * @internal\n   */\n  private _getElementIndex(pos: number) {\n    const offset = this._curFirst + pos + 1;\n    const offsetRemainder = offset % this._bucketSize;\n    let curNodePointerIndex = offsetRemainder - 1;\n    let curNodeBucketIndex = this._first + (offset - offsetRemainder) / this._bucketSize;\n    if (offsetRemainder === 0) curNodeBucketIndex -= 1;\n    curNodeBucketIndex %= this._bucketNum;\n    if (curNodePointerIndex < 0) curNodePointerIndex += this._bucketSize;\n    return { curNodeBucketIndex, curNodePointerIndex };\n  }\n  clear() {\n    this._map = [new Array(this._bucketSize)];\n    this._bucketNum = 1;\n    this._first = this._last = this._length = 0;\n    this._curFirst = this._curLast = this._bucketSize >> 1;\n  }\n  begin() {\n    return new DequeIterator<T>(0, this);\n  }\n  end() {\n    return new DequeIterator<T>(this._length, this);\n  }\n  rBegin() {\n    return new DequeIterator<T>(this._length - 1, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new DequeIterator<T>(-1, this, IteratorType.REVERSE);\n  }\n  front(): T | undefined {\n    if (this._length === 0) return;\n    return this._map[this._first][this._curFirst];\n  }\n  back(): T | undefined {\n    if (this._length === 0) return;\n    return this._map[this._last][this._curLast];\n  }\n  pushBack(element: T) {\n    if (this._length) {\n      if (this._curLast < this._bucketSize - 1) {\n        this._curLast += 1;\n      } else if (this._last < this._bucketNum - 1) {\n        this._last += 1;\n        this._curLast = 0;\n      } else {\n        this._last = 0;\n        this._curLast = 0;\n      }\n      if (\n        this._last === this._first &&\n        this._curLast === this._curFirst\n      ) this._reAllocate();\n    }\n    this._length += 1;\n    this._map[this._last][this._curLast] = element;\n    return this._length;\n  }\n  popBack() {\n    if (this._length === 0) return;\n    const value = this._map[this._last][this._curLast];\n    if (this._length !== 1) {\n      if (this._curLast > 0) {\n        this._curLast -= 1;\n      } else if (this._last > 0) {\n        this._last -= 1;\n        this._curLast = this._bucketSize - 1;\n      } else {\n        this._last = this._bucketNum - 1;\n        this._curLast = this._bucketSize - 1;\n      }\n    }\n    this._length -= 1;\n    return value;\n  }\n  /**\n   * @description Push the element to the front.\n   * @param element - The element you want to push.\n   * @returns The size of queue after pushing.\n   */\n  pushFront(element: T) {\n    if (this._length) {\n      if (this._curFirst > 0) {\n        this._curFirst -= 1;\n      } else if (this._first > 0) {\n        this._first -= 1;\n        this._curFirst = this._bucketSize - 1;\n      } else {\n        this._first = this._bucketNum - 1;\n        this._curFirst = this._bucketSize - 1;\n      }\n      if (\n        this._first === this._last &&\n        this._curFirst === this._curLast\n      ) this._reAllocate();\n    }\n    this._length += 1;\n    this._map[this._first][this._curFirst] = element;\n    return this._length;\n  }\n  /**\n   * @description Remove the _first element.\n   * @returns The element you popped.\n   */\n  popFront() {\n    if (this._length === 0) return;\n    const value = this._map[this._first][this._curFirst];\n    if (this._length !== 1) {\n      if (this._curFirst < this._bucketSize - 1) {\n        this._curFirst += 1;\n      } else if (this._first < this._bucketNum - 1) {\n        this._first += 1;\n        this._curFirst = 0;\n      } else {\n        this._first = 0;\n        this._curFirst = 0;\n      }\n    }\n    this._length -= 1;\n    return value;\n  }\n  getElementByPos(pos: number): T {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    const {\n      curNodeBucketIndex,\n      curNodePointerIndex\n    } = this._getElementIndex(pos);\n    return this._map[curNodeBucketIndex][curNodePointerIndex]!;\n  }\n  setElementByPos(pos: number, element: T) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    const {\n      curNodeBucketIndex,\n      curNodePointerIndex\n    } = this._getElementIndex(pos);\n    this._map[curNodeBucketIndex][curNodePointerIndex] = element;\n  }\n  insert(pos: number, element: T, num = 1) {\n    $checkWithinAccessParams!(pos, 0, this._length);\n    if (pos === 0) {\n      while (num--) this.pushFront(element);\n    } else if (pos === this._length) {\n      while (num--) this.pushBack(element);\n    } else {\n      const arr: T[] = [];\n      for (let i = pos; i < this._length; ++i) {\n        arr.push(this.getElementByPos(i));\n      }\n      this.cut(pos - 1);\n      for (let i = 0; i < num; ++i) this.pushBack(element);\n      for (let i = 0; i < arr.length; ++i) this.pushBack(arr[i]);\n    }\n    return this._length;\n  }\n  /**\n   * @description Remove all elements after the specified position (excluding the specified position).\n   * @param pos - The previous position of the first removed element.\n   * @returns The size of the container after cutting.\n   * @example\n   * deque.cut(1); // Then deque's size will be 2. deque -> [0, 1]\n   */\n  cut(pos: number) {\n    if (pos < 0) {\n      this.clear();\n      return 0;\n    }\n    const {\n      curNodeBucketIndex,\n      curNodePointerIndex\n    } = this._getElementIndex(pos);\n    this._last = curNodeBucketIndex;\n    this._curLast = curNodePointerIndex;\n    this._length = pos + 1;\n    return this._length;\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    if (pos === 0) this.popFront();\n    else if (pos === this._length - 1) this.popBack();\n    else {\n      const arr = [];\n      for (let i = pos + 1; i < this._length; ++i) {\n        arr.push(this.getElementByPos(i));\n      }\n      this.cut(pos);\n      this.popBack();\n      const self = this;\n      arr.forEach(function (el) {\n        self.pushBack(el);\n      });\n    }\n    return this._length;\n  }\n  eraseElementByValue(value: T) {\n    if (this._length === 0) return 0;\n    const arr: T[] = [];\n    for (let i = 0; i < this._length; ++i) {\n      const element = this.getElementByPos(i);\n      if (element !== value) arr.push(element);\n    }\n    const _length = arr.length;\n    for (let i = 0; i < _length; ++i) this.setElementByPos(i, arr[i]);\n    return this.cut(_length - 1);\n  }\n  eraseElementByIterator(iter: DequeIterator<T>) {\n    const _node = iter._node;\n    this.eraseElementByPos(_node);\n    iter = iter.next();\n    return iter;\n  }\n  find(element: T) {\n    for (let i = 0; i < this._length; ++i) {\n      if (this.getElementByPos(i) === element) {\n        return new DequeIterator<T>(i, this);\n      }\n    }\n    return this.end();\n  }\n  reverse() {\n    let l = 0; let r = this._length - 1;\n    while (l < r) {\n      const tmp = this.getElementByPos(l);\n      this.setElementByPos(l, this.getElementByPos(r));\n      this.setElementByPos(r, tmp);\n      l += 1;\n      r -= 1;\n    }\n  }\n  unique() {\n    if (this._length <= 1) {\n      return this._length;\n    }\n    let index = 1;\n    let pre = this.getElementByPos(0);\n    for (let i = 1; i < this._length; ++i) {\n      const cur = this.getElementByPos(i);\n      if (cur !== pre) {\n        pre = cur;\n        this.setElementByPos(index++, cur);\n      }\n    }\n    while (this._length > index) this.popBack();\n    return this._length;\n  }\n  sort(cmp?: (x: T, y: T) => number) {\n    const arr: T[] = [];\n    for (let i = 0; i < this._length; ++i) {\n      arr.push(this.getElementByPos(i));\n    }\n    arr.sort(cmp);\n    for (let i = 0; i < this._length; ++i) this.setElementByPos(i, arr[i]);\n  }\n  /**\n   * @description Remove as much useless space as possible.\n   */\n  shrinkToFit() {\n    if (this._length === 0) return;\n    const arr: T[] = [];\n    this.forEach(function (el) {\n      arr.push(el);\n    });\n    this._bucketNum = Math.max(Math.ceil(this._length / this._bucketSize), 1);\n    this._length = this._first = this._last = this._curFirst = this._curLast = 0;\n    this._map = [];\n    for (let i = 0; i < this._bucketNum; ++i) {\n      this._map.push(new Array(this._bucketSize));\n    }\n    for (let i = 0; i < arr.length; ++i) this.pushBack(arr[i]);\n  }\n  forEach(callback: (element: T, index: number, deque: Deque<T>) => void) {\n    for (let i = 0; i < this._length; ++i) {\n      callback(this.getElementByPos(i), i, this);\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: Deque<T>) {\n      for (let i = 0; i < this._length; ++i) {\n        yield this.getElementByPos(i);\n      }\n    }.bind(this)();\n  }\n}\n\nexport default Deque;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/OrderedSet.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 54, 0, 75, 0, 52, 0, 36, 27, 18, 6, 1, 0,
        56, 29, 23, 27, 5, 19, 32, 56, 9, 24, 5, 12, 89, 5, 1, 0, 40, 31, 20,
        23, 32, 24, 12, 5, 12, 36, 27, 18, 27, 5, 13, 72, 5, 11, 60, 5, 14, 75,
        5, 12, 63, 5, 13, 49, 5, 12, 49, 5, 18, 39, 5, 13, 36, 55, 5, 19, 36,
        55, 5, 19, 36, 55, 5, 26, 36, 55, 5, 26, 37, 55, 5, 14, 23, 32, 24, 12,
        22, 5, 25, 30, 5, 1, 0, 26, 0, 27, 38, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/container/TreeContainer/OrderedSet.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/src/container/TreeContainer/OrderedSet.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_Base",
          "_interopRequireDefault",
          "require",
          "_TreeIterator",
          "_throwError",
          "obj",
          "__esModule",
          "OrderedSetIterator",
          "TreeIterator",
          "constructor",
          "node",
          "header",
          "container",
          "iteratorType",
          "super",
          "this",
          "pointer",
          "_node",
          "_header",
          "throwIteratorAccessError",
          "_key",
          "copy",
          "OrderedSet",
          "TreeContainer",
          "cmp",
          "enableIndex",
          "self",
          "forEach",
          "el",
          "insert",
          "K",
          "curNode",
          "undefined",
          "_iterationFunc",
          "_left",
          "_right",
          "begin",
          "end",
          "rBegin",
          "rEnd",
          "front",
          "back",
          "key",
          "hint",
          "_set",
          "find",
          "element",
          "resNode",
          "_findElementNode",
          "_root",
          "lowerBound",
          "_lowerBound",
          "upperBound",
          "_upperBound",
          "reverseLowerBound",
          "_reverseLowerBound",
          "reverseUpperBound",
          "_reverseUpperBound",
          "union",
          "other",
          "_length",
          "Symbol",
          "iterator",
          "_default"
        ],
        "mappings": "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",
        "file": "OrderedSet.js",
        "sourcesContent": [
          "import TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nclass OrderedSetIterator extends TreeIterator {\n    constructor(node, header, container, iteratorType) {\n        super(node, header, iteratorType);\n        this.container = container;\n    }\n    get pointer() {\n        if (this._node === this._header) {\n            throwIteratorAccessError();\n        }\n        return this._node._key;\n    }\n    copy() {\n        return new OrderedSetIterator(this._node, this._header, this.container, this.iteratorType);\n    }\n}\nclass OrderedSet extends TreeContainer {\n    /**\n     * @param container - The initialization container.\n     * @param cmp - The compare function.\n     * @param enableIndex - Whether to enable iterator indexing function.\n     * @example\n     * new OrderedSet();\n     * new OrderedSet([0, 1, 2]);\n     * new OrderedSet([0, 1, 2], (x, y) => x - y);\n     * new OrderedSet([0, 1, 2], (x, y) => x - y, true);\n     */\n    constructor(container = [], cmp, enableIndex) {\n        super(cmp, enableIndex);\n        const self = this;\n        container.forEach(function (el) {\n            self.insert(el);\n        });\n    }\n    /**\n     * @internal\n     */\n    *_iterationFunc(curNode) {\n        if (curNode === undefined)\n            return;\n        yield* this._iterationFunc(curNode._left);\n        yield curNode._key;\n        yield* this._iterationFunc(curNode._right);\n    }\n    begin() {\n        return new OrderedSetIterator(this._header._left || this._header, this._header, this);\n    }\n    end() {\n        return new OrderedSetIterator(this._header, this._header, this);\n    }\n    rBegin() {\n        return new OrderedSetIterator(this._header._right || this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    }\n    rEnd() {\n        return new OrderedSetIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    }\n    front() {\n        return this._header._left ? this._header._left._key : undefined;\n    }\n    back() {\n        return this._header._right ? this._header._right._key : undefined;\n    }\n    /**\n     * @description Insert element to set.\n     * @param key - The key want to insert.\n     * @param hint - You can give an iterator hint to improve insertion efficiency.\n     * @return The size of container after setting.\n     * @example\n     * const st = new OrderedSet([2, 4, 5]);\n     * const iter = st.begin();\n     * st.insert(1);\n     * st.insert(3, iter);  // give a hint will be faster.\n     */\n    insert(key, hint) {\n        return this._set(key, undefined, hint);\n    }\n    find(element) {\n        const resNode = this._findElementNode(this._root, element);\n        return new OrderedSetIterator(resNode, this._header, this);\n    }\n    lowerBound(key) {\n        const resNode = this._lowerBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    }\n    upperBound(key) {\n        const resNode = this._upperBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    }\n    reverseLowerBound(key) {\n        const resNode = this._reverseLowerBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    }\n    reverseUpperBound(key) {\n        const resNode = this._reverseUpperBound(this._root, key);\n        return new OrderedSetIterator(resNode, this._header, this);\n    }\n    union(other) {\n        const self = this;\n        other.forEach(function (el) {\n            self.insert(el);\n        });\n        return this._length;\n    }\n    [Symbol.iterator]() {\n        return this._iterationFunc(this._root);\n    }\n}\nexport default OrderedSet;\n",
          "import TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport { TreeNode } from './Base/TreeNode';\nimport { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass OrderedSetIterator<K> extends TreeIterator<K, undefined> {\n  container: OrderedSet<K>;\n  constructor(\n    node: TreeNode<K, undefined>,\n    header: TreeNode<K, undefined>,\n    container: OrderedSet<K>,\n    iteratorType?: IteratorType\n  ) {\n    super(node, header, iteratorType);\n    this.container = container;\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    return this._node._key!;\n  }\n  copy() {\n    return new OrderedSetIterator<K>(\n      this._node,\n      this._header,\n      this.container,\n      this.iteratorType\n    );\n  }\n  // @ts-ignore\n  equals(iter: OrderedSetIterator<K>): boolean;\n}\n\nexport type { OrderedSetIterator };\n\nclass OrderedSet<K> extends TreeContainer<K, undefined> {\n  /**\n   * @param container - The initialization container.\n   * @param cmp - The compare function.\n   * @param enableIndex - Whether to enable iterator indexing function.\n   * @example\n   * new OrderedSet();\n   * new OrderedSet([0, 1, 2]);\n   * new OrderedSet([0, 1, 2], (x, y) => x - y);\n   * new OrderedSet([0, 1, 2], (x, y) => x - y, true);\n   */\n  constructor(\n    container: initContainer<K> = [],\n    cmp?: (x: K, y: K) => number,\n    enableIndex?: boolean\n  ) {\n    super(cmp, enableIndex);\n    const self = this;\n    container.forEach(function (el) {\n      self.insert(el);\n    });\n  }\n  /**\n   * @internal\n   */\n  private * _iterationFunc(\n    curNode: TreeNode<K, undefined> | undefined\n  ): Generator<K, void> {\n    if (curNode === undefined) return;\n    yield * this._iterationFunc(curNode._left);\n    yield curNode._key!;\n    yield * this._iterationFunc(curNode._right);\n  }\n  begin() {\n    return new OrderedSetIterator<K>(\n      this._header._left || this._header,\n      this._header,\n      this\n    );\n  }\n  end() {\n    return new OrderedSetIterator<K>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new OrderedSetIterator<K>(\n      this._header._right || this._header,\n      this._header,\n      this,\n      IteratorType.REVERSE\n    );\n  }\n  rEnd() {\n    return new OrderedSetIterator<K>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front() {\n    return this._header._left ? this._header._left._key : undefined;\n  }\n  back() {\n    return this._header._right ? this._header._right._key : undefined;\n  }\n  /**\n   * @description Insert element to set.\n   * @param key - The key want to insert.\n   * @param hint - You can give an iterator hint to improve insertion efficiency.\n   * @return The size of container after setting.\n   * @example\n   * const st = new OrderedSet([2, 4, 5]);\n   * const iter = st.begin();\n   * st.insert(1);\n   * st.insert(3, iter);  // give a hint will be faster.\n   */\n  insert(key: K, hint?: OrderedSetIterator<K>) {\n    return this._set(key, undefined, hint);\n  }\n  find(element: K) {\n    const resNode = this._findElementNode(this._root, element);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  lowerBound(key: K) {\n    const resNode = this._lowerBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  upperBound(key: K) {\n    const resNode = this._upperBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  reverseLowerBound(key: K) {\n    const resNode = this._reverseLowerBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  reverseUpperBound(key: K) {\n    const resNode = this._reverseUpperBound(this._root, key);\n    return new OrderedSetIterator<K>(resNode, this._header, this);\n  }\n  union(other: OrderedSet<K>) {\n    const self = this;\n    other.forEach(function (el) {\n      self.insert(el);\n    });\n    return this._length;\n  }\n  [Symbol.iterator]() {\n    return this._iterationFunc(this._root);\n  }\n  // @ts-ignore\n  eraseElementByIterator(iter: OrderedSetIterator<K>): OrderedSetIterator<K>;\n  // @ts-ignore\n  forEach(callback: (element: K, index: number, tree: OrderedSet<K>) => void): void;\n  // @ts-ignore\n  getElementByPos(pos: number): K;\n}\n\nexport default OrderedSet;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/Base/index.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 38, 0, 52, 0, 55, 0, 54, 36, 29, 28, 17, 19,
        16, 27, 19, 16, 52, 40, 43, 24, 33, 42, 34, 33, 21, 41, 28, 78, 31, 31,
        31, 21, 17, 30, 14, 34, 35, 38, 30, 29, 17, 14, 16, 41, 40, 43, 34, 30,
        14, 29, 9, 29, 5, 13, 23, 19, 37, 24, 24, 31, 22, 24, 28, 9, 17, 5, 13,
        23, 19, 37, 25, 24, 20, 22, 24, 13, 9, 17, 5, 13, 23, 19, 37, 24, 22,
        24, 31, 24, 28, 9, 17, 5, 14, 23, 19, 37, 24, 22, 24, 20, 24, 13, 9, 17,
        5, 11, 22, 27, 37, 29, 25, 23, 13, 28, 30, 33, 29, 29, 39, 40, 34, 24,
        46, 36, 33, 35, 43, 44, 38, 31, 53, 33, 35, 31, 28, 33, 30, 21, 17, 20,
        30, 33, 29, 29, 39, 40, 34, 24, 46, 36, 33, 35, 43, 44, 38, 31, 53, 33,
        35, 31, 28, 33, 30, 21, 17, 13, 9, 5, 11, 27, 25, 26, 9, 18, 28, 22, 24,
        36, 20, 24, 13, 38, 38, 18, 9, 29, 28, 36, 28, 9, 19, 23, 24, 28, 31,
        20, 22, 17, 5, 14, 42, 34, 27, 30, 31, 5, 11, 22, 27, 35, 27, 28, 30,
        38, 36, 45, 29, 26, 29, 39, 29, 40, 40, 30, 30, 28, 28, 39, 35, 38, 28,
        39, 40, 36, 39, 21, 32, 29, 29, 29, 28, 38, 39, 34, 22, 24, 29, 39, 40,
        34, 29, 17, 20, 30, 38, 36, 45, 29, 26, 29, 39, 29, 40, 40, 30, 30, 28,
        28, 39, 35, 38, 28, 39, 40, 36, 39, 21, 32, 29, 29, 29, 28, 38, 39, 34,
        22, 24, 29, 39, 40, 34, 29, 17, 13, 19, 9, 5, 17, 35, 24, 39, 26, 31,
        31, 30, 30, 19, 9, 14, 27, 33, 22, 20, 19, 27, 36, 23, 20, 25, 16, 31,
        37, 26, 24, 23, 31, 40, 27, 24, 29, 20, 38, 34, 39, 49, 38, 36, 35, 43,
        44, 53, 42, 40, 39, 47, 54, 56, 44, 45, 40, 44, 45, 33, 29, 25, 21, 17,
        38, 31, 34, 49, 36, 52, 56, 43, 40, 38, 29, 36, 43, 52, 56, 43, 40, 38,
        29, 36, 32, 36, 35, 25, 21, 17, 13, 9, 20, 17, 5, 13, 19, 37, 24, 24,
        31, 24, 28, 9, 27, 5, 13, 19, 27, 30, 40, 5, 31, 22, 27, 56, 9, 27, 20,
        24, 9, 29, 41, 24, 28, 13, 25, 9, 29, 41, 24, 28, 13, 25, 9, 26, 44, 26,
        44, 16, 20, 5, 26, 38, 33, 9, 18, 23, 38, 26, 23, 28, 13, 19, 25, 12,
        22, 5, 26, 39, 36, 39, 18, 20, 5, 31, 22, 27, 56, 9, 36, 39, 16, 28, 16,
        50, 9, 18, 17, 5, 16, 18, 46, 5, 24, 38, 33, 9, 14, 18, 31, 26, 22, 22,
        13, 19, 9, 17, 5, 17, 35, 39, 29, 64, 10, 33, 5, 1, 0, 29, 0, 27, 33, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/Base/container/TreeContainer/Base/index.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/src/container/TreeContainer/Base/index.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_TreeNode",
          "require",
          "_ContainerBase",
          "_throwError",
          "TreeContainer",
          "Container",
          "constructor",
          "cmp",
          "x",
          "y",
          "enableIndex",
          "super",
          "this",
          "_root",
          "undefined",
          "_cmp",
          "_TreeNodeClass",
          "TreeNodeEnableIndex",
          "_set",
          "key",
          "hint",
          "curNode",
          "_preSet",
          "p",
          "_parent",
          "_header",
          "_subTreeSize",
          "nodeList",
          "_insertNodeSelfBalance",
          "parentNode",
          "grandParent",
          "_recount",
          "_length",
          "_eraseNode",
          "_preEraseNode",
          "TreeNode",
          "_lowerBound",
          "resNode",
          "cmpResult",
          "_key",
          "_right",
          "_left",
          "_upperBound",
          "_reverseLowerBound",
          "_reverseUpperBound",
          "_eraseNodeSelfBalance",
          "_color",
          "brother",
          "_rotateLeft",
          "_rotateRight",
          "clear",
          "swapNode",
          "_value",
          "_inOrderTraversal",
          "callback",
          "ifReturn",
          "uncle",
          "GP",
          "minNode",
          "compareToMin",
          "maxNode",
          "compareToMax",
          "iterNode",
          "_node",
          "iterCmpRes",
          "preNode",
          "_pre",
          "preCmpRes",
          "_findElementNode",
          "updateKeyByIterator",
          "iter",
          "node",
          "throwIteratorAccessError",
          "_next",
          "preKey",
          "nextKey",
          "eraseElementByPos",
          "pos",
          "RangeError",
          "index",
          "self",
          "eraseElementByKey",
          "eraseElementByIterator",
          "hasNoRight",
          "isNormal",
          "iteratorType",
          "next",
          "forEach",
          "element",
          "getElementByPos",
          "res",
          "getHeight",
          "traversal",
          "Math",
          "max",
          "_default"
        ],
        "mappings": "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",
        "file": "index.js",
        "sourcesContent": [
          "import { TreeNode, TreeNodeEnableIndex } from './TreeNode';\nimport { Container } from \"../../ContainerBase\";\nimport $checkWithinAccessParams from \"../../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nclass TreeContainer extends Container {\n    /**\n     * @internal\n     */\n    constructor(cmp = function (x, y) {\n        if (x < y)\n            return -1;\n        if (x > y)\n            return 1;\n        return 0;\n    }, enableIndex = false) {\n        super();\n        /**\n         * @internal\n         */\n        this._root = undefined;\n        this._cmp = cmp;\n        if (enableIndex) {\n            this._TreeNodeClass = TreeNodeEnableIndex;\n            this._set = function (key, value, hint) {\n                const curNode = this._preSet(key, value, hint);\n                if (curNode) {\n                    let p = curNode._parent;\n                    while (p !== this._header) {\n                        p._subTreeSize += 1;\n                        p = p._parent;\n                    }\n                    const nodeList = this._insertNodeSelfBalance(curNode);\n                    if (nodeList) {\n                        const { parentNode, grandParent, curNode } = nodeList;\n                        parentNode._recount();\n                        grandParent._recount();\n                        curNode._recount();\n                    }\n                }\n                return this._length;\n            };\n            this._eraseNode = function (curNode) {\n                let p = this._preEraseNode(curNode);\n                while (p !== this._header) {\n                    p._subTreeSize -= 1;\n                    p = p._parent;\n                }\n            };\n        }\n        else {\n            this._TreeNodeClass = TreeNode;\n            this._set = function (key, value, hint) {\n                const curNode = this._preSet(key, value, hint);\n                if (curNode)\n                    this._insertNodeSelfBalance(curNode);\n                return this._length;\n            };\n            this._eraseNode = this._preEraseNode;\n        }\n        this._header = new this._TreeNodeClass();\n    }\n    /**\n     * @internal\n     */\n    _lowerBound(curNode, key) {\n        let resNode = this._header;\n        while (curNode) {\n            const cmpResult = this._cmp(curNode._key, key);\n            if (cmpResult < 0) {\n                curNode = curNode._right;\n            }\n            else if (cmpResult > 0) {\n                resNode = curNode;\n                curNode = curNode._left;\n            }\n            else\n                return curNode;\n        }\n        return resNode;\n    }\n    /**\n     * @internal\n     */\n    _upperBound(curNode, key) {\n        let resNode = this._header;\n        while (curNode) {\n            const cmpResult = this._cmp(curNode._key, key);\n            if (cmpResult <= 0) {\n                curNode = curNode._right;\n            }\n            else {\n                resNode = curNode;\n                curNode = curNode._left;\n            }\n        }\n        return resNode;\n    }\n    /**\n     * @internal\n     */\n    _reverseLowerBound(curNode, key) {\n        let resNode = this._header;\n        while (curNode) {\n            const cmpResult = this._cmp(curNode._key, key);\n            if (cmpResult < 0) {\n                resNode = curNode;\n                curNode = curNode._right;\n            }\n            else if (cmpResult > 0) {\n                curNode = curNode._left;\n            }\n            else\n                return curNode;\n        }\n        return resNode;\n    }\n    /**\n     * @internal\n     */\n    _reverseUpperBound(curNode, key) {\n        let resNode = this._header;\n        while (curNode) {\n            const cmpResult = this._cmp(curNode._key, key);\n            if (cmpResult < 0) {\n                resNode = curNode;\n                curNode = curNode._right;\n            }\n            else {\n                curNode = curNode._left;\n            }\n        }\n        return resNode;\n    }\n    /**\n     * @internal\n     */\n    _eraseNodeSelfBalance(curNode) {\n        while (true) {\n            const parentNode = curNode._parent;\n            if (parentNode === this._header)\n                return;\n            if (curNode._color === 1 /* TreeNodeColor.RED */) {\n                curNode._color = 0 /* TreeNodeColor.BLACK */;\n                return;\n            }\n            if (curNode === parentNode._left) {\n                const brother = parentNode._right;\n                if (brother._color === 1 /* TreeNodeColor.RED */) {\n                    brother._color = 0 /* TreeNodeColor.BLACK */;\n                    parentNode._color = 1 /* TreeNodeColor.RED */;\n                    if (parentNode === this._root) {\n                        this._root = parentNode._rotateLeft();\n                    }\n                    else\n                        parentNode._rotateLeft();\n                }\n                else {\n                    if (brother._right && brother._right._color === 1 /* TreeNodeColor.RED */) {\n                        brother._color = parentNode._color;\n                        parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                        brother._right._color = 0 /* TreeNodeColor.BLACK */;\n                        if (parentNode === this._root) {\n                            this._root = parentNode._rotateLeft();\n                        }\n                        else\n                            parentNode._rotateLeft();\n                        return;\n                    }\n                    else if (brother._left && brother._left._color === 1 /* TreeNodeColor.RED */) {\n                        brother._color = 1 /* TreeNodeColor.RED */;\n                        brother._left._color = 0 /* TreeNodeColor.BLACK */;\n                        brother._rotateRight();\n                    }\n                    else {\n                        brother._color = 1 /* TreeNodeColor.RED */;\n                        curNode = parentNode;\n                    }\n                }\n            }\n            else {\n                const brother = parentNode._left;\n                if (brother._color === 1 /* TreeNodeColor.RED */) {\n                    brother._color = 0 /* TreeNodeColor.BLACK */;\n                    parentNode._color = 1 /* TreeNodeColor.RED */;\n                    if (parentNode === this._root) {\n                        this._root = parentNode._rotateRight();\n                    }\n                    else\n                        parentNode._rotateRight();\n                }\n                else {\n                    if (brother._left && brother._left._color === 1 /* TreeNodeColor.RED */) {\n                        brother._color = parentNode._color;\n                        parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                        brother._left._color = 0 /* TreeNodeColor.BLACK */;\n                        if (parentNode === this._root) {\n                            this._root = parentNode._rotateRight();\n                        }\n                        else\n                            parentNode._rotateRight();\n                        return;\n                    }\n                    else if (brother._right && brother._right._color === 1 /* TreeNodeColor.RED */) {\n                        brother._color = 1 /* TreeNodeColor.RED */;\n                        brother._right._color = 0 /* TreeNodeColor.BLACK */;\n                        brother._rotateLeft();\n                    }\n                    else {\n                        brother._color = 1 /* TreeNodeColor.RED */;\n                        curNode = parentNode;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * @internal\n     */\n    _preEraseNode(curNode) {\n        if (this._length === 1) {\n            this.clear();\n            return this._header;\n        }\n        let swapNode = curNode;\n        while (swapNode._left || swapNode._right) {\n            if (swapNode._right) {\n                swapNode = swapNode._right;\n                while (swapNode._left)\n                    swapNode = swapNode._left;\n            }\n            else {\n                swapNode = swapNode._left;\n            }\n            [curNode._key, swapNode._key] = [swapNode._key, curNode._key];\n            [curNode._value, swapNode._value] = [swapNode._value, curNode._value];\n            curNode = swapNode;\n        }\n        if (this._header._left === swapNode) {\n            this._header._left = swapNode._parent;\n        }\n        else if (this._header._right === swapNode) {\n            this._header._right = swapNode._parent;\n        }\n        this._eraseNodeSelfBalance(swapNode);\n        const _parent = swapNode._parent;\n        if (swapNode === _parent._left) {\n            _parent._left = undefined;\n        }\n        else\n            _parent._right = undefined;\n        this._length -= 1;\n        this._root._color = 0 /* TreeNodeColor.BLACK */;\n        return _parent;\n    }\n    /**\n     * @internal\n     */\n    _inOrderTraversal(curNode, callback) {\n        if (curNode === undefined)\n            return false;\n        const ifReturn = this._inOrderTraversal(curNode._left, callback);\n        if (ifReturn)\n            return true;\n        if (callback(curNode))\n            return true;\n        return this._inOrderTraversal(curNode._right, callback);\n    }\n    /**\n     * @internal\n     */\n    _insertNodeSelfBalance(curNode) {\n        while (true) {\n            const parentNode = curNode._parent;\n            if (parentNode._color === 0 /* TreeNodeColor.BLACK */)\n                return;\n            const grandParent = parentNode._parent;\n            if (parentNode === grandParent._left) {\n                const uncle = grandParent._right;\n                if (uncle && uncle._color === 1 /* TreeNodeColor.RED */) {\n                    uncle._color = parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (grandParent === this._root)\n                        return;\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                    curNode = grandParent;\n                    continue;\n                }\n                else if (curNode === parentNode._right) {\n                    curNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (curNode._left)\n                        curNode._left._parent = parentNode;\n                    if (curNode._right)\n                        curNode._right._parent = grandParent;\n                    parentNode._right = curNode._left;\n                    grandParent._left = curNode._right;\n                    curNode._left = parentNode;\n                    curNode._right = grandParent;\n                    if (grandParent === this._root) {\n                        this._root = curNode;\n                        this._header._parent = curNode;\n                    }\n                    else {\n                        const GP = grandParent._parent;\n                        if (GP._left === grandParent) {\n                            GP._left = curNode;\n                        }\n                        else\n                            GP._right = curNode;\n                    }\n                    curNode._parent = grandParent._parent;\n                    parentNode._parent = curNode;\n                    grandParent._parent = curNode;\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                    return { parentNode, grandParent, curNode };\n                }\n                else {\n                    parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (grandParent === this._root) {\n                        this._root = grandParent._rotateRight();\n                    }\n                    else\n                        grandParent._rotateRight();\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                }\n            }\n            else {\n                const uncle = grandParent._left;\n                if (uncle && uncle._color === 1 /* TreeNodeColor.RED */) {\n                    uncle._color = parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (grandParent === this._root)\n                        return;\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                    curNode = grandParent;\n                    continue;\n                }\n                else if (curNode === parentNode._left) {\n                    curNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (curNode._left)\n                        curNode._left._parent = grandParent;\n                    if (curNode._right)\n                        curNode._right._parent = parentNode;\n                    grandParent._right = curNode._left;\n                    parentNode._left = curNode._right;\n                    curNode._left = grandParent;\n                    curNode._right = parentNode;\n                    if (grandParent === this._root) {\n                        this._root = curNode;\n                        this._header._parent = curNode;\n                    }\n                    else {\n                        const GP = grandParent._parent;\n                        if (GP._left === grandParent) {\n                            GP._left = curNode;\n                        }\n                        else\n                            GP._right = curNode;\n                    }\n                    curNode._parent = grandParent._parent;\n                    parentNode._parent = curNode;\n                    grandParent._parent = curNode;\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                    return { parentNode, grandParent, curNode };\n                }\n                else {\n                    parentNode._color = 0 /* TreeNodeColor.BLACK */;\n                    if (grandParent === this._root) {\n                        this._root = grandParent._rotateLeft();\n                    }\n                    else\n                        grandParent._rotateLeft();\n                    grandParent._color = 1 /* TreeNodeColor.RED */;\n                }\n            }\n            return;\n        }\n    }\n    /**\n     * @internal\n     */\n    _preSet(key, value, hint) {\n        if (this._root === undefined) {\n            this._length += 1;\n            this._root = new this._TreeNodeClass(key, value);\n            this._root._color = 0 /* TreeNodeColor.BLACK */;\n            this._root._parent = this._header;\n            this._header._parent = this._root;\n            this._header._left = this._root;\n            this._header._right = this._root;\n            return;\n        }\n        let curNode;\n        const minNode = this._header._left;\n        const compareToMin = this._cmp(minNode._key, key);\n        if (compareToMin === 0) {\n            minNode._value = value;\n            return;\n        }\n        else if (compareToMin > 0) {\n            minNode._left = new this._TreeNodeClass(key, value);\n            minNode._left._parent = minNode;\n            curNode = minNode._left;\n            this._header._left = curNode;\n        }\n        else {\n            const maxNode = this._header._right;\n            const compareToMax = this._cmp(maxNode._key, key);\n            if (compareToMax === 0) {\n                maxNode._value = value;\n                return;\n            }\n            else if (compareToMax < 0) {\n                maxNode._right = new this._TreeNodeClass(key, value);\n                maxNode._right._parent = maxNode;\n                curNode = maxNode._right;\n                this._header._right = curNode;\n            }\n            else {\n                if (hint !== undefined) {\n                    const iterNode = hint._node;\n                    if (iterNode !== this._header) {\n                        const iterCmpRes = this._cmp(iterNode._key, key);\n                        if (iterCmpRes === 0) {\n                            iterNode._value = value;\n                            return;\n                        }\n                        else /* istanbul ignore else */ if (iterCmpRes > 0) {\n                            const preNode = iterNode._pre();\n                            const preCmpRes = this._cmp(preNode._key, key);\n                            if (preCmpRes === 0) {\n                                preNode._value = value;\n                                return;\n                            }\n                            else if (preCmpRes < 0) {\n                                curNode = new this._TreeNodeClass(key, value);\n                                if (preNode._right === undefined) {\n                                    preNode._right = curNode;\n                                    curNode._parent = preNode;\n                                }\n                                else {\n                                    iterNode._left = curNode;\n                                    curNode._parent = iterNode;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (curNode === undefined) {\n                    curNode = this._root;\n                    while (true) {\n                        const cmpResult = this._cmp(curNode._key, key);\n                        if (cmpResult > 0) {\n                            if (curNode._left === undefined) {\n                                curNode._left = new this._TreeNodeClass(key, value);\n                                curNode._left._parent = curNode;\n                                curNode = curNode._left;\n                                break;\n                            }\n                            curNode = curNode._left;\n                        }\n                        else if (cmpResult < 0) {\n                            if (curNode._right === undefined) {\n                                curNode._right = new this._TreeNodeClass(key, value);\n                                curNode._right._parent = curNode;\n                                curNode = curNode._right;\n                                break;\n                            }\n                            curNode = curNode._right;\n                        }\n                        else {\n                            curNode._value = value;\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n        this._length += 1;\n        return curNode;\n    }\n    /**\n     * @internal\n     */\n    _findElementNode(curNode, key) {\n        while (curNode) {\n            const cmpResult = this._cmp(curNode._key, key);\n            if (cmpResult < 0) {\n                curNode = curNode._right;\n            }\n            else if (cmpResult > 0) {\n                curNode = curNode._left;\n            }\n            else\n                return curNode;\n        }\n        return curNode || this._header;\n    }\n    clear() {\n        this._length = 0;\n        this._root = undefined;\n        this._header._parent = undefined;\n        this._header._left = this._header._right = undefined;\n    }\n    /**\n     * @description Update node's key by iterator.\n     * @param iter - The iterator you want to change.\n     * @param key - The key you want to update.\n     * @returns Whether the modification is successful.\n     * @example\n     * const st = new orderedSet([1, 2, 5]);\n     * const iter = st.find(2);\n     * st.updateKeyByIterator(iter, 3); // then st will become [1, 3, 5]\n     */\n    updateKeyByIterator(iter, key) {\n        const node = iter._node;\n        if (node === this._header) {\n            throwIteratorAccessError();\n        }\n        if (this._length === 1) {\n            node._key = key;\n            return true;\n        }\n        if (node === this._header._left) {\n            if (this._cmp(node._next()._key, key) > 0) {\n                node._key = key;\n                return true;\n            }\n            return false;\n        }\n        if (node === this._header._right) {\n            if (this._cmp(node._pre()._key, key) < 0) {\n                node._key = key;\n                return true;\n            }\n            return false;\n        }\n        const preKey = node._pre()._key;\n        if (this._cmp(preKey, key) >= 0)\n            return false;\n        const nextKey = node._next()._key;\n        if (this._cmp(nextKey, key) <= 0)\n            return false;\n        node._key = key;\n        return true;\n    }\n    eraseElementByPos(pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        let index = 0;\n        const self = this;\n        this._inOrderTraversal(this._root, function (curNode) {\n            if (pos === index) {\n                self._eraseNode(curNode);\n                return true;\n            }\n            index += 1;\n            return false;\n        });\n        return this._length;\n    }\n    /**\n     * @description Remove the element of the specified key.\n     * @param key - The key you want to remove.\n     * @returns Whether erase successfully.\n     */\n    eraseElementByKey(key) {\n        if (this._length === 0)\n            return false;\n        const curNode = this._findElementNode(this._root, key);\n        if (curNode === this._header)\n            return false;\n        this._eraseNode(curNode);\n        return true;\n    }\n    eraseElementByIterator(iter) {\n        const node = iter._node;\n        if (node === this._header) {\n            throwIteratorAccessError();\n        }\n        const hasNoRight = node._right === undefined;\n        const isNormal = iter.iteratorType === 0 /* IteratorType.NORMAL */;\n        // For the normal iterator, the `next` node will be swapped to `this` node when has right.\n        if (isNormal) {\n            // So we should move it to next when it's right is null.\n            if (hasNoRight)\n                iter.next();\n        }\n        else {\n            // For the reverse iterator, only when it doesn't have right and has left the `next` node will be swapped.\n            // So when it has right, or it is a leaf node we should move it to `next`.\n            if (!hasNoRight || node._left === undefined)\n                iter.next();\n        }\n        this._eraseNode(node);\n        return iter;\n    }\n    forEach(callback) {\n        let index = 0;\n        for (const element of this)\n            callback(element, index++, this);\n    }\n    getElementByPos(pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        let res;\n        let index = 0;\n        for (const element of this) {\n            if (index === pos) {\n                res = element;\n                break;\n            }\n            index += 1;\n        }\n        return res;\n    }\n    /**\n     * @description Get the height of the tree.\n     * @returns Number about the height of the RB-tree.\n     */\n    getHeight() {\n        if (this._length === 0)\n            return 0;\n        const traversal = function (curNode) {\n            if (!curNode)\n                return 0;\n            return Math.max(traversal(curNode._left), traversal(curNode._right)) + 1;\n        };\n        return traversal(this._root);\n    }\n}\nexport default TreeContainer;\n",
          "import type TreeIterator from './TreeIterator';\nimport { TreeNode, TreeNodeColor, TreeNodeEnableIndex } from './TreeNode';\nimport { Container, IteratorType } from '@/container/ContainerBase';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nabstract class TreeContainer<K, V> extends Container<K | [K, V]> {\n  /**\n   * @internal\n   */\n  protected _root: TreeNode<K, V> | undefined = undefined;\n  /**\n   * @internal\n   */\n  protected _header: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected readonly _cmp: (x: K, y: K) => number;\n  /**\n   * @internal\n   */\n  protected readonly _TreeNodeClass: typeof TreeNode | typeof TreeNodeEnableIndex;\n  /**\n   * @internal\n   */\n  protected readonly _eraseNode: (curNode: TreeNode<K, V>) => void;\n  /**\n   * @internal\n   */\n  protected _set: (key: K, value: V, hint?: TreeIterator<K, V>) => number;\n  /**\n   * @internal\n   */\n  protected constructor(\n    cmp: (x: K, y: K) => number =\n    function (x: K, y: K) {\n      if (x < y) return -1;\n      if (x > y) return 1;\n      return 0;\n    },\n    enableIndex = false\n  ) {\n    super();\n    this._cmp = cmp;\n    if (enableIndex) {\n      this._TreeNodeClass = TreeNodeEnableIndex;\n      this._set = function (key, value, hint) {\n        const curNode = this._preSet(key, value, hint);\n        if (curNode) {\n          let p = curNode._parent as TreeNodeEnableIndex<K, V>;\n          while (p !== this._header) {\n            p._subTreeSize += 1;\n            p = p._parent as TreeNodeEnableIndex<K, V>;\n          }\n          const nodeList = this._insertNodeSelfBalance(curNode);\n          if (nodeList) {\n            const {\n              parentNode,\n              grandParent,\n              curNode\n            } = nodeList as unknown as Record<string, TreeNodeEnableIndex<K, V>>;\n            parentNode._recount();\n            grandParent._recount();\n            curNode._recount();\n          }\n        }\n        return this._length;\n      };\n      this._eraseNode = function (curNode) {\n        let p = this._preEraseNode(curNode) as TreeNodeEnableIndex<K, V>;\n        while (p !== this._header) {\n          p._subTreeSize -= 1;\n          p = p._parent as TreeNodeEnableIndex<K, V>;\n        }\n      };\n    } else {\n      this._TreeNodeClass = TreeNode;\n      this._set = function (key, value, hint) {\n        const curNode = this._preSet(key, value, hint);\n        if (curNode) this._insertNodeSelfBalance(curNode);\n        return this._length;\n      };\n      this._eraseNode = this._preEraseNode;\n    }\n    this._header = new this._TreeNodeClass();\n  }\n  /**\n   * @internal\n   */\n  protected _lowerBound(curNode: TreeNode<K, V> | undefined, key: K) {\n    let resNode = this._header;\n    while (curNode) {\n      const cmpResult = this._cmp(curNode._key!, key);\n      if (cmpResult < 0) {\n        curNode = curNode._right;\n      } else if (cmpResult > 0) {\n        resNode = curNode;\n        curNode = curNode._left;\n      } else return curNode;\n    }\n    return resNode;\n  }\n  /**\n   * @internal\n   */\n  protected _upperBound(curNode: TreeNode<K, V> | undefined, key: K) {\n    let resNode = this._header;\n    while (curNode) {\n      const cmpResult = this._cmp(curNode._key!, key);\n      if (cmpResult <= 0) {\n        curNode = curNode._right;\n      } else {\n        resNode = curNode;\n        curNode = curNode._left;\n      }\n    }\n    return resNode;\n  }\n  /**\n   * @internal\n   */\n  protected _reverseLowerBound(curNode: TreeNode<K, V> | undefined, key: K) {\n    let resNode = this._header;\n    while (curNode) {\n      const cmpResult = this._cmp(curNode._key!, key);\n      if (cmpResult < 0) {\n        resNode = curNode;\n        curNode = curNode._right;\n      } else if (cmpResult > 0) {\n        curNode = curNode._left;\n      } else return curNode;\n    }\n    return resNode;\n  }\n  /**\n   * @internal\n   */\n  protected _reverseUpperBound(curNode: TreeNode<K, V> | undefined, key: K) {\n    let resNode = this._header;\n    while (curNode) {\n      const cmpResult = this._cmp(curNode._key!, key);\n      if (cmpResult < 0) {\n        resNode = curNode;\n        curNode = curNode._right;\n      } else {\n        curNode = curNode._left;\n      }\n    }\n    return resNode;\n  }\n  /**\n   * @internal\n   */\n  protected _eraseNodeSelfBalance(curNode: TreeNode<K, V>) {\n    while (true) {\n      const parentNode = curNode._parent!;\n      if (parentNode === this._header) return;\n      if (curNode._color === TreeNodeColor.RED) {\n        curNode._color = TreeNodeColor.BLACK;\n        return;\n      }\n      if (curNode === parentNode._left) {\n        const brother = parentNode._right!;\n        if (brother._color === TreeNodeColor.RED) {\n          brother._color = TreeNodeColor.BLACK;\n          parentNode._color = TreeNodeColor.RED;\n          if (parentNode === this._root) {\n            this._root = parentNode._rotateLeft();\n          } else parentNode._rotateLeft();\n        } else {\n          if (brother._right && brother._right._color === TreeNodeColor.RED) {\n            brother._color = parentNode._color;\n            parentNode._color = TreeNodeColor.BLACK;\n            brother._right._color = TreeNodeColor.BLACK;\n            if (parentNode === this._root) {\n              this._root = parentNode._rotateLeft();\n            } else parentNode._rotateLeft();\n            return;\n          } else if (brother._left && brother._left._color === TreeNodeColor.RED) {\n            brother._color = TreeNodeColor.RED;\n            brother._left._color = TreeNodeColor.BLACK;\n            brother._rotateRight();\n          } else {\n            brother._color = TreeNodeColor.RED;\n            curNode = parentNode;\n          }\n        }\n      } else {\n        const brother = parentNode._left!;\n        if (brother._color === TreeNodeColor.RED) {\n          brother._color = TreeNodeColor.BLACK;\n          parentNode._color = TreeNodeColor.RED;\n          if (parentNode === this._root) {\n            this._root = parentNode._rotateRight();\n          } else parentNode._rotateRight();\n        } else {\n          if (brother._left && brother._left._color === TreeNodeColor.RED) {\n            brother._color = parentNode._color;\n            parentNode._color = TreeNodeColor.BLACK;\n            brother._left._color = TreeNodeColor.BLACK;\n            if (parentNode === this._root) {\n              this._root = parentNode._rotateRight();\n            } else parentNode._rotateRight();\n            return;\n          } else if (brother._right && brother._right._color === TreeNodeColor.RED) {\n            brother._color = TreeNodeColor.RED;\n            brother._right._color = TreeNodeColor.BLACK;\n            brother._rotateLeft();\n          } else {\n            brother._color = TreeNodeColor.RED;\n            curNode = parentNode;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n  protected _preEraseNode(curNode: TreeNode<K, V>) {\n    if (this._length === 1) {\n      this.clear();\n      return this._header;\n    }\n    let swapNode = curNode;\n    while (swapNode._left || swapNode._right) {\n      if (swapNode._right) {\n        swapNode = swapNode._right;\n        while (swapNode._left) swapNode = swapNode._left;\n      } else {\n        swapNode = swapNode._left!;\n      }\n      [curNode._key, swapNode._key] = [swapNode._key, curNode._key];\n      [curNode._value, swapNode._value] = [swapNode._value, curNode._value];\n      curNode = swapNode;\n    }\n    if (this._header._left === swapNode) {\n      this._header._left = swapNode._parent;\n    } else if (this._header._right === swapNode) {\n      this._header._right = swapNode._parent;\n    }\n    this._eraseNodeSelfBalance(swapNode);\n    const _parent = swapNode._parent!;\n    if (swapNode === _parent._left) {\n      _parent._left = undefined;\n    } else _parent._right = undefined;\n    this._length -= 1;\n    this._root!._color = TreeNodeColor.BLACK;\n    return _parent;\n  }\n  /**\n   * @internal\n   */\n  protected _inOrderTraversal(\n    curNode: TreeNode<K, V> | undefined,\n    callback: (curNode: TreeNode<K, V>) => boolean\n  ): boolean {\n    if (curNode === undefined) return false;\n    const ifReturn = this._inOrderTraversal(curNode._left, callback);\n    if (ifReturn) return true;\n    if (callback(curNode)) return true;\n    return this._inOrderTraversal(curNode._right, callback);\n  }\n  /**\n   * @internal\n   */\n  protected _insertNodeSelfBalance(curNode: TreeNode<K, V>) {\n    while (true) {\n      const parentNode = curNode._parent!;\n      if (parentNode._color === TreeNodeColor.BLACK) return;\n      const grandParent = parentNode._parent!;\n      if (parentNode === grandParent._left) {\n        const uncle = grandParent._right;\n        if (uncle && uncle._color === TreeNodeColor.RED) {\n          uncle._color = parentNode._color = TreeNodeColor.BLACK;\n          if (grandParent === this._root) return;\n          grandParent._color = TreeNodeColor.RED;\n          curNode = grandParent;\n          continue;\n        } else if (curNode === parentNode._right) {\n          curNode._color = TreeNodeColor.BLACK;\n          if (curNode._left) curNode._left._parent = parentNode;\n          if (curNode._right) curNode._right._parent = grandParent;\n          parentNode._right = curNode._left;\n          grandParent._left = curNode._right;\n          curNode._left = parentNode;\n          curNode._right = grandParent;\n          if (grandParent === this._root) {\n            this._root = curNode;\n            this._header._parent = curNode;\n          } else {\n            const GP = grandParent._parent!;\n            if (GP._left === grandParent) {\n              GP._left = curNode;\n            } else GP._right = curNode;\n          }\n          curNode._parent = grandParent._parent;\n          parentNode._parent = curNode;\n          grandParent._parent = curNode;\n          grandParent._color = TreeNodeColor.RED;\n          return { parentNode, grandParent, curNode };\n        } else {\n          parentNode._color = TreeNodeColor.BLACK;\n          if (grandParent === this._root) {\n            this._root = grandParent._rotateRight();\n          } else grandParent._rotateRight();\n          grandParent._color = TreeNodeColor.RED;\n        }\n      } else {\n        const uncle = grandParent._left;\n        if (uncle && uncle._color === TreeNodeColor.RED) {\n          uncle._color = parentNode._color = TreeNodeColor.BLACK;\n          if (grandParent === this._root) return;\n          grandParent._color = TreeNodeColor.RED;\n          curNode = grandParent;\n          continue;\n        } else if (curNode === parentNode._left) {\n          curNode._color = TreeNodeColor.BLACK;\n          if (curNode._left) curNode._left._parent = grandParent;\n          if (curNode._right) curNode._right._parent = parentNode;\n          grandParent._right = curNode._left;\n          parentNode._left = curNode._right;\n          curNode._left = grandParent;\n          curNode._right = parentNode;\n          if (grandParent === this._root) {\n            this._root = curNode;\n            this._header._parent = curNode;\n          } else {\n            const GP = grandParent._parent!;\n            if (GP._left === grandParent) {\n              GP._left = curNode;\n            } else GP._right = curNode;\n          }\n          curNode._parent = grandParent._parent;\n          parentNode._parent = curNode;\n          grandParent._parent = curNode;\n          grandParent._color = TreeNodeColor.RED;\n          return { parentNode, grandParent, curNode };\n        } else {\n          parentNode._color = TreeNodeColor.BLACK;\n          if (grandParent === this._root) {\n            this._root = grandParent._rotateLeft();\n          } else grandParent._rotateLeft();\n          grandParent._color = TreeNodeColor.RED;\n        }\n      }\n      return;\n    }\n  }\n  /**\n   * @internal\n   */\n  protected _preSet(key: K, value?: V, hint?: TreeIterator<K, V>) {\n    if (this._root === undefined) {\n      this._length += 1;\n      this._root = new this._TreeNodeClass(key, value);\n      this._root._color = TreeNodeColor.BLACK;\n      this._root._parent = this._header;\n      this._header._parent = this._root;\n      this._header._left = this._root;\n      this._header._right = this._root;\n      return;\n    }\n    let curNode;\n    const minNode = this._header._left!;\n    const compareToMin = this._cmp(minNode._key!, key);\n    if (compareToMin === 0) {\n      minNode._value = value;\n      return;\n    } else if (compareToMin > 0) {\n      minNode._left = new this._TreeNodeClass(key, value);\n      minNode._left._parent = minNode;\n      curNode = minNode._left;\n      this._header._left = curNode;\n    } else {\n      const maxNode = this._header._right!;\n      const compareToMax = this._cmp(maxNode._key!, key);\n      if (compareToMax === 0) {\n        maxNode._value = value;\n        return;\n      } else if (compareToMax < 0) {\n        maxNode._right = new this._TreeNodeClass(key, value);\n        maxNode._right._parent = maxNode;\n        curNode = maxNode._right;\n        this._header._right = curNode;\n      } else {\n        if (hint !== undefined) {\n          const iterNode = hint._node;\n          if (iterNode !== this._header) {\n            const iterCmpRes = this._cmp(iterNode._key!, key);\n            if (iterCmpRes === 0) {\n              iterNode._value = value;\n              return;\n            } else /* istanbul ignore else */ if (iterCmpRes > 0) {\n              const preNode = iterNode._pre();\n              const preCmpRes = this._cmp(preNode._key!, key);\n              if (preCmpRes === 0) {\n                preNode._value = value;\n                return;\n              } else if (preCmpRes < 0) {\n                curNode = new this._TreeNodeClass(key, value);\n                if (preNode._right === undefined) {\n                  preNode._right = curNode;\n                  curNode._parent = preNode;\n                } else {\n                  iterNode._left = curNode;\n                  curNode._parent = iterNode;\n                }\n              }\n            }\n          }\n        }\n        if (curNode === undefined) {\n          curNode = this._root;\n          while (true) {\n            const cmpResult = this._cmp(curNode._key!, key);\n            if (cmpResult > 0) {\n              if (curNode._left === undefined) {\n                curNode._left = new this._TreeNodeClass(key, value);\n                curNode._left._parent = curNode;\n                curNode = curNode._left;\n                break;\n              }\n              curNode = curNode._left;\n            } else if (cmpResult < 0) {\n              if (curNode._right === undefined) {\n                curNode._right = new this._TreeNodeClass(key, value);\n                curNode._right._parent = curNode;\n                curNode = curNode._right;\n                break;\n              }\n              curNode = curNode._right;\n            } else {\n              curNode._value = value;\n              return;\n            }\n          }\n        }\n      }\n    }\n    this._length += 1;\n    return curNode;\n  }\n  /**\n   * @internal\n   */\n  protected _findElementNode(curNode: TreeNode<K, V> | undefined, key: K) {\n    while (curNode) {\n      const cmpResult = this._cmp(curNode._key!, key);\n      if (cmpResult < 0) {\n        curNode = curNode._right;\n      } else if (cmpResult > 0) {\n        curNode = curNode._left;\n      } else return curNode;\n    }\n    return curNode || this._header;\n  }\n  clear() {\n    this._length = 0;\n    this._root = undefined;\n    this._header._parent = undefined;\n    this._header._left = this._header._right = undefined;\n  }\n  /**\n   * @description Update node's key by iterator.\n   * @param iter - The iterator you want to change.\n   * @param key - The key you want to update.\n   * @returns Whether the modification is successful.\n   * @example\n   * const st = new orderedSet([1, 2, 5]);\n   * const iter = st.find(2);\n   * st.updateKeyByIterator(iter, 3); // then st will become [1, 3, 5]\n   */\n  updateKeyByIterator(iter: TreeIterator<K, V>, key: K): boolean {\n    const node = iter._node;\n    if (node === this._header) {\n      throwIteratorAccessError();\n    }\n    if (this._length === 1) {\n      node._key = key;\n      return true;\n    }\n    if (node === this._header._left) {\n      if (this._cmp(node._next()._key!, key) > 0) {\n        node._key = key;\n        return true;\n      }\n      return false;\n    }\n    if (node === this._header._right) {\n      if (this._cmp(node._pre()._key!, key) < 0) {\n        node._key = key;\n        return true;\n      }\n      return false;\n    }\n    const preKey = node._pre()._key!;\n    if (this._cmp(preKey, key) >= 0) return false;\n    const nextKey = node._next()._key!;\n    if (this._cmp(nextKey, key) <= 0) return false;\n    node._key = key;\n    return true;\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let index = 0;\n    const self = this;\n    this._inOrderTraversal(\n      this._root,\n      function (curNode) {\n        if (pos === index) {\n          self._eraseNode(curNode);\n          return true;\n        }\n        index += 1;\n        return false;\n      });\n    return this._length;\n  }\n  /**\n   * @description Remove the element of the specified key.\n   * @param key - The key you want to remove.\n   * @returns Whether erase successfully.\n   */\n  eraseElementByKey(key: K) {\n    if (this._length === 0) return false;\n    const curNode = this._findElementNode(this._root, key);\n    if (curNode === this._header) return false;\n    this._eraseNode(curNode);\n    return true;\n  }\n  eraseElementByIterator(iter: TreeIterator<K, V>) {\n    const node = iter._node;\n    if (node === this._header) {\n      throwIteratorAccessError();\n    }\n    const hasNoRight = node._right === undefined;\n    const isNormal = iter.iteratorType === IteratorType.NORMAL;\n    // For the normal iterator, the `next` node will be swapped to `this` node when has right.\n    if (isNormal) {\n      // So we should move it to next when it's right is null.\n      if (hasNoRight) iter.next();\n    } else {\n      // For the reverse iterator, only when it doesn't have right and has left the `next` node will be swapped.\n      // So when it has right, or it is a leaf node we should move it to `next`.\n      if (!hasNoRight || node._left === undefined) iter.next();\n    }\n    this._eraseNode(node);\n    return iter;\n  }\n  forEach(callback: (element: K | [K, V], index: number, tree: TreeContainer<K, V>) => void) {\n    let index = 0;\n    for (const element of this) callback(element, index++, this);\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let res;\n    let index = 0;\n    for (const element of this) {\n      if (index === pos) {\n        res = element;\n        break;\n      }\n      index += 1;\n    }\n    return <K | [K, V]>res;\n  }\n  /**\n   * @description Get the height of the tree.\n   * @returns Number about the height of the RB-tree.\n   */\n  getHeight() {\n    if (this._length === 0) return 0;\n    const traversal =\n      function (curNode: TreeNode<K, V> | undefined): number {\n        if (!curNode) return 0;\n        return Math.max(traversal(curNode._left), traversal(curNode._right)) + 1;\n      };\n    return traversal(this._root);\n  }\n  /**\n   * @param key - The given key you want to compare.\n   * @returns An iterator to the first element less than the given key.\n   */\n  abstract reverseUpperBound(key: K): TreeIterator<K, V>;\n  /**\n   * @description Union the other tree to self.\n   * @param other - The other tree container you want to merge.\n   * @returns The size of the tree after union.\n   */\n  abstract union(other: TreeContainer<K, V>): number;\n  /**\n   * @param key - The given key you want to compare.\n   * @returns An iterator to the first element not greater than the given key.\n   */\n  abstract reverseLowerBound(key: K): TreeIterator<K, V>;\n  /**\n   * @param key - The given key you want to compare.\n   * @returns An iterator to the first element not less than the given key.\n   */\n  abstract lowerBound(key: K): TreeIterator<K, V>;\n  /**\n   * @param key - The given key you want to compare.\n   * @returns An iterator to the first element greater than the given key.\n   */\n  abstract upperBound(key: K): TreeIterator<K, V>;\n}\n\nexport default TreeContainer;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/Base/TreeNode.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 56, 0, 16, 23, 20, 27, 27, 27, 27, 28, 19, 19, 5,
        9, 21, 42, 20, 25, 20, 25, 24, 13, 16, 25, 31, 22, 25, 13, 18, 9, 17, 5,
        9, 21, 18, 20, 25, 24, 13, 21, 16, 25, 31, 22, 25, 13, 28, 25, 28, 9, 5,
        10, 26, 25, 22, 82, 17, 19, 20, 19, 27, 17, 5, 10, 26, 25, 22, 82, 17,
        19, 20, 19, 27, 17, 5, 1, 0, 28, 0, 44, 19, 28, 20, 5, 10, 29, 18, 15,
        17, 5, 10, 29, 18, 15, 17, 5, 10, 20, 21, 33, 9, 21, 33, 9, 5, 1, 0, 50,
        36, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/Base/container/TreeContainer/Base/TreeNode.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/src/container/TreeContainer/Base/TreeNode.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "TreeNodeEnableIndex",
          "TreeNode",
          "constructor",
          "key",
          "this",
          "_color",
          "_key",
          "undefined",
          "_value",
          "_left",
          "_right",
          "_parent",
          "_pre",
          "preNode",
          "pre",
          "_next",
          "nextNode",
          "_rotateLeft",
          "PP",
          "V",
          "R",
          "_rotateRight",
          "F",
          "K",
          "super",
          "arguments",
          "_subTreeSize",
          "parent",
          "_recount"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,sBAAsBF,QAAQG,gBAAgB;;ACAhD,MAAOA;IAOXC,YAAYC,GAASJ;QANrBK,KAAAC,KAAM;QACND,KAAAE,IAAsBC;QACtBH,KAAAI,IAAwBD;QACxBH,KAAAK,IAAoCF;QACpCH,KAAAM,IAAqCH;QACrCH,KAAAO,KAAsCJ;QAEpCH,KAAKE,IAAOH;QACZC,KAAKI,IAAST;ADJd;ICUFa;QACE,IAAIC,IAA0BT;QAC9B,IACES,EAAQR,OAAM,KACdQ,EAAQF,GAASA,OAAYE,GAC7B;YACAA,IAAUA,EAAQH;ADNhB,eCOG,IAAIG,EAAQJ,GAAO;YACxBI,IAAUA,EAAQJ;YAClB,OAAOI,EAAQH,GAAQ;gBACrBG,IAAUA,EAAQH;ADLd;AACJ,eCMG;YACL,IAAII,IAAMD,EAAQF;YAClB,OAAOG,EAAIL,MAAUI,GAAS;gBAC5BA,IAAUC;gBACVA,IAAMD,EAAQF;ADJV;YCMNE,IAAUC;ADJR;QCMJ,OAAOD;ADJP;ICUFE;QACE,IAAIC,IAA2BZ;QAC/B,IAAIY,EAASN,GAAQ;YACnBM,IAAWA,EAASN;YACpB,OAAOM,EAASP,GAAO;gBACrBO,IAAWA,EAASP;ADJhB;YCMN,OAAOO;ADJL,eCKG;YACL,IAAIF,IAAME,EAASL;YACnB,OAAOG,EAAIJ,MAAWM,GAAU;gBAC9BA,IAAWF;gBACXA,IAAME,EAASL;ADHX;YCKN,IAAIK,EAASN,MAAWI,GAAK;gBAC3B,OAAOA;ADHH,mBCIC,OAAOE;ADDZ;AACJ;ICOFC;QACE,MAAMC,IAAKd,KAAKO;QAChB,MAAMQ,IAAIf,KAAKM;QACf,MAAMU,IAAID,EAAEV;QAEZ,IAAIS,EAAGP,OAAYP,MAAMc,EAAGP,KAAUQ,QACjC,IAAID,EAAGT,MAAUL,MAAMc,EAAGT,IAAQU,QAClCD,EAAGR,IAASS;QAEjBA,EAAER,KAAUO;QACZC,EAAEV,IAAQL;QAEVA,KAAKO,KAAUQ;QACff,KAAKM,IAASU;QAEd,IAAIA,GAAGA,EAAET,KAAUP;QAEnB,OAAOe;ADFP;ICQFE;QACE,MAAMH,IAAKd,KAAKO;QAChB,MAAMW,IAAIlB,KAAKK;QACf,MAAMc,IAAID,EAAEZ;QAEZ,IAAIQ,EAAGP,OAAYP,MAAMc,EAAGP,KAAUW,QACjC,IAAIJ,EAAGT,MAAUL,MAAMc,EAAGT,IAAQa,QAClCJ,EAAGR,IAASY;QAEjBA,EAAEX,KAAUO;QACZI,EAAEZ,IAASN;QAEXA,KAAKO,KAAUW;QACflB,KAAKK,IAAQc;QAEb,IAAIA,GAAGA,EAAEZ,KAAUP;QAEnB,OAAOkB;ADHP;;;ACKHxB,QAAAG,WAAAA;;AAEK,MAAOD,4BAAkCC;IAA/CC;QDHQsB,SAASC;QCIfrB,KAAAsB,KAAe;AA8BjB;IAzBET;QACE,MAAMU,IAASH,MAAMP;QACrBb,KAAKwB;QACLD,EAAOC;QACP,OAAOD;ADDP;ICOFN;QACE,MAAMM,IAASH,MAAMH;QACrBjB,KAAKwB;QACLD,EAAOC;QACP,OAAOD;ADDP;ICGFC;QACExB,KAAKsB,KAAe;QACpB,IAAItB,KAAKK,GAAO;YACdL,KAAKsB,MAAiBtB,KAAKK,EAAoCiB;ADD7D;QCGJ,IAAItB,KAAKM,GAAQ;YACfN,KAAKsB,MAAiBtB,KAAKM,EAAqCgB;ADD9D;AACJ;;;ACGH5B,QAAAE,sBAAAA",
        "file": "TreeNode.js",
        "sourcesContent": [
          "export class TreeNode {\n    constructor(key, value) {\n        this._color = 1 /* TreeNodeColor.RED */;\n        this._key = undefined;\n        this._value = undefined;\n        this._left = undefined;\n        this._right = undefined;\n        this._parent = undefined;\n        this._key = key;\n        this._value = value;\n    }\n    /**\n     * @description Get the pre node.\n     * @returns TreeNode about the pre node.\n     */\n    _pre() {\n        let preNode = this;\n        if (preNode._color === 1 /* TreeNodeColor.RED */ &&\n            preNode._parent._parent === preNode) {\n            preNode = preNode._right;\n        }\n        else if (preNode._left) {\n            preNode = preNode._left;\n            while (preNode._right) {\n                preNode = preNode._right;\n            }\n        }\n        else {\n            let pre = preNode._parent;\n            while (pre._left === preNode) {\n                preNode = pre;\n                pre = preNode._parent;\n            }\n            preNode = pre;\n        }\n        return preNode;\n    }\n    /**\n     * @description Get the next node.\n     * @returns TreeNode about the next node.\n     */\n    _next() {\n        let nextNode = this;\n        if (nextNode._right) {\n            nextNode = nextNode._right;\n            while (nextNode._left) {\n                nextNode = nextNode._left;\n            }\n            return nextNode;\n        }\n        else {\n            let pre = nextNode._parent;\n            while (pre._right === nextNode) {\n                nextNode = pre;\n                pre = nextNode._parent;\n            }\n            if (nextNode._right !== pre) {\n                return pre;\n            }\n            else\n                return nextNode;\n        }\n    }\n    /**\n     * @description Rotate left.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    _rotateLeft() {\n        const PP = this._parent;\n        const V = this._right;\n        const R = V._left;\n        if (PP._parent === this)\n            PP._parent = V;\n        else if (PP._left === this)\n            PP._left = V;\n        else\n            PP._right = V;\n        V._parent = PP;\n        V._left = this;\n        this._parent = V;\n        this._right = R;\n        if (R)\n            R._parent = this;\n        return V;\n    }\n    /**\n     * @description Rotate right.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    _rotateRight() {\n        const PP = this._parent;\n        const F = this._left;\n        const K = F._right;\n        if (PP._parent === this)\n            PP._parent = F;\n        else if (PP._left === this)\n            PP._left = F;\n        else\n            PP._right = F;\n        F._parent = PP;\n        F._right = this;\n        this._parent = F;\n        this._left = K;\n        if (K)\n            K._parent = this;\n        return F;\n    }\n}\nexport class TreeNodeEnableIndex extends TreeNode {\n    constructor() {\n        super(...arguments);\n        this._subTreeSize = 1;\n    }\n    /**\n     * @description Rotate left and do recount.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    _rotateLeft() {\n        const parent = super._rotateLeft();\n        this._recount();\n        parent._recount();\n        return parent;\n    }\n    /**\n     * @description Rotate right and do recount.\n     * @returns TreeNode about moved to original position after rotation.\n     */\n    _rotateRight() {\n        const parent = super._rotateRight();\n        this._recount();\n        parent._recount();\n        return parent;\n    }\n    _recount() {\n        this._subTreeSize = 1;\n        if (this._left) {\n            this._subTreeSize += this._left._subTreeSize;\n        }\n        if (this._right) {\n            this._subTreeSize += this._right._subTreeSize;\n        }\n    }\n}\n",
          "export const enum TreeNodeColor {\n  RED = 1,\n  BLACK = 0\n}\n\nexport class TreeNode<K, V> {\n  _color = TreeNodeColor.RED;\n  _key: K | undefined = undefined;\n  _value: V | undefined = undefined;\n  _left: TreeNode<K, V> | undefined = undefined;\n  _right: TreeNode<K, V> | undefined = undefined;\n  _parent: TreeNode<K, V> | undefined = undefined;\n  constructor(key?: K, value?: V) {\n    this._key = key;\n    this._value = value;\n  }\n  /**\n   * @description Get the pre node.\n   * @returns TreeNode about the pre node.\n   */\n  _pre() {\n    let preNode: TreeNode<K, V> = this;\n    if (\n      preNode._color === TreeNodeColor.RED &&\n      preNode._parent!._parent === preNode\n    ) {\n      preNode = preNode._right!;\n    } else if (preNode._left) {\n      preNode = preNode._left;\n      while (preNode._right) {\n        preNode = preNode._right;\n      }\n    } else {\n      let pre = preNode._parent!;\n      while (pre._left === preNode) {\n        preNode = pre;\n        pre = preNode._parent!;\n      }\n      preNode = pre;\n    }\n    return preNode;\n  }\n  /**\n   * @description Get the next node.\n   * @returns TreeNode about the next node.\n   */\n  _next() {\n    let nextNode: TreeNode<K, V> = this;\n    if (nextNode._right) {\n      nextNode = nextNode._right;\n      while (nextNode._left) {\n        nextNode = nextNode._left;\n      }\n      return nextNode;\n    } else {\n      let pre = nextNode._parent!;\n      while (pre._right === nextNode) {\n        nextNode = pre;\n        pre = nextNode._parent!;\n      }\n      if (nextNode._right !== pre) {\n        return pre;\n      } else return nextNode;\n    }\n  }\n  /**\n   * @description Rotate left.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateLeft() {\n    const PP = this._parent!;\n    const V = this._right!;\n    const R = V._left;\n\n    if (PP._parent === this) PP._parent = V;\n    else if (PP._left === this) PP._left = V;\n    else PP._right = V;\n\n    V._parent = PP;\n    V._left = this;\n\n    this._parent = V;\n    this._right = R;\n\n    if (R) R._parent = this;\n\n    return V;\n  }\n  /**\n   * @description Rotate right.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateRight() {\n    const PP = this._parent!;\n    const F = this._left!;\n    const K = F._right;\n\n    if (PP._parent === this) PP._parent = F;\n    else if (PP._left === this) PP._left = F;\n    else PP._right = F;\n\n    F._parent = PP;\n    F._right = this;\n\n    this._parent = F;\n    this._left = K;\n\n    if (K) K._parent = this;\n\n    return F;\n  }\n}\n\nexport class TreeNodeEnableIndex<K, V> extends TreeNode<K, V> {\n  _subTreeSize = 1;\n  /**\n   * @description Rotate left and do recount.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateLeft() {\n    const parent = super._rotateLeft() as TreeNodeEnableIndex<K, V>;\n    this._recount();\n    parent._recount();\n    return parent;\n  }\n  /**\n   * @description Rotate right and do recount.\n   * @returns TreeNode about moved to original position after rotation.\n   */\n  _rotateRight() {\n    const parent = super._rotateRight() as TreeNodeEnableIndex<K, V>;\n    this._recount();\n    parent._recount();\n    return parent;\n  }\n  _recount() {\n    this._subTreeSize = 1;\n    if (this._left) {\n      this._subTreeSize += (this._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n    if (this._right) {\n      this._subTreeSize += (this._right as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n  }\n}\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/Base/TreeIterator.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 52, 0, 55, 0, 61, 26, 17, 19, 19, 38, 35,
        42, 64, 17, 36, 28, 14, 36, 40, 64, 17, 36, 28, 14, 16, 35, 42, 64, 17,
        36, 28, 14, 36, 40, 64, 17, 36, 28, 14, 9, 5, 17, 23, 28, 27, 20, 32,
        13, 21, 9, 18, 18, 24, 9, 25, 27, 28, 23, 26, 32, 17, 13, 18, 9, 17, 5,
        1, 0, 28, 0, 27, 40, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/Base/container/TreeContainer/Base/TreeIterator.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/src/container/TreeContainer/Base/TreeIterator.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_ContainerBase",
          "require",
          "_throwError",
          "TreeIterator",
          "ContainerIterator",
          "constructor",
          "node",
          "header",
          "iteratorType",
          "super",
          "this",
          "_node",
          "_header",
          "pre",
          "_left",
          "throwIteratorAccessError",
          "_pre",
          "next",
          "_next",
          "_right",
          "index",
          "root",
          "_parent",
          "_subTreeSize",
          "_default"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,eAAe;;ACHvB,IAAAC,iBAAAC,QAAA;;AAEA,IAAAC,cAAAD,QAAA;;AAEA,MAAeE,qBAA2BC,eAAAA;IAaxCC,YACEC,GACAC,GACAC;QAEAC,MAAMD;QACNE,KAAKC,IAAQL;QACbI,KAAKE,IAAUL;QACf,IAAIG,KAAKF,iBAAY,GAA0B;YAC7CE,KAAKG,MAAM;gBACT,IAAIH,KAAKC,MAAUD,KAAKE,EAAQE,GAAO;qBACrC,GAAAC,YAAAA;ADhBM;gBCkBRL,KAAKC,IAAQD,KAAKC,EAAMK;gBACxB,OAAON;ADhBH;YCmBNA,KAAKO,OAAO;gBACV,IAAIP,KAAKC,MAAUD,KAAKE,GAAS;qBAC/B,GAAAG,YAAAA;ADjBM;gBCmBRL,KAAKC,IAAQD,KAAKC,EAAMO;gBACxB,OAAOR;ADjBH;AACJ,eCkBG;YACLA,KAAKG,MAAM;gBACT,IAAIH,KAAKC,MAAUD,KAAKE,EAAQO,GAAQ;qBACtC,GAAAJ,YAAAA;ADhBM;gBCkBRL,KAAKC,IAAQD,KAAKC,EAAMO;gBACxB,OAAOR;ADhBH;YCmBNA,KAAKO,OAAO;gBACV,IAAIP,KAAKC,MAAUD,KAAKE,GAAS;qBAC/B,GAAAG,YAAAA;ADjBM;gBCmBRL,KAAKC,IAAQD,KAAKC,EAAMK;gBACxB,OAAON;ADjBH;AACJ;AACJ;IC4BEU;QACF,IAAIT,IAAQD,KAAKC;QACjB,MAAMU,IAAOX,KAAKE,EAAQU;QAC1B,IAAIX,MAAUD,KAAKE,GAAS;YAC1B,IAAIS,GAAM;gBACR,OAAOA,EAAKE,KAAe;ADjBvB;YCmBN,OAAO;ADjBL;QCmBJ,IAAIH,IAAQ;QACZ,IAAIT,EAAMG,GAAO;YACfM,KAAUT,EAAMG,EAAoCS;ADjBlD;QCmBJ,OAAOZ,MAAUU,GAAM;YACrB,MAAMC,IAAUX,EAAMW;YACtB,IAAIX,MAAUW,EAAQH,GAAQ;gBAC5BC,KAAS;gBACT,IAAIE,EAAQR,GAAO;oBACjBM,KAAUE,EAAQR,EAAoCS;ADjBhD;AACJ;YCmBNZ,IAAQW;ADjBN;QCmBJ,OAAOF;ADjBP;;;ACuBH,IAAAI,WAEcrB;;AAAYN,QAAAE,UAAAyB",
        "file": "TreeIterator.js",
        "sourcesContent": [
          "import { ContainerIterator } from \"../../ContainerBase\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nclass TreeIterator extends ContainerIterator {\n    /**\n     * @internal\n     */\n    constructor(node, header, iteratorType) {\n        super(iteratorType);\n        this._node = node;\n        this._header = header;\n        if (this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            this.pre = function () {\n                if (this._node === this._header._left) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre();\n                return this;\n            };\n            this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next();\n                return this;\n            };\n        }\n        else {\n            this.pre = function () {\n                if (this._node === this._header._right) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next();\n                return this;\n            };\n            this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre();\n                return this;\n            };\n        }\n    }\n    /**\n     * @description Get the sequential index of the iterator in the tree container.<br/>\n     *              <strong>Note:</strong>\n     *              This function only takes effect when the specified tree container `enableIndex = true`.\n     * @returns The index subscript of the node in the tree.\n     * @example\n     * const st = new OrderedSet([1, 2, 3], true);\n     * console.log(st.begin().next().index);  // 1\n     */\n    get index() {\n        let _node = this._node;\n        const root = this._header._parent;\n        if (_node === this._header) {\n            if (root) {\n                return root._subTreeSize - 1;\n            }\n            return 0;\n        }\n        let index = 0;\n        if (_node._left) {\n            index += _node._left._subTreeSize;\n        }\n        while (_node !== root) {\n            const _parent = _node._parent;\n            if (_node === _parent._right) {\n                index += 1;\n                if (_parent._left) {\n                    index += _parent._left._subTreeSize;\n                }\n            }\n            _node = _parent;\n        }\n        return index;\n    }\n}\nexport default TreeIterator;\n",
          "import { TreeNode } from './TreeNode';\nimport type { TreeNodeEnableIndex } from './TreeNode';\nimport { ContainerIterator, IteratorType } from '@/container/ContainerBase';\nimport TreeContainer from '@/container/TreeContainer/Base/index';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nabstract class TreeIterator<K, V> extends ContainerIterator<K | [K, V]> {\n  abstract readonly container: TreeContainer<K, V>;\n  /**\n   * @internal\n   */\n  _node: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected _header: TreeNode<K, V>;\n  /**\n   * @internal\n   */\n  protected constructor(\n    node: TreeNode<K, V>,\n    header: TreeNode<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = node;\n    this._header = header;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node === this._header._left) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre();\n        return this;\n      };\n\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next();\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node === this._header._right) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next();\n        return this;\n      };\n\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre();\n        return this;\n      };\n    }\n  }\n  /**\n   * @description Get the sequential index of the iterator in the tree container.<br/>\n   *              <strong>Note:</strong>\n   *              This function only takes effect when the specified tree container `enableIndex = true`.\n   * @returns The index subscript of the node in the tree.\n   * @example\n   * const st = new OrderedSet([1, 2, 3], true);\n   * console.log(st.begin().next().index);  // 1\n   */\n  get index() {\n    let _node = this._node as TreeNodeEnableIndex<K, V>;\n    const root = this._header._parent as TreeNodeEnableIndex<K, V>;\n    if (_node === this._header) {\n      if (root) {\n        return root._subTreeSize - 1;\n      }\n      return 0;\n    }\n    let index = 0;\n    if (_node._left) {\n      index += (_node._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n    }\n    while (_node !== root) {\n      const _parent = _node._parent as TreeNodeEnableIndex<K, V>;\n      if (_node === _parent._right) {\n        index += 1;\n        if (_parent._left) {\n          index += (_parent._left as TreeNodeEnableIndex<K, V>)._subTreeSize;\n        }\n      }\n      _node = _parent;\n    }\n    return index;\n  }\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n\nexport default TreeIterator;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/OrderedMap.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 54, 0, 75, 0, 52, 0, 36, 27, 18, 6, 1, 0,
        56, 29, 23, 27, 5, 19, 32, 56, 9, 23, 30, 23, 78, 14, 26, 32, 59, 17,
        26, 28, 13, 11, 5, 12, 89, 5, 1, 0, 40, 31, 20, 23, 32, 37, 12, 5, 12,
        36, 27, 27, 27, 5, 13, 72, 5, 11, 60, 5, 14, 75, 5, 12, 63, 5, 13, 33,
        27, 28, 5, 12, 33, 27, 28, 5, 19, 36, 55, 5, 19, 36, 55, 5, 26, 36, 55,
        5, 26, 37, 55, 5, 25, 31, 5, 13, 36, 55, 5, 24, 36, 19, 5, 14, 23, 32,
        37, 12, 22, 5, 25, 30, 5, 1, 0, 26, 0, 27, 38, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/TreeContainer/container/TreeContainer/OrderedMap.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/src/container/TreeContainer/OrderedMap.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_Base",
          "_interopRequireDefault",
          "require",
          "_TreeIterator",
          "_throwError",
          "obj",
          "__esModule",
          "OrderedMapIterator",
          "TreeIterator",
          "constructor",
          "node",
          "header",
          "container",
          "iteratorType",
          "super",
          "this",
          "pointer",
          "_node",
          "_header",
          "throwIteratorAccessError",
          "self",
          "Proxy",
          "get",
          "_",
          "props",
          "_key",
          "_value",
          "set",
          "newValue",
          "TypeError",
          "copy",
          "OrderedMap",
          "TreeContainer",
          "cmp",
          "enableIndex",
          "forEach",
          "el",
          "setElement",
          "K",
          "curNode",
          "undefined",
          "_iterationFunc",
          "_left",
          "_right",
          "begin",
          "end",
          "rBegin",
          "rEnd",
          "front",
          "_length",
          "minNode",
          "back",
          "maxNode",
          "lowerBound",
          "key",
          "resNode",
          "_lowerBound",
          "_root",
          "upperBound",
          "_upperBound",
          "reverseLowerBound",
          "_reverseLowerBound",
          "reverseUpperBound",
          "_reverseUpperBound",
          "hint",
          "_set",
          "find",
          "_findElementNode",
          "getElementByKey",
          "union",
          "other",
          "Symbol",
          "iterator",
          "_default"
        ],
        "mappings": "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",
        "file": "OrderedMap.js",
        "sourcesContent": [
          "import TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nclass OrderedMapIterator extends TreeIterator {\n    constructor(node, header, container, iteratorType) {\n        super(node, header, iteratorType);\n        this.container = container;\n    }\n    get pointer() {\n        if (this._node === this._header) {\n            throwIteratorAccessError();\n        }\n        const self = this;\n        return new Proxy([], {\n            get(_, props) {\n                if (props === '0')\n                    return self._node._key;\n                else if (props === '1')\n                    return self._node._value;\n            },\n            set(_, props, newValue) {\n                if (props !== '1') {\n                    throw new TypeError('props must be 1');\n                }\n                self._node._value = newValue;\n                return true;\n            }\n        });\n    }\n    copy() {\n        return new OrderedMapIterator(this._node, this._header, this.container, this.iteratorType);\n    }\n}\nclass OrderedMap extends TreeContainer {\n    /**\n     * @param container - The initialization container.\n     * @param cmp - The compare function.\n     * @param enableIndex - Whether to enable iterator indexing function.\n     * @example\n     * new OrderedMap();\n     * new OrderedMap([[0, 1], [2, 1]]);\n     * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y);\n     * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y, true);\n     */\n    constructor(container = [], cmp, enableIndex) {\n        super(cmp, enableIndex);\n        const self = this;\n        container.forEach(function (el) {\n            self.setElement(el[0], el[1]);\n        });\n    }\n    /**\n     * @internal\n     */\n    *_iterationFunc(curNode) {\n        if (curNode === undefined)\n            return;\n        yield* this._iterationFunc(curNode._left);\n        yield [curNode._key, curNode._value];\n        yield* this._iterationFunc(curNode._right);\n    }\n    begin() {\n        return new OrderedMapIterator(this._header._left || this._header, this._header, this);\n    }\n    end() {\n        return new OrderedMapIterator(this._header, this._header, this);\n    }\n    rBegin() {\n        return new OrderedMapIterator(this._header._right || this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    }\n    rEnd() {\n        return new OrderedMapIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    }\n    front() {\n        if (this._length === 0)\n            return;\n        const minNode = this._header._left;\n        return [minNode._key, minNode._value];\n    }\n    back() {\n        if (this._length === 0)\n            return;\n        const maxNode = this._header._right;\n        return [maxNode._key, maxNode._value];\n    }\n    lowerBound(key) {\n        const resNode = this._lowerBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header, this);\n    }\n    upperBound(key) {\n        const resNode = this._upperBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header, this);\n    }\n    reverseLowerBound(key) {\n        const resNode = this._reverseLowerBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header, this);\n    }\n    reverseUpperBound(key) {\n        const resNode = this._reverseUpperBound(this._root, key);\n        return new OrderedMapIterator(resNode, this._header, this);\n    }\n    /**\n     * @description Insert a key-value pair or set value by the given key.\n     * @param key - The key want to insert.\n     * @param value - The value want to set.\n     * @param hint - You can give an iterator hint to improve insertion efficiency.\n     * @return The size of container after setting.\n     * @example\n     * const mp = new OrderedMap([[2, 0], [4, 0], [5, 0]]);\n     * const iter = mp.begin();\n     * mp.setElement(1, 0);\n     * mp.setElement(3, 0, iter);  // give a hint will be faster.\n     */\n    setElement(key, value, hint) {\n        return this._set(key, value, hint);\n    }\n    find(key) {\n        const curNode = this._findElementNode(this._root, key);\n        return new OrderedMapIterator(curNode, this._header, this);\n    }\n    /**\n     * @description Get the value of the element of the specified key.\n     * @param key - The specified key you want to get.\n     * @example\n     * const val = container.getElementByKey(1);\n     */\n    getElementByKey(key) {\n        const curNode = this._findElementNode(this._root, key);\n        return curNode._value;\n    }\n    union(other) {\n        const self = this;\n        other.forEach(function (el) {\n            self.setElement(el[0], el[1]);\n        });\n        return this._length;\n    }\n    [Symbol.iterator]() {\n        return this._iterationFunc(this._root);\n    }\n}\nexport default OrderedMap;\n",
          "import TreeContainer from './Base';\nimport TreeIterator from './Base/TreeIterator';\nimport { TreeNode } from './Base/TreeNode';\nimport { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass OrderedMapIterator<K, V> extends TreeIterator<K, V> {\n  container: OrderedMap<K, V>;\n  constructor(\n    node: TreeNode<K, V>,\n    header: TreeNode<K, V>,\n    container: OrderedMap<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(node, header, iteratorType);\n    this.container = container;\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    const self = this;\n    return new Proxy(<[K, V]><unknown>[], {\n      get(_, props: '0' | '1') {\n        if (props === '0') return self._node._key;\n        else if (props === '1') return self._node._value;\n      },\n      set(_, props: '1', newValue: V) {\n        if (props !== '1') {\n          throw new TypeError('props must be 1');\n        }\n        self._node._value = newValue;\n        return true;\n      }\n    });\n  }\n  copy() {\n    return new OrderedMapIterator<K, V>(\n      this._node,\n      this._header,\n      this.container,\n      this.iteratorType\n    );\n  }\n  // @ts-ignore\n  equals(iter: OrderedMapIterator<K, V>): boolean;\n}\n\nexport type { OrderedMapIterator };\n\nclass OrderedMap<K, V> extends TreeContainer<K, V> {\n  /**\n   * @param container - The initialization container.\n   * @param cmp - The compare function.\n   * @param enableIndex - Whether to enable iterator indexing function.\n   * @example\n   * new OrderedMap();\n   * new OrderedMap([[0, 1], [2, 1]]);\n   * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y);\n   * new OrderedMap([[0, 1], [2, 1]], (x, y) => x - y, true);\n   */\n  constructor(\n    container: initContainer<[K, V]> = [],\n    cmp?: (x: K, y: K) => number,\n    enableIndex?: boolean\n  ) {\n    super(cmp, enableIndex);\n    const self = this;\n    container.forEach(function (el) {\n      self.setElement(el[0], el[1]);\n    });\n  }\n  /**\n   * @internal\n   */\n  private * _iterationFunc(\n    curNode: TreeNode<K, V> | undefined\n  ): Generator<[K, V], void> {\n    if (curNode === undefined) return;\n    yield * this._iterationFunc(curNode._left);\n    yield <[K, V]>[curNode._key, curNode._value];\n    yield * this._iterationFunc(curNode._right);\n  }\n  begin() {\n    return new OrderedMapIterator<K, V>(this._header._left || this._header, this._header, this);\n  }\n  end() {\n    return new OrderedMapIterator<K, V>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new OrderedMapIterator<K, V>(\n      this._header._right || this._header,\n      this._header,\n      this,\n      IteratorType.REVERSE\n    );\n  }\n  rEnd() {\n    return new OrderedMapIterator<K, V>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front() {\n    if (this._length === 0) return;\n    const minNode = this._header._left!;\n    return <[K, V]>[minNode._key, minNode._value];\n  }\n  back() {\n    if (this._length === 0) return;\n    const maxNode = this._header._right!;\n    return <[K, V]>[maxNode._key, maxNode._value];\n  }\n  lowerBound(key: K) {\n    const resNode = this._lowerBound(this._root, key);\n    return new OrderedMapIterator<K, V>(resNode, this._header, this);\n  }\n  upperBound(key: K) {\n    const resNode = this._upperBound(this._root, key);\n    return new OrderedMapIterator<K, V>(resNode, this._header, this);\n  }\n  reverseLowerBound(key: K) {\n    const resNode = this._reverseLowerBound(this._root, key);\n    return new OrderedMapIterator<K, V>(resNode, this._header, this);\n  }\n  reverseUpperBound(key: K) {\n    const resNode = this._reverseUpperBound(this._root, key);\n    return new OrderedMapIterator<K, V>(resNode, this._header, this);\n  }\n  /**\n   * @description Insert a key-value pair or set value by the given key.\n   * @param key - The key want to insert.\n   * @param value - The value want to set.\n   * @param hint - You can give an iterator hint to improve insertion efficiency.\n   * @return The size of container after setting.\n   * @example\n   * const mp = new OrderedMap([[2, 0], [4, 0], [5, 0]]);\n   * const iter = mp.begin();\n   * mp.setElement(1, 0);\n   * mp.setElement(3, 0, iter);  // give a hint will be faster.\n   */\n  setElement(key: K, value: V, hint?: OrderedMapIterator<K, V>) {\n    return this._set(key, value, hint);\n  }\n  find(key: K) {\n    const curNode = this._findElementNode(this._root, key);\n    return new OrderedMapIterator<K, V>(curNode, this._header, this);\n  }\n  /**\n   * @description Get the value of the element of the specified key.\n   * @param key - The specified key you want to get.\n   * @example\n   * const val = container.getElementByKey(1);\n   */\n  getElementByKey(key: K) {\n    const curNode = this._findElementNode(this._root, key);\n    return curNode._value;\n  }\n  union(other: OrderedMap<K, V>) {\n    const self = this;\n    other.forEach(function (el) {\n      self.setElement(el[0], el[1]);\n    });\n    return this._length;\n  }\n  [Symbol.iterator]() {\n    return this._iterationFunc(this._root);\n  }\n  // @ts-ignore\n  eraseElementByIterator(iter: OrderedMapIterator<K, V>): OrderedMapIterator<K, V>;\n  // @ts-ignore\n  forEach(callback: (element: [K, V], index: number, map: OrderedMap<K, V>) => void): void;\n  // @ts-ignore\n  getElementByPos(pos: number): [K, V];\n}\n\nexport default OrderedMap;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/HashContainer/HashSet.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 30, 0, 52, 0, 59, 29, 23, 27, 5, 19, 32, 56,
        9, 24, 5, 12, 86, 5, 1, 0, 43, 25, 16, 23, 32, 24, 12, 5, 13, 57, 5, 11,
        57, 5, 14, 60, 5, 12, 60, 5, 13, 24, 5, 12, 24, 5, 18, 39, 5, 24, 38,
        33, 9, 23, 21, 20, 9, 19, 5, 16, 31, 52, 5, 16, 18, 23, 30, 30, 20, 9,
        5, 25, 28, 27, 34, 26, 24, 13, 23, 5, 1, 0, 23, 0, 27, 35, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/HashContainer/container/HashContainer/HashSet.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/src/container/HashContainer/HashSet.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_Base",
          "require",
          "_throwError",
          "HashSetIterator",
          "HashContainerIterator",
          "constructor",
          "node",
          "header",
          "container",
          "iteratorType",
          "super",
          "this",
          "pointer",
          "_node",
          "_header",
          "throwIteratorAccessError",
          "_key",
          "copy",
          "HashSet",
          "HashContainer",
          "self",
          "forEach",
          "el",
          "insert",
          "begin",
          "_head",
          "end",
          "rBegin",
          "_tail",
          "rEnd",
          "front",
          "back",
          "key",
          "isObject",
          "_set",
          "undefined",
          "getElementByPos",
          "pos",
          "_length",
          "RangeError",
          "_next",
          "find",
          "_findElementNode",
          "callback",
          "index",
          "Symbol",
          "iterator",
          "bind",
          "_default"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,eAAe;;ACJvB,IAAAC,QAAAC,QAAA;;AAEA,IAAAC,cAAAD,QAAA;;AAEA,MAAME,wBAA2BC,MAAAA;IAE/BC,YACEC,GACAC,GACAC,GACAC;QAEAC,MAAMJ,GAAMC,GAAQE;QACpBE,KAAKH,YAAYA;ADPjB;ICSEI;QACF,IAAID,KAAKE,MAAUF,KAAKG,GAAS;aAC/B,GAAAC,YAAAA;ADPE;QCSJ,OAAOJ,KAAKE,EAAMG;ADPlB;ICSFC;QACE,OAAO,IAAId,gBAAmBQ,KAAKE,GAAOF,KAAKG,GAASH,KAAKH,WAAWG,KAAKF;ADP7E;;;ACeJ,MAAMS,gBAAmBC,MAAAA;IACvBd,YAAYG,IAA8B;QACxCE;QACA,MAAMU,IAAOT;QACbH,EAAUa,SAAQ,SAAUC;YAC1BF,EAAKG,OAAOD;ADZV;AACJ;ICcFE;QACE,OAAO,IAAIrB,gBAAmBQ,KAAKc,GAAOd,KAAKG,GAASH;ADZxD;ICcFe;QACE,OAAO,IAAIvB,gBAAmBQ,KAAKG,GAASH,KAAKG,GAASH;ADZ1D;ICcFgB;QACE,OAAO,IAAIxB,gBAAmBQ,KAAKiB,GAAOjB,KAAKG,GAASH,MAAI;ADZ5D;ICcFkB;QACE,OAAO,IAAI1B,gBAAmBQ,KAAKG,GAASH,KAAKG,GAASH,MAAI;ADZ9D;ICcFmB;QACE,OAAOnB,KAAKc,EAAMT;ADZlB;ICcFe;QACE,OAAOpB,KAAKiB,EAAMZ;ADZlB;ICqBFO,OAAOS,GAAQC;QACb,OAAOtB,KAAKuB,EAAKF,GAAKG,WAAWF;ADZjC;ICcFG,gBAAgBC;QDZV,ICasBA,IAAG,KAAHA,IAAQ1B,KAAK2B,IAAO,GA/DI;YAAE,MAAU,IAChEC;ADmDM;QCYJ,IAAIjC,IAAOK,KAAKc;QAChB,OAAOY,KAAO;YACZ/B,IAAOA,EAAKkC;ADVV;QCYJ,OAAOlC,EAAKU;ADVZ;ICmBFyB,KAAKT,GAAQC;QACX,MAAM3B,IAAOK,KAAK+B,EAAiBV,GAAKC;QACxC,OAAO,IAAI9B,gBAAmBG,GAAMK,KAAKG,GAASH;ADVlD;ICYFU,QAAQsB;QACN,IAAIC,IAAQ;QACZ,IAAItC,IAAOK,KAAKc;QAChB,OAAOnB,MAASK,KAAKG,GAAS;YAC5B6B,EAASrC,EAAKU,GAAM4B,KAASjC;YAC7BL,IAAOA,EAAKkC;ADVV;AACJ;ICYF,CAACK,OAAOC;QACN,OAAO;YACL,IAAIxC,IAAOK,KAAKc;YAChB,OAAOnB,MAASK,KAAKG,GAAS;sBACtBR,EAAKU;gBACXV,IAAOA,EAAKkC;ADVR;AACJ,UCWFO,KAAKpC,KANA;ADJP;;;ACYH,IAAAqC,WAEc9B;;AAAOrB,QAAAE,UAAAiD",
        "file": "HashSet.js",
        "sourcesContent": [
          "import { HashContainer, HashContainerIterator } from \"./Base\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nclass HashSetIterator extends HashContainerIterator {\n    constructor(node, header, container, iteratorType) {\n        super(node, header, iteratorType);\n        this.container = container;\n    }\n    get pointer() {\n        if (this._node === this._header) {\n            throwIteratorAccessError();\n        }\n        return this._node._key;\n    }\n    copy() {\n        return new HashSetIterator(this._node, this._header, this.container, this.iteratorType);\n    }\n}\nclass HashSet extends HashContainer {\n    constructor(container = []) {\n        super();\n        const self = this;\n        container.forEach(function (el) {\n            self.insert(el);\n        });\n    }\n    begin() {\n        return new HashSetIterator(this._head, this._header, this);\n    }\n    end() {\n        return new HashSetIterator(this._header, this._header, this);\n    }\n    rBegin() {\n        return new HashSetIterator(this._tail, this._header, this, 1 /* IteratorType.REVERSE */);\n    }\n    rEnd() {\n        return new HashSetIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    }\n    front() {\n        return this._head._key;\n    }\n    back() {\n        return this._tail._key;\n    }\n    /**\n     * @description Insert element to set.\n     * @param key - The key want to insert.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns The size of container after inserting.\n     */\n    insert(key, isObject) {\n        return this._set(key, undefined, isObject);\n    }\n    getElementByPos(pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        let node = this._head;\n        while (pos--) {\n            node = node._next;\n        }\n        return node._key;\n    }\n    /**\n     * @description Check key if exist in container.\n     * @param key - The element you want to search.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns An iterator pointing to the element if found, or super end if not found.\n     */\n    find(key, isObject) {\n        const node = this._findElementNode(key, isObject);\n        return new HashSetIterator(node, this._header, this);\n    }\n    forEach(callback) {\n        let index = 0;\n        let node = this._head;\n        while (node !== this._header) {\n            callback(node._key, index++, this);\n            node = node._next;\n        }\n    }\n    [Symbol.iterator]() {\n        return function* () {\n            let node = this._head;\n            while (node !== this._header) {\n                yield node._key;\n                node = node._next;\n            }\n        }.bind(this)();\n    }\n}\nexport default HashSet;\n",
          "import { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { HashContainer, HashContainerIterator, HashLinkNode } from '@/container/HashContainer/Base';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass HashSetIterator<K> extends HashContainerIterator<K, undefined> {\n  readonly container: HashSet<K>;\n  constructor(\n    node: HashLinkNode<K, undefined>,\n    header: HashLinkNode<K, undefined>,\n    container: HashSet<K>,\n    iteratorType?: IteratorType\n  ) {\n    super(node, header, iteratorType);\n    this.container = container;\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    return this._node._key;\n  }\n  copy() {\n    return new HashSetIterator<K>(this._node, this._header, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: HashSetIterator<K>): boolean;\n}\n\nexport type { HashSetIterator };\n\nclass HashSet<K> extends HashContainer<K, undefined> {\n  constructor(container: initContainer<K> = []) {\n    super();\n    const self = this;\n    container.forEach(function (el) {\n      self.insert(el);\n    });\n  }\n  begin() {\n    return new HashSetIterator<K>(this._head, this._header, this);\n  }\n  end() {\n    return new HashSetIterator<K>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new HashSetIterator<K>(this._tail, this._header, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new HashSetIterator<K>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front(): K | undefined {\n    return this._head._key;\n  }\n  back(): K | undefined {\n    return this._tail._key;\n  }\n  /**\n   * @description Insert element to set.\n   * @param key - The key want to insert.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns The size of container after inserting.\n   */\n  insert(key: K, isObject?: boolean) {\n    return this._set(key, undefined, isObject);\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let node = this._head;\n    while (pos--) {\n      node = node._next;\n    }\n    return node._key;\n  }\n  /**\n   * @description Check key if exist in container.\n   * @param key - The element you want to search.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns An iterator pointing to the element if found, or super end if not found.\n   */\n  find(key: K, isObject?: boolean) {\n    const node = this._findElementNode(key, isObject);\n    return new HashSetIterator<K>(node, this._header, this);\n  }\n  forEach(callback: (element: K, index: number, container: HashSet<K>) => void) {\n    let index = 0;\n    let node = this._head;\n    while (node !== this._header) {\n      callback(node._key, index++, this);\n      node = node._next;\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: HashSet<K>) {\n      let node = this._head;\n      while (node !== this._header) {\n        yield node._key;\n        node = node._next;\n      }\n    }.bind(this)();\n  }\n}\n\nexport default HashSet;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/HashContainer/Base/index.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 63, 0, 52, 0, 81, 0, 55, 0, 36, 27, 18, 6, 1, 0,
        70, 26, 17, 19, 19, 38, 35, 42, 64, 17, 34, 28, 14, 36, 40, 64, 17, 34,
        28, 14, 16, 35, 42, 64, 17, 34, 28, 14, 36, 40, 64, 17, 34, 28, 14, 9,
        5, 1, 0, 54, 0, 54, 19, 16, 20, 20, 45, 44, 20, 55, 5, 10, 31, 16, 16,
        27, 23, 9, 27, 23, 9, 20, 5, 16, 62, 14, 16, 39, 34, 32, 30, 13, 53, 37,
        34, 15, 17, 21, 21, 26, 25, 14, 27, 16, 32, 20, 24, 30, 13, 17, 21, 21,
        26, 25, 14, 26, 9, 27, 23, 25, 16, 25, 9, 19, 21, 24, 5, 13, 62, 16, 39,
        47, 29, 16, 39, 9, 5, 13, 32, 37, 26, 12, 20, 20, 44, 19, 55, 5, 29, 14,
        62, 16, 39, 46, 36, 26, 29, 16, 26, 46, 29, 9, 18, 20, 5, 31, 22, 27,
        56, 9, 18, 24, 5, 26, 38, 33, 9, 23, 21, 20, 9, 18, 22, 5, 1, 0, 38, 33,
        0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/HashContainer/Base/container/HashContainer/Base/index.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/src/container/HashContainer/Base/index.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "HashContainerIterator",
          "HashContainer",
          "_ContainerBase",
          "require",
          "_checkObject",
          "_interopRequireDefault",
          "_throwError",
          "obj",
          "__esModule",
          "default",
          "ContainerIterator",
          "constructor",
          "node",
          "header",
          "iteratorType",
          "super",
          "this",
          "_node",
          "_header",
          "pre",
          "_pre",
          "throwIteratorAccessError",
          "next",
          "_next",
          "Container",
          "_objMap",
          "_originMap",
          "HASH_TAG",
          "Symbol",
          "setPrototypeOf",
          "_head",
          "_tail",
          "_eraseNode",
          "L",
          "B",
          "_length",
          "_set",
          "key",
          "isObject",
          "undefined",
          "checkObject",
          "newTail",
          "index",
          "_value",
          "length",
          "configurable",
          "_key",
          "push",
          "_findElementNode",
          "clear",
          "forEach",
          "el",
          "eraseElementByKey",
          "eraseElementByIterator",
          "iter",
          "eraseElementByPos",
          "pos",
          "RangeError"
        ],
        "mappings": "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",
        "file": "index.js",
        "sourcesContent": [
          "import { Container, ContainerIterator } from \"../../ContainerBase\";\nimport checkObject from \"../../../utils/checkObject\";\nimport $checkWithinAccessParams from \"../../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../../utils/throwError\";\nexport class HashContainerIterator extends ContainerIterator {\n    /**\n     * @internal\n     */\n    constructor(node, header, iteratorType) {\n        super(iteratorType);\n        this._node = node;\n        this._header = header;\n        if (this.iteratorType === 0 /* IteratorType.NORMAL */) {\n            this.pre = function () {\n                if (this._node._pre === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n            this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n        }\n        else {\n            this.pre = function () {\n                if (this._node._next === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._next;\n                return this;\n            };\n            this.next = function () {\n                if (this._node === this._header) {\n                    throwIteratorAccessError();\n                }\n                this._node = this._node._pre;\n                return this;\n            };\n        }\n    }\n}\nexport class HashContainer extends Container {\n    /**\n     * @internal\n     */\n    constructor() {\n        super();\n        /**\n         * @internal\n         */\n        this._objMap = [];\n        /**\n         * @internal\n         */\n        this._originMap = {};\n        /**\n         * @description Unique symbol used to tag object.\n         */\n        this.HASH_TAG = Symbol('@@HASH_TAG');\n        Object.setPrototypeOf(this._originMap, null);\n        this._header = {};\n        this._header._pre = this._header._next = this._head = this._tail = this._header;\n    }\n    /**\n     * @internal\n     */\n    _eraseNode(node) {\n        const { _pre, _next } = node;\n        _pre._next = _next;\n        _next._pre = _pre;\n        if (node === this._head) {\n            this._head = _next;\n        }\n        if (node === this._tail) {\n            this._tail = _pre;\n        }\n        this._length -= 1;\n    }\n    /**\n     * @internal\n     */\n    _set(key, value, isObject) {\n        if (isObject === undefined)\n            isObject = checkObject(key);\n        let newTail;\n        if (isObject) {\n            const index = key[this.HASH_TAG];\n            if (index !== undefined) {\n                this._objMap[index]._value = value;\n                return this._length;\n            }\n            Object.defineProperty(key, this.HASH_TAG, {\n                value: this._objMap.length,\n                configurable: true\n            });\n            newTail = {\n                _key: key,\n                _value: value,\n                _pre: this._tail,\n                _next: this._header\n            };\n            this._objMap.push(newTail);\n        }\n        else {\n            const node = this._originMap[key];\n            if (node) {\n                node._value = value;\n                return this._length;\n            }\n            newTail = {\n                _key: key,\n                _value: value,\n                _pre: this._tail,\n                _next: this._header\n            };\n            this._originMap[key] = newTail;\n        }\n        if (this._length === 0) {\n            this._head = newTail;\n            this._header._next = newTail;\n        }\n        else {\n            this._tail._next = newTail;\n        }\n        this._tail = newTail;\n        this._header._pre = newTail;\n        return ++this._length;\n    }\n    /**\n     * @internal\n     */\n    _findElementNode(key, isObject) {\n        if (isObject === undefined)\n            isObject = checkObject(key);\n        if (isObject) {\n            const index = key[this.HASH_TAG];\n            if (index === undefined)\n                return this._header;\n            return this._objMap[index];\n        }\n        else {\n            return this._originMap[key] || this._header;\n        }\n    }\n    clear() {\n        const HASH_TAG = this.HASH_TAG;\n        this._objMap.forEach(function (el) {\n            delete el._key[HASH_TAG];\n        });\n        this._objMap = [];\n        this._originMap = {};\n        Object.setPrototypeOf(this._originMap, null);\n        this._length = 0;\n        this._head = this._tail = this._header._pre = this._header._next = this._header;\n    }\n    /**\n     * @description Remove the element of the specified key.\n     * @param key - The key you want to remove.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns Whether erase successfully.\n     */\n    eraseElementByKey(key, isObject) {\n        let node;\n        if (isObject === undefined)\n            isObject = checkObject(key);\n        if (isObject) {\n            const index = key[this.HASH_TAG];\n            if (index === undefined)\n                return false;\n            delete key[this.HASH_TAG];\n            node = this._objMap[index];\n            delete this._objMap[index];\n        }\n        else {\n            node = this._originMap[key];\n            if (node === undefined)\n                return false;\n            delete this._originMap[key];\n        }\n        this._eraseNode(node);\n        return true;\n    }\n    eraseElementByIterator(iter) {\n        const node = iter._node;\n        if (node === this._header) {\n            throwIteratorAccessError();\n        }\n        this._eraseNode(node);\n        return iter.next();\n    }\n    eraseElementByPos(pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        let node = this._head;\n        while (pos--) {\n            node = node._next;\n        }\n        this._eraseNode(node);\n        return this._length;\n    }\n}\n",
          "import { Container, ContainerIterator, IteratorType } from '@/container/ContainerBase';\nimport checkObject from '@/utils/checkObject';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nexport type HashLinkNode<K, V> = {\n  _key: K,\n  _value: V,\n  _pre: HashLinkNode<K, V>,\n  _next: HashLinkNode<K, V>\n}\n\nexport abstract class HashContainerIterator<K, V> extends ContainerIterator<K | [K, V]> {\n  abstract readonly container: HashContainer<K, V>;\n  /**\n   * @internal\n   */\n  _node: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  protected readonly _header: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  protected constructor(\n    node: HashLinkNode<K, V>,\n    header: HashLinkNode<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(iteratorType);\n    this._node = node;\n    this._header = header;\n    if (this.iteratorType === IteratorType.NORMAL) {\n      this.pre = function () {\n        if (this._node._pre === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n    } else {\n      this.pre = function () {\n        if (this._node._next === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._next;\n        return this;\n      };\n      this.next = function () {\n        if (this._node === this._header) {\n          throwIteratorAccessError();\n        }\n        this._node = this._node._pre;\n        return this;\n      };\n    }\n  }\n  // @ts-ignore\n  pre(): this;\n  // @ts-ignore\n  next(): this;\n}\n\nexport abstract class HashContainer<K, V> extends Container<K | [K, V]> {\n  /**\n   * @internal\n   */\n  protected _objMap: HashLinkNode<K, V>[] = [];\n  /**\n   * @internal\n   */\n  protected _originMap: Record<string, HashLinkNode<K, V>> = {};\n  /**\n   * @internal\n   */\n  protected _head: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  protected _tail: HashLinkNode<K, V>;\n  /**\n   * @internal\n   */\n  protected readonly _header: HashLinkNode<K, V>;\n  /**\n   * @description Unique symbol used to tag object.\n   */\n  readonly HASH_TAG = Symbol('@@HASH_TAG');\n  /**\n   * @internal\n   */\n  protected constructor() {\n    super();\n    Object.setPrototypeOf(this._originMap, null);\n    this._header = <HashLinkNode<K, V>>{};\n    this._header._pre = this._header._next = this._head = this._tail = this._header;\n  }\n  /**\n   * @internal\n   */\n  protected _eraseNode(node: HashLinkNode<K, V>) {\n    const { _pre, _next } = node;\n    _pre._next = _next;\n    _next._pre = _pre;\n    if (node === this._head) {\n      this._head = _next;\n    }\n    if (node === this._tail) {\n      this._tail = _pre;\n    }\n    this._length -= 1;\n  }\n  /**\n   * @internal\n   */\n  protected _set(key: K, value?: V, isObject?: boolean) {\n    if (isObject === undefined) isObject = checkObject(key);\n    let newTail;\n    if (isObject) {\n      const index = (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      if (index !== undefined) {\n        this._objMap[<number>index]._value = <V>value;\n        return this._length;\n      }\n      Object.defineProperty(key, this.HASH_TAG, {\n        value: this._objMap.length,\n        configurable: true\n      });\n      newTail = {\n        _key: key,\n        _value: <V>value,\n        _pre: this._tail,\n        _next: this._header\n      };\n      this._objMap.push(newTail);\n    } else {\n      const node = this._originMap[<string><unknown>key];\n      if (node) {\n        node._value = <V>value;\n        return this._length;\n      }\n      newTail = {\n        _key: key,\n        _value: <V>value,\n        _pre: this._tail,\n        _next: this._header\n      };\n      this._originMap[<string><unknown>key] = newTail;\n    }\n    if (this._length === 0) {\n      this._head = newTail;\n      this._header._next = newTail;\n    } else {\n      this._tail._next = newTail;\n    }\n    this._tail = newTail;\n    this._header._pre = newTail;\n    return ++this._length;\n  }\n  /**\n   * @internal\n   */\n  protected _findElementNode(key: K, isObject?: boolean) {\n    if (isObject === undefined) isObject = checkObject(key);\n    if (isObject) {\n      const index = (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      if (index === undefined) return this._header;\n      return this._objMap[index];\n    } else {\n      return this._originMap[<string><unknown>key] || this._header;\n    }\n  }\n  clear() {\n    const HASH_TAG = this.HASH_TAG;\n    this._objMap.forEach(function (el) {\n      delete (<Record<symbol, number>><unknown>el._key)[HASH_TAG];\n    });\n    this._objMap = [];\n    this._originMap = {};\n    Object.setPrototypeOf(this._originMap, null);\n    this._length = 0;\n    this._head = this._tail = this._header._pre = this._header._next = this._header;\n  }\n  /**\n   * @description Remove the element of the specified key.\n   * @param key - The key you want to remove.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns Whether erase successfully.\n   */\n  eraseElementByKey(key: K, isObject?: boolean) {\n    let node;\n    if (isObject === undefined) isObject = checkObject(key);\n    if (isObject) {\n      const index = (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      if (index === undefined) return false;\n      delete (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      node = this._objMap[index];\n      delete this._objMap[index];\n    } else {\n      node = this._originMap[<string><unknown>key];\n      if (node === undefined) return false;\n      delete this._originMap[<string><unknown>key];\n    }\n    this._eraseNode(node);\n    return true;\n  }\n  eraseElementByIterator(iter: HashContainerIterator<K, V>) {\n    const node = iter._node;\n    if (node === this._header) {\n      throwIteratorAccessError();\n    }\n    this._eraseNode(node);\n    return iter.next();\n  }\n  eraseElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let node = this._head;\n    while (pos--) {\n      node = node._next;\n    }\n    this._eraseNode(node);\n    return this._length;\n  }\n}\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/utils/checkObject.js": {
      "lineLengths": [13, 0, 37, 15, 3, 0, 30, 0, 25, 23, 60, 1, 39, 0],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/utils/utils/checkObject.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/src/utils/checkObject.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "checkObject",
          "key",
          "t"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,UAAUC;;ACCJ,SAAUA,YAAeC;IACrC,MAAMC,WAAWD;IACjB,OAAQC,MAAM,YAAYD,MAAQ,QAASC,MAAM;ADCnD",
        "file": "checkObject.js",
        "sourcesContent": [
          "/**\n * @description Determine whether the type of key is `object`.\n * @param key - The key want to check.\n * @returns Whether the type of key is `object`.\n * @internal\n */\nexport default function checkObject(key) {\n    const t = typeof key;\n    return (t === 'object' && key !== null) || t === 'function';\n}\n",
          "/**\n * @description Determine whether the type of key is `object`.\n * @param key - The key want to check.\n * @returns Whether the type of key is `object`.\n * @internal\n */\nexport default function checkObject<T>(key: T) {\n  const t = typeof key;\n  return (t === 'object' && key !== null) || t === 'function';\n}\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/HashContainer/HashMap.js": {
      "lineLengths": [
        13, 0, 37, 15, 3, 0, 25, 0, 30, 0, 78, 0, 52, 0, 36, 27, 18, 6, 1, 0,
        59, 29, 23, 27, 5, 19, 32, 56, 9, 23, 30, 23, 78, 14, 26, 32, 59, 17,
        26, 28, 13, 11, 5, 12, 86, 5, 1, 0, 43, 25, 16, 23, 32, 37, 12, 5, 13,
        57, 5, 11, 57, 5, 14, 60, 5, 12, 60, 5, 13, 33, 38, 5, 12, 33, 38, 5,
        25, 31, 5, 27, 62, 16, 39, 61, 9, 28, 35, 5, 24, 38, 33, 9, 23, 21, 20,
        9, 28, 5, 16, 31, 52, 5, 16, 18, 23, 30, 39, 20, 9, 5, 25, 28, 27, 34,
        35, 24, 13, 23, 5, 1, 0, 23, 0, 27, 35, 0
      ],
      "data": {
        "version": 3,
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/container/HashContainer/container/HashContainer/HashMap.js",
          "file:///Users/markus/Code/pixoo-daemon/node_modules/js-sdsl/dist/cjs/src/container/HashContainer/HashMap.ts"
        ],
        "names": [
          "Object",
          "defineProperty",
          "exports",
          "value",
          "default",
          "_Base",
          "require",
          "_checkObject",
          "_interopRequireDefault",
          "_throwError",
          "obj",
          "__esModule",
          "HashMapIterator",
          "HashContainerIterator",
          "constructor",
          "node",
          "header",
          "container",
          "iteratorType",
          "super",
          "this",
          "pointer",
          "_node",
          "_header",
          "throwIteratorAccessError",
          "self",
          "Proxy",
          "get",
          "_",
          "props",
          "_key",
          "_value",
          "set",
          "newValue",
          "TypeError",
          "copy",
          "HashMap",
          "HashContainer",
          "forEach",
          "el",
          "setElement",
          "begin",
          "_head",
          "end",
          "rBegin",
          "_tail",
          "rEnd",
          "front",
          "_length",
          "back",
          "key",
          "isObject",
          "_set",
          "getElementByKey",
          "undefined",
          "checkObject",
          "index",
          "HASH_TAG",
          "_objMap",
          "_originMap",
          "getElementByPos",
          "pos",
          "RangeError",
          "_next",
          "find",
          "_findElementNode",
          "callback",
          "Symbol",
          "iterator",
          "bind",
          "_default"
        ],
        "mappings": "AAAA;;AAEAA,OAAOC,eAAeC,SAAS,KAAc;IAC3CC,OAAO;;;AAETD,QAAQE,eAAe;;ACJvB,IAAAC,QAAAC,QAAA;;AACA,IAAAC,eAAAC,uBAAAF,QAAA;;AAEA,IAAAG,cAAAH,QAAA;;AAA8D,SAAAE,uBAAAE;IAAA,OAAAA,KAAAA,EAAAC,IAAAD,IAAA;QAAAN,SAAAM;;AAAA;;AAE9D,MAAME,wBAA8BC,MAAAA;IAElCC,YACEC,GACAC,GACAC,GACAC;QAEAC,MAAMJ,GAAMC,GAAQE;QACpBE,KAAKH,YAAYA;ADPjB;ICSEI;QACF,IAAID,KAAKE,MAAUF,KAAKG,GAAS;aAC/B,GAAAC,YAAAA;ADPE;QCSJ,MAAMC,IAAOL;QACb,OAAO,IAAIM,MAAuB,IAAI;YACpCC,IAAIC,GAAGC;gBACL,IAAIA,MAAU,KAAK,OAAOJ,EAAKH,EAAMQ,QAChC,IAAID,MAAU,KAAK,OAAOJ,EAAKH,EAAMS;ADLtC;YCONC,IAAIJ,GAAGC,GAAYI;gBACjB,IAAIJ,MAAU,KAAK;oBACjB,MAAM,IAAIK,UAAU;ADLd;gBCORT,EAAKH,EAAMS,IAASE;gBACpB,OAAO;ADLH;;AAER;ICOFE;QACE,OAAO,IAAIvB,gBAAsBQ,KAAKE,GAAOF,KAAKG,GAASH,KAAKH,WAAWG,KAAKF;ADLhF;;;ACaJ,MAAMkB,gBAAsBC,MAAAA;IAC1BvB,YAAYG,IAAmC;QAC7CE;QACA,MAAMM,IAAOL;QACbH,EAAUqB,SAAQ,SAAUC;YAC1Bd,EAAKe,WAAWD,EAAG,IAAIA,EAAG;ADVxB;AACJ;ICYFE;QACE,OAAO,IAAI7B,gBAAsBQ,KAAKsB,GAAOtB,KAAKG,GAASH;ADV3D;ICYFuB;QACE,OAAO,IAAI/B,gBAAsBQ,KAAKG,GAASH,KAAKG,GAASH;ADV7D;ICYFwB;QACE,OAAO,IAAIhC,gBAAsBQ,KAAKyB,GAAOzB,KAAKG,GAASH,MAAI;ADV/D;ICYF0B;QACE,OAAO,IAAIlC,gBAAsBQ,KAAKG,GAASH,KAAKG,GAASH,MAAI;ADVjE;ICYF2B;QACE,IAAI3B,KAAK4B,MAAY,GAAG;QACxB,OAAe,EAAC5B,KAAKsB,EAAMZ,GAAMV,KAAKsB,EAAMX;ADT5C;ICWFkB;QACE,IAAI7B,KAAK4B,MAAY,GAAG;QACxB,OAAe,EAAC5B,KAAKyB,EAAMf,GAAMV,KAAKyB,EAAMd;ADR5C;ICkBFS,WAAWU,GAAQ/C,GAAUgD;QAC3B,OAAO/B,KAAKgC,EAAKF,GAAK/C,GAAOgD;ADR7B;ICkBFE,gBAAgBH,GAAQC;QACtB,IAAIA,MAAaG,WAAWH,KAAW,GAAAI,aAAAA,SAAYL;QACnD,IAAIC,GAAU;YACZ,MAAMK,IAA0CN,EAAK9B,KAAKqC;YAC1D,OAAOD,MAAUF,YAAYlC,KAAKsC,EAAQF,GAAOzB,IAASuB;ADPxD;QCSJ,MAAMvC,IAAOK,KAAKuC,EAA4BT;QAC9C,OAAOnC,IAAOA,EAAKgB,IAASuB;ADP5B;ICSFM,gBAAgBC;QDPV,ICQsBA,IAAG,KAAHA,IAAQzC,KAAK4B,IAAO,GAhG3C;YAAE,MAAU,IAAIc;AD0Ff;QCOJ,IAAI/C,IAAOK,KAAKsB;QAChB,OAAOmB,KAAO;YACZ9C,IAAOA,EAAKgD;ADLV;QCOJ,OAAe,EAAChD,EAAKe,GAAMf,EAAKgB;ADLhC;ICcFiC,KAAKd,GAAQC;QACX,MAAMpC,IAAOK,KAAK6C,EAAiBf,GAAKC;QACxC,OAAO,IAAIvC,gBAAsBG,GAAMK,KAAKG,GAASH;ADLrD;ICOFkB,QAAQ4B;QACN,IAAIV,IAAQ;QACZ,IAAIzC,IAAOK,KAAKsB;QAChB,OAAO3B,MAASK,KAAKG,GAAS;YAC5B2C,EAAiB,EAACnD,EAAKe,GAAMf,EAAKgB,KAASyB,KAASpC;YACpDL,IAAOA,EAAKgD;ADLV;AACJ;ICOF,CAACI,OAAOC;QACN,OAAO;YACL,IAAIrD,IAAOK,KAAKsB;YAChB,OAAO3B,MAASK,KAAKG,GAAS;sBACd,EAACR,EAAKe,GAAMf,EAAKgB;gBAC/BhB,IAAOA,EAAKgD;ADLR;AACJ,UCMFM,KAAKjD,KANA;ADCP;;;ACOH,IAAAkD,WAEclC;;AAAOlC,QAAAE,UAAAkE",
        "file": "HashMap.js",
        "sourcesContent": [
          "import { HashContainer, HashContainerIterator } from \"./Base\";\nimport checkObject from \"../../utils/checkObject\";\nimport $checkWithinAccessParams from \"../../utils/checkParams.macro\";\nimport { throwIteratorAccessError } from \"../../utils/throwError\";\nclass HashMapIterator extends HashContainerIterator {\n    constructor(node, header, container, iteratorType) {\n        super(node, header, iteratorType);\n        this.container = container;\n    }\n    get pointer() {\n        if (this._node === this._header) {\n            throwIteratorAccessError();\n        }\n        const self = this;\n        return new Proxy([], {\n            get(_, props) {\n                if (props === '0')\n                    return self._node._key;\n                else if (props === '1')\n                    return self._node._value;\n            },\n            set(_, props, newValue) {\n                if (props !== '1') {\n                    throw new TypeError('props must be 1');\n                }\n                self._node._value = newValue;\n                return true;\n            }\n        });\n    }\n    copy() {\n        return new HashMapIterator(this._node, this._header, this.container, this.iteratorType);\n    }\n}\nclass HashMap extends HashContainer {\n    constructor(container = []) {\n        super();\n        const self = this;\n        container.forEach(function (el) {\n            self.setElement(el[0], el[1]);\n        });\n    }\n    begin() {\n        return new HashMapIterator(this._head, this._header, this);\n    }\n    end() {\n        return new HashMapIterator(this._header, this._header, this);\n    }\n    rBegin() {\n        return new HashMapIterator(this._tail, this._header, this, 1 /* IteratorType.REVERSE */);\n    }\n    rEnd() {\n        return new HashMapIterator(this._header, this._header, this, 1 /* IteratorType.REVERSE */);\n    }\n    front() {\n        if (this._length === 0)\n            return;\n        return [this._head._key, this._head._value];\n    }\n    back() {\n        if (this._length === 0)\n            return;\n        return [this._tail._key, this._tail._value];\n    }\n    /**\n     * @description Insert a key-value pair or set value by the given key.\n     * @param key - The key want to insert.\n     * @param value - The value want to set.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns The size of container after setting.\n     */\n    setElement(key, value, isObject) {\n        return this._set(key, value, isObject);\n    }\n    /**\n     * @description Get the value of the element of the specified key.\n     * @param key - The key want to search.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @example\n     * const val = container.getElementByKey(1);\n     */\n    getElementByKey(key, isObject) {\n        if (isObject === undefined)\n            isObject = checkObject(key);\n        if (isObject) {\n            const index = key[this.HASH_TAG];\n            return index !== undefined ? this._objMap[index]._value : undefined;\n        }\n        const node = this._originMap[key];\n        return node ? node._value : undefined;\n    }\n    getElementByPos(pos) {\n        if (pos < 0 || pos > this._length - 1) {\n            throw new RangeError();\n        }\n        let node = this._head;\n        while (pos--) {\n            node = node._next;\n        }\n        return [node._key, node._value];\n    }\n    /**\n     * @description Check key if exist in container.\n     * @param key - The element you want to search.\n     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n     *                   If a `undefined` value is passed in, the type will be automatically judged.\n     * @returns An iterator pointing to the element if found, or super end if not found.\n     */\n    find(key, isObject) {\n        const node = this._findElementNode(key, isObject);\n        return new HashMapIterator(node, this._header, this);\n    }\n    forEach(callback) {\n        let index = 0;\n        let node = this._head;\n        while (node !== this._header) {\n            callback([node._key, node._value], index++, this);\n            node = node._next;\n        }\n    }\n    [Symbol.iterator]() {\n        return function* () {\n            let node = this._head;\n            while (node !== this._header) {\n                yield [node._key, node._value];\n                node = node._next;\n            }\n        }.bind(this)();\n    }\n}\nexport default HashMap;\n",
          "import { initContainer, IteratorType } from '@/container/ContainerBase';\nimport { HashContainer, HashContainerIterator, HashLinkNode } from '@/container/HashContainer/Base';\nimport checkObject from '@/utils/checkObject';\nimport $checkWithinAccessParams from '@/utils/checkParams.macro';\nimport { throwIteratorAccessError } from '@/utils/throwError';\n\nclass HashMapIterator<K, V> extends HashContainerIterator<K, V> {\n  readonly container: HashMap<K, V>;\n  constructor(\n    node: HashLinkNode<K, V>,\n    header: HashLinkNode<K, V>,\n    container: HashMap<K, V>,\n    iteratorType?: IteratorType\n  ) {\n    super(node, header, iteratorType);\n    this.container = container;\n  }\n  get pointer() {\n    if (this._node === this._header) {\n      throwIteratorAccessError();\n    }\n    const self = this;\n    return new Proxy(<[K, V]><unknown>[], {\n      get(_, props: '0' | '1') {\n        if (props === '0') return self._node._key;\n        else if (props === '1') return self._node._value;\n      },\n      set(_, props: '1', newValue: V) {\n        if (props !== '1') {\n          throw new TypeError('props must be 1');\n        }\n        self._node._value = newValue;\n        return true;\n      }\n    });\n  }\n  copy() {\n    return new HashMapIterator<K, V>(this._node, this._header, this.container, this.iteratorType);\n  }\n  // @ts-ignore\n  equals(iter: HashMapIterator<K, V>): boolean;\n}\n\nexport type { HashMapIterator };\n\nclass HashMap<K, V> extends HashContainer<K, V> {\n  constructor(container: initContainer<[K, V]> = []) {\n    super();\n    const self = this;\n    container.forEach(function (el) {\n      self.setElement(el[0], el[1]);\n    });\n  }\n  begin() {\n    return new HashMapIterator<K, V>(this._head, this._header, this);\n  }\n  end() {\n    return new HashMapIterator<K, V>(this._header, this._header, this);\n  }\n  rBegin() {\n    return new HashMapIterator<K, V>(this._tail, this._header, this, IteratorType.REVERSE);\n  }\n  rEnd() {\n    return new HashMapIterator<K, V>(this._header, this._header, this, IteratorType.REVERSE);\n  }\n  front() {\n    if (this._length === 0) return;\n    return <[K, V]>[this._head._key, this._head._value];\n  }\n  back() {\n    if (this._length === 0) return;\n    return <[K, V]>[this._tail._key, this._tail._value];\n  }\n  /**\n   * @description Insert a key-value pair or set value by the given key.\n   * @param key - The key want to insert.\n   * @param value - The value want to set.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns The size of container after setting.\n   */\n  setElement(key: K, value: V, isObject?: boolean) {\n    return this._set(key, value, isObject);\n  }\n  /**\n   * @description Get the value of the element of the specified key.\n   * @param key - The key want to search.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @example\n   * const val = container.getElementByKey(1);\n   */\n  getElementByKey(key: K, isObject?: boolean) {\n    if (isObject === undefined) isObject = checkObject(key);\n    if (isObject) {\n      const index = (<Record<symbol, number>><unknown>key)[this.HASH_TAG];\n      return index !== undefined ? this._objMap[index]._value : undefined;\n    }\n    const node = this._originMap[<string><unknown>key];\n    return node ? node._value : undefined;\n  }\n  getElementByPos(pos: number) {\n    $checkWithinAccessParams!(pos, 0, this._length - 1);\n    let node = this._head;\n    while (pos--) {\n      node = node._next;\n    }\n    return <[K, V]>[node._key, node._value];\n  }\n  /**\n   * @description Check key if exist in container.\n   * @param key - The element you want to search.\n   * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>\n   *                   If a `undefined` value is passed in, the type will be automatically judged.\n   * @returns An iterator pointing to the element if found, or super end if not found.\n   */\n  find(key: K, isObject?: boolean) {\n    const node = this._findElementNode(key, isObject);\n    return new HashMapIterator<K, V>(node, this._header, this);\n  }\n  forEach(callback: (element: [K, V], index: number, hashMap: HashMap<K, V>) => void) {\n    let index = 0;\n    let node = this._head;\n    while (node !== this._header) {\n      callback(<[K, V]>[node._key, node._value], index++, this);\n      node = node._next;\n    }\n  }\n  [Symbol.iterator]() {\n    return function * (this: HashMap<K, V>) {\n      let node = this._head;\n      while (node !== this._header) {\n        yield <[K, V]>[node._key, node._value];\n        node = node._next;\n      }\n    }.bind(this)();\n  }\n}\n\nexport default HashMap;\n"
        ],
        "sourceRoot": ""
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/handlers/pubrel.js": {
      "lineLengths": [
        13, 62, 48, 41, 70, 33, 47, 52, 19, 64, 49, 27, 42, 17, 59, 54, 15, 9,
        14, 50, 9, 7, 2, 31, 34
      ],
      "data": {
        "version": 3,
        "file": "pubrel.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/handlers/pubrel.ts"
        ],
        "names": [],
        "mappings": ";;AAOA,MAAM,YAAY,GAAkB,CAAC,MAAM,EAAE,MAAqB,EAAE,IAAI,EAAE,EAAE;IAC3E,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAA;IACpC,MAAM,QAAQ,GAAG,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAA;IACjE,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,CAAA;IAE5B,MAAM,IAAI,GAAmB,EAAE,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,CAAA;IAE1D,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAmB,EAAE,EAAE;QAC7D,IAAI,CAAC,GAAG,EAAE,CAAC;YACV,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,OAAiB,EAAE,GAAG,CAAC,CAAA;YAC7D,MAAM,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,EAAE;gBAClC,IAAI,IAAI,EAAE,CAAC;oBACV,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAA;gBACtB,CAAC;gBACD,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,CAAA;gBAC1C,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;YACtC,CAAC,CAAC,CAAA;QACH,CAAC;aAAM,CAAC;YACP,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAA;QACtC,CAAC;IACF,CAAC,CAAC,CAAA;AACH,CAAC,CAAA;AAED,kBAAe,YAAY,CAAA"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/default-message-id-provider.js": {
      "lineLengths": [
        13, 62, 32, 11, 19, 69, 5, 16, 33, 36, 28, 9, 18, 5, 24, 59, 5, 25, 20,
        5, 29, 15, 1, 43, 55
      ],
      "data": {
        "version": 3,
        "file": "default-message-id-provider.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/default-message-id-provider.ts"
        ],
        "names": [],
        "mappings": ";;AAwCA,MAAqB,wBAAwB;IACpC,MAAM,CAAQ;IAEtB;QAKC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAA;IAC7D,CAAC;IAQD,QAAQ;QAEP,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAA;QAExB,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;QAChB,CAAC;QACD,OAAO,EAAE,CAAA;IACV,CAAC;IAOD,gBAAgB;QACf,OAAO,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;IACnD,CAAC;IAQD,QAAQ,CAAC,SAAiB;QACzB,OAAO,IAAI,CAAA;IACZ,CAAC;IAOD,UAAU,CAAC,SAAiB,IAAG,CAAC;IAMhC,KAAK,KAAI,CAAC;CACV;AA1DD,2CA0DC"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/topic-alias-recv.js": {
      "lineLengths": [
        13, 62, 22, 17, 8, 11, 22, 31, 23, 5, 23, 46, 25, 9, 41, 60, 20, 5, 28,
        40, 5, 13, 31, 5, 1, 33, 44
      ],
      "data": {
        "version": 3,
        "file": "topic-alias-recv.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/topic-alias-recv.ts"
        ],
        "names": [],
        "mappings": ";;AAKA,MAAqB,cAAc;IAC1B,YAAY,CAAwB;IAErC,GAAG,CAAQ;IAEX,MAAM,CAAQ;IAErB,YAAY,GAAW;QACtB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;QACtB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;IACf,CAAC;IAQD,GAAG,CAAC,KAAa,EAAE,KAAa;QAC/B,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACrC,OAAO,KAAK,CAAA;QACb,CAAC;QACD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,CAAA;QAChC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,CAAA;QACnD,OAAO,IAAI,CAAA;IACZ,CAAC;IAOD,eAAe,CAAC,KAAa;QAC5B,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA;IAChC,CAAC;IAKD,KAAK;QACJ,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;IACvB,CAAC;CACD;AA1CD,iCA0CC"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/TypedEmitter.js": {
      "lineLengths": [13, 72, 62, 2, 62, 35, 52, 37, 25, 1, 46, 62, 40],
      "data": {
        "version": 3,
        "file": "TypedEmitter.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/TypedEmitter.ts"
        ],
        "names": [],
        "mappings": ";;;;;;AAAA,oDAAiC;AACjC,qCAAqC;AAgErC,MAAa,iBAAiB;CAE1B;AAFJ,8CAEI;AAGJ,IAAA,mBAAU,EAAC,iBAAiB,EAAE,gBAAY,CAAC,CAAA"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/KeepaliveManager.js": {
      "lineLengths": [
        13, 72, 62, 2, 62, 60, 24, 15, 12, 10, 22, 12, 11, 31, 19, 37, 47, 5,
        25, 35, 5, 21, 31, 5, 34, 29, 20, 42, 35, 34, 25, 52, 52, 5, 13, 27, 43,
        32, 9, 5, 25, 22, 63, 119, 9, 32, 26, 76, 5, 15, 21, 30, 5, 18, 29, 19,
        9, 21, 25, 66, 72, 61, 45, 33, 23, 13, 30, 37, 39, 13, 40, 49, 13, 32,
        5, 1, 35, 44
      ],
      "data": {
        "version": 3,
        "file": "KeepaliveManager.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/KeepaliveManager.ts"
        ],
        "names": [],
        "mappings": "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"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/get-timer.js": {
      "lineLengths": [
        13, 97, 33, 53, 88, 68, 5, 39, 29, 33, 17, 4, 96, 72, 21, 21, 3, 64, 31,
        62, 24, 95, 22, 10, 26, 6, 27, 46, 24, 137, 40, 22, 6, 5, 62, 49, 59,
        21, 37, 41, 2, 21, 49, 47, 2, 31, 22, 24, 31, 9, 24, 31, 9, 20, 18, 106,
        29, 30, 9, 5, 2, 27, 37
      ],
      "data": {
        "version": 3,
        "file": "get-timer.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/get-timer.ts"
        ],
        "names": [],
        "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iDAA4E;AAC5E,2DAA2E;AAW3E,MAAM,WAAW,GAAU;IAC1B,GAAG,EAAE,2BAAI;IACT,KAAK,EAAE,6BAAM;CACb,CAAA;AAED,MAAM,WAAW,GAAU;IAC1B,GAAG,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC;IAC5C,KAAK,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC;CAC1C,CAAA;AAED,MAAM,QAAQ,GAAG,CAAC,OAAqB,EAAS,EAAE;IACjD,QAAQ,OAAO,EAAE,CAAC;QACjB,KAAK,QAAQ,CAAC,CAAC,CAAC;YACf,OAAO,WAAW,CAAA;QACnB,CAAC;QACD,KAAK,QAAQ,CAAC,CAAC,CAAC;YACf,OAAO,WAAW,CAAA;QACnB,CAAC;QACD,KAAK,MAAM,CAAC;QACZ,OAAO,CAAC,CAAC,CAAC;YACT,OAAO,oBAAS,IAAI,CAAC,wBAAW,IAAI,CAAC,iCAAoB;gBACxD,CAAC,CAAC,WAAW;gBACb,CAAC,CAAC,WAAW,CAAA;QACf,CAAC;IACF,CAAC;AACF,CAAC,CAAA;AAED,kBAAe,QAAQ,CAAA"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/is-browser.js": {
      "lineLengths": [
        13, 62, 60, 36, 40, 71, 74, 55, 105, 38, 9, 54, 5, 17, 2, 64, 61, 33,
        103, 83, 39, 50, 28, 38
      ],
      "data": {
        "version": 3,
        "file": "is-browser.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/is-browser.ts"
        ],
        "names": [],
        "mappings": ";;;AAKA,MAAM,oBAAoB,GAAG,GAAG,EAAE;IAEjC,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;QAGnC,MAAM,mBAAmB,GACxB,OAAO,SAAS,KAAK,WAAW;YAChC,SAAS,CAAC,SAAS,EAAE,WAAW,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAA;QAC9D,IAAI,mBAAmB,IAAI,OAAO,EAAE,QAAQ,EAAE,CAAC;YAC9C,MAAM,iBAAiB,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAC7D,OAAO,CAAC,QAAQ,EAChB,UAAU,CACV,CAAA;YAOD,OAAO,CAAC,iBAAiB,CAAA;QAC1B,CAAC;QACD,OAAO,OAAO,MAAM,CAAC,QAAQ,KAAK,WAAW,CAAA;IAC9C,CAAC;IAED,OAAO,KAAK,CAAA;AACb,CAAC,CAAA;AAED,MAAM,cAAc,GAAG,GAAG,EAAE,CAC3B,OAAO,CACN,OAAO,IAAI,KAAK,QAAQ;IACvB,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,mBAAmB,CAAC;IACtD,OAAO,IAAI,KAAK,WAAW,CAC5B,CAAA;AAEF,MAAM,gBAAgB,GAAG,GAAG,EAAE,CAC7B,OAAO,SAAS,KAAK,WAAW,IAAI,SAAS,CAAC,OAAO,KAAK,aAAa,CAAA;AAExE,MAAM,SAAS,GACd,oBAAoB,EAAE,IAAI,cAAc,EAAE,IAAI,gBAAgB,EAAE,CAAA;AAEpD,QAAA,WAAW,GAAG,cAAc,EAAE,CAAA;AAE9B,QAAA,oBAAoB,GAAG,gBAAgB,EAAE,CAAA;AAEtD,kBAAe,SAAS,CAAA"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/unique-message-id-provider.js": {
      "lineLengths": [
        13, 62, 55, 31, 20, 11, 19, 80, 5, 16, 51, 27, 5, 24, 27, 5, 25, 51, 5,
        27, 45, 5, 13, 37, 5, 1, 42, 54
      ],
      "data": {
        "version": 3,
        "file": "unique-message-id-provider.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/unique-message-id-provider.ts"
        ],
        "names": [],
        "mappings": ";;AAAA,uDAAkD;AAOlD,MAAqB,uBAAuB;IACnC,eAAe,CAAiB;IAEhC,MAAM,CAAQ;IAEtB;QACC,IAAI,CAAC,eAAe,GAAG,IAAI,kCAAe,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;IACrD,CAAC;IASD,QAAQ;QACP,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAA;QAC1C,OAAO,IAAI,CAAC,MAAM,CAAA;IACnB,CAAC;IAOD,gBAAgB;QACf,OAAO,IAAI,CAAC,MAAM,CAAA;IACnB,CAAC;IAQD,QAAQ,CAAC,SAAiB;QACzB,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,CAAY,CAAA;IACtD,CAAC;IAOD,UAAU,CAAC,SAAiB;QAC3B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IACrC,CAAC;IAMD,KAAK;QACJ,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAA;IAC7B,CAAC;CACD;AAxDD,0CAwDC"
      },
      "url": null,
      "sourceURL": null
    },
    "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/build/lib/connect/index.js": {
      "lineLengths": [
        13, 72, 62, 2, 62, 36, 50, 46, 55, 63, 46, 36, 1, 45, 21, 33, 16, 20,
        49, 22, 51, 37, 37, 9, 14, 38, 9, 5, 1, 35, 45, 49, 25, 23, 5, 22, 53,
        63, 33, 37, 56, 9, 48, 46, 44, 52, 44, 45, 29, 48, 9, 56, 5, 74, 26, 59,
        5, 48, 43, 25, 5, 27, 64, 44, 5, 50, 36, 5, 45, 41, 60, 5, 32, 28, 80,
        40, 32, 48, 30, 30, 46, 30, 30, 46, 30, 31, 47, 30, 28, 103, 17, 13, 9,
        14, 59, 9, 5, 21, 23, 66, 57, 58, 54, 53, 53, 42, 55, 9, 14, 64, 65, 51,
        52, 53, 54, 9, 5, 36, 72, 25, 19, 20, 17, 18, 17, 18, 18, 19, 34, 46,
        29, 13, 56, 14, 5, 49, 64, 5, 24, 45, 5, 30, 27, 42, 65, 43, 13, 66, 66,
        74, 38, 64, 38, 37, 9, 58, 54, 5, 55, 30, 7, 18, 1, 61, 45, 48, 44, 35,
        51, 32, 14, 24, 51, 32, 14, 29, 51, 29, 28, 14, 10, 37, 54, 90, 14, 9,
        53, 76, 77, 15, 9, 72, 72, 11, 7, 1, 26, 33
      ],
      "data": {
        "version": 3,
        "file": "index.js",
        "sourceRoot": "",
        "sources": [
          "file:///Users/markus/Code/pixoo-daemon/node_modules/mqtt/src/lib/connect/index.ts"
        ],
        "names": [],
        "mappings": "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"
      },
      "url": null,
      "sourceURL": null
    }
  }
}
