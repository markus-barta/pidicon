---
version: 2.1.0
lastUpdated: 2025-10-23
scope: pidicon

rules:
  - description: Split tasks longer than 30 minutes
    globs:
      - "*"
    alwaysApply: true
    message: |
      If any requested task seems to exceed ~30 minutes of realistic work,
      outline a short execution plan, split it into sub‑tasks, and confirm
      before continuing.
    reference: "./STANDARDS.md"

  - description: JavaScript code quality and maintainability
    globs:
      - "**/*.js"
    alwaysApply: true
    message: |
      Follow strict code quality:
      • No magic numbers – extract constants.
      • Keep functions ≤ 50 LOC.
      • Aim complexity ≤ 10 and ≤ 5 parameters per function.
      • Propose refactors when code violates these.
      Keep code modular, expressive, and easily testable.
    reference: "./docs/CODE_QUALITY.md"

  - description: Formatting and linting conventions
    globs:
      - "**/*.js"
      - "**/*.md"
    alwaysApply: true
    message: |
      Maintain clean formatting:
      • Keep lines near 80 chars, never exceed 120.
      • Always specify a code block language in Markdown.
      • Use consistent indentation and Prettier defaults.
    reference: "./STANDARDS.md#formatting--commits"

  - description: Enforce Conventional Commit messages
    globs:
      - "COMMIT_MSG"
    alwaysApply: true
    message: |
      Only use Conventional Commit format:
      feat(scene): add fade transition
      fix(lib): handle null input in parser
      docs(readme): update usage example
    reference: "./STANDARDS.md#commit-guidelines"

  - description: Require README.md in key packages
    globs:
      - "lib/*"
      - "scenes/*"
      - "docs/*"
    alwaysApply: true
    message: |
      Each primary folder under lib/, scenes/, and docs/ must include
      a minimal README.md describing purpose, API surface, and ownership.
    reference: "./STANDARDS.md#documentation"

  - description: Require JSDoc on exports
    globs:
      - "lib/**/*.js"
      - "scenes/**/*.js"
    alwaysApply: true
    message: |
      All exported functions must have concise JSDoc with @param / @returns.
      Keep them informative, not verbose. Update docstrings when signatures change.
    reference: "./STANDARDS.md#documentation"

  - description: POSIX shebang for server scripts
    globs:
      - "scripts/**/*.sh"
    alwaysApply: true
    message: |
      Every shell script in scripts/ must start with:
      #!/usr/bin/env bash
      Follow POSIX where possible and validate via ShellCheck.
    reference: "./STANDARDS.md#shell-standards"

  - description: Shell examples in docs use fish style
    globs:
      - "docs/**/*.md"
    alwaysApply: true
    message: |
      Prefer fish syntax for interactive examples in documentation.
      If syntax differs from bash, add a bash variant below it.
    reference: "./STANDARDS.md#shell-standards"

  - description: Scene architecture contract
    globs:
      - "scenes/**/*.js"
    alwaysApply: true
    message: |
      Scene modules must implement:
      - init()
      - run()
      - teardown()
      and expose configuration constants via a single exported object.
      Highlight missing parts during code review or generation.
    reference: "./docs/SCENE_DEVELOPMENT.md"

  - description: Include build number + git hash in deployment notes
    globs:
      - "*"
    alwaysApply: true
    message: |
      When referencing deployments in commits or docs, append the build count
      and short git hash, e.g. “build 1532 (a8b1f3c)”.
      The build number is produced by:
      git rev-list --count HEAD
    reference: "./STANDARDS.md#deployment-references"
---
# Cursor Rules for PIDICON

**Official location:** `.cursor/rules/pidicon.mdc`  
**Role:** Provide AI guidance for quality, structure, and consistency.  

## Notes

- Cursor interprets `message` instructions; there is no active YAML config execution.  
- Linting, formatting, and commit validation are enforced separately (`eslint`, `prettier`, `husky`).  
- Keep rules concise and domain‑specific.  
- Update version when adding or removing rules.
